{"result":[{"scriptId":"9","url":"node:internal/bootstrap/loaders","functions":[{"functionName":"internalBinding","ranges":[{"startOffset":5091,"endOffset":5353,"count":1}],"isBlockCoverage":false},{"functionName":"canBeRequiredByUsers","ranges":[{"startOffset":7334,"endOffset":7450,"count":1}],"isBlockCoverage":false},{"functionName":"compileForPublicLoader","ranges":[{"startOffset":7522,"endOffset":8216,"count":1}],"isBlockCoverage":false},{"functionName":"getESMFacade","ranges":[{"startOffset":8220,"endOffset":8861,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8588,"endOffset":8701,"count":0}],"isBlockCoverage":false},{"functionName":"compileForInternalLoader","ranges":[{"startOffset":9505,"endOffset":10090,"count":1}],"isBlockCoverage":false},{"functionName":"nativeModuleRequire","ranges":[{"startOffset":10288,"endOffset":10659,"count":1}],"isBlockCoverage":false}]},{"scriptId":"12","url":"node:internal/timers","functions":[{"functionName":"initAsyncResource","ranges":[{"startOffset":5399,"endOffset":5677,"count":1}],"isBlockCoverage":false},{"functionName":"Timeout","ranges":[{"startOffset":5762,"endOffset":6759,"count":1}],"isBlockCoverage":false},{"functionName":"Timeout.unref","ranges":[{"startOffset":7201,"endOffset":7329,"count":1}],"isBlockCoverage":false},{"functionName":"TimersList","ranges":[{"startOffset":7554,"endOffset":7854,"count":1}],"isBlockCoverage":false},{"functionName":"ImmediateList.append","ranges":[{"startOffset":8446,"endOffset":8613,"count":1}],"isBlockCoverage":false},{"functionName":"incRefCount","ranges":[{"startOffset":9131,"endOffset":9207,"count":1}],"isBlockCoverage":false},{"functionName":"decRefCount","ranges":[{"startOffset":9209,"endOffset":9286,"count":1}],"isBlockCoverage":false},{"functionName":"insert","ranges":[{"startOffset":10369,"endOffset":11020,"count":1}],"isBlockCoverage":false},{"functionName":"compareTimersLists","ranges":[{"startOffset":11865,"endOffset":12070,"count":1}],"isBlockCoverage":false},{"functionName":"setPosition","ranges":[{"startOffset":12072,"endOffset":12143,"count":1}],"isBlockCoverage":false},{"functionName":"processTimers","ranges":[{"startOffset":14395,"endOffset":14869,"count":1}],"isBlockCoverage":false},{"functionName":"Immediate","ranges":[{"startOffset":17414,"endOffset":17736,"count":1}],"isBlockCoverage":false},{"functionName":"ref","ranges":[{"startOffset":17740,"endOffset":17913,"count":1}],"isBlockCoverage":false}]},{"scriptId":"13","url":"node:internal/async_hooks","functions":[{"functionName":"newAsyncId","ranges":[{"startOffset":14494,"endOffset":14564,"count":1}],"isBlockCoverage":false},{"functionName":"getDefaultTriggerAsyncId","ranges":[{"startOffset":14939,"endOffset":15229,"count":1}],"isBlockCoverage":false},{"functionName":"hasHooks","ranges":[{"startOffset":16044,"endOffset":16107,"count":1}],"isBlockCoverage":false},{"functionName":"enabledHooksExist","ranges":[{"startOffset":16109,"endOffset":16168,"count":1}],"isBlockCoverage":false},{"functionName":"initHooksExist","ranges":[{"startOffset":16170,"endOffset":16225,"count":1}],"isBlockCoverage":false},{"functionName":"destroyHooksExist","ranges":[{"startOffset":16286,"endOffset":16347,"count":1}],"isBlockCoverage":false},{"functionName":"emitBeforeScript","ranges":[{"startOffset":16838,"endOffset":17014,"count":1}],"isBlockCoverage":false},{"functionName":"emitAfterScript","ranges":[{"startOffset":17017,"endOffset":17137,"count":1}],"isBlockCoverage":false},{"functionName":"pushAsyncContext","ranges":[{"startOffset":17482,"endOffset":18052,"count":1}],"isBlockCoverage":false},{"functionName":"popAsyncContext","ranges":[{"startOffset":18117,"endOffset":18728,"count":1}],"isBlockCoverage":false}]},{"scriptId":"15","url":"node:internal/validators","functions":[{"functionName":"isUint32","ranges":[{"startOffset":779,"endOffset":841,"count":1}],"isBlockCoverage":false},{"functionName":"parseFileMode","ranges":[{"startOffset":1465,"endOffset":1783,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1828,"endOffset":2209,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2880,"endOffset":3390,"count":1}],"isBlockCoverage":false},{"functionName":"validateString","ranges":[{"startOffset":3394,"endOffset":3526,"count":1}],"isBlockCoverage":false},{"functionName":"validateNumber","ranges":[{"startOffset":3528,"endOffset":3660,"count":1}],"isBlockCoverage":false},{"functionName":"validateBoolean","ranges":[{"startOffset":4037,"endOffset":4172,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4384,"endOffset":4943,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4985,"endOffset":5263,"count":1}],"isBlockCoverage":false},{"functionName":"validateEncoding","ranges":[{"startOffset":5915,"endOffset":6249,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6815,"endOffset":6916,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7226,"endOffset":7342,"count":1}],"isBlockCoverage":false}]},{"scriptId":"16","url":"node:internal/util","functions":[{"functionName":"normalizeEncoding","ranges":[{"startOffset":4180,"endOffset":4311,"count":1}],"isBlockCoverage":false},{"functionName":"slowCases","ranges":[{"startOffset":4313,"endOffset":6064,"count":1}],"isBlockCoverage":false},{"functionName":"convertToValidSignal","ranges":[{"startOffset":7792,"endOffset":8113,"count":1}],"isBlockCoverage":false},{"functionName":"fn","ranges":[{"startOffset":9543,"endOffset":10062,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9589,"endOffset":10056,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9643,"endOffset":10006,"count":1}],"isBlockCoverage":false},{"functionName":"spliceOne","ranges":[{"startOffset":10907,"endOffset":11034,"count":1}],"isBlockCoverage":false}]},{"scriptId":"17","url":"node:internal/util/types","functions":[{"functionName":"isUint8Array","ranges":[{"startOffset":236,"endOffset":342,"count":1}],"isBlockCoverage":false}]},{"scriptId":"18","url":"node:internal/linkedlist","functions":[{"functionName":"peek","ranges":[{"startOffset":133,"endOffset":225,"count":1}],"isBlockCoverage":false},{"functionName":"remove","ranges":[{"startOffset":260,"endOffset":487,"count":1}],"isBlockCoverage":false},{"functionName":"append","ranges":[{"startOffset":543,"endOffset":995,"count":1}],"isBlockCoverage":false},{"functionName":"isEmpty","ranges":[{"startOffset":997,"endOffset":1057,"count":1}],"isBlockCoverage":false}]},{"scriptId":"19","url":"node:internal/priority_queue","functions":[{"functionName":"insert","ranges":[{"startOffset":859,"endOffset":1044,"count":1}],"isBlockCoverage":false},{"functionName":"peek","ranges":[{"startOffset":1048,"endOffset":1087,"count":1}],"isBlockCoverage":false},{"functionName":"percolateDown","ranges":[{"startOffset":1091,"endOffset":1759,"count":1}],"isBlockCoverage":false},{"functionName":"percolateUp","ranges":[{"startOffset":1763,"endOffset":2254,"count":1}],"isBlockCoverage":false},{"functionName":"removeAt","ranges":[{"startOffset":2258,"endOffset":2591,"count":1}],"isBlockCoverage":false},{"functionName":"shift","ranges":[{"startOffset":2595,"endOffset":2750,"count":1}],"isBlockCoverage":false}]},{"scriptId":"21","url":"node:internal/assert","functions":[{"functionName":"assert","ranges":[{"startOffset":157,"endOffset":307,"count":1}],"isBlockCoverage":false}]},{"scriptId":"22","url":"node:internal/util/debuglog","functions":[{"functionName":"noop","ranges":[{"startOffset":1419,"endOffset":1427,"count":1}],"isBlockCoverage":false}]},{"scriptId":"23","url":"node:events","functions":[{"functionName":"checkListener","ranges":[{"startOffset":7585,"endOffset":7663,"count":1}],"isBlockCoverage":false},{"functionName":"emit","ranges":[{"startOffset":13664,"endOffset":15891,"count":1}],"isBlockCoverage":false},{"functionName":"_addListener","ranges":[{"startOffset":15894,"endOffset":17930,"count":1}],"isBlockCoverage":false},{"functionName":"addListener","ranges":[{"startOffset":18108,"endOffset":18200,"count":1}],"isBlockCoverage":false},{"functionName":"onceWrapper","ranges":[{"startOffset":18593,"endOffset":18857,"count":1}],"isBlockCoverage":false},{"functionName":"removeListener","ranges":[{"startOffset":20027,"endOffset":21321,"count":1}],"isBlockCoverage":false},{"functionName":"arrayClone","ranges":[{"startOffset":25073,"endOffset":25546,"count":1}],"isBlockCoverage":false}]},{"scriptId":"24","url":"node:buffer","functions":[{"functionName":"createPool","ranges":[{"startOffset":3805,"endOffset":3964,"count":1}],"isBlockCoverage":false},{"functionName":"alignPool","ranges":[{"startOffset":3980,"endOffset":4102,"count":1}],"isBlockCoverage":false},{"functionName":"from","ranges":[{"startOffset":8393,"endOffset":9357,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":10169,"endOffset":10324,"count":1}],"isBlockCoverage":false},{"functionName":"allocUnsafe","ranges":[{"startOffset":10851,"endOffset":10926,"count":1}],"isBlockCoverage":false},{"functionName":"allocate","ranges":[{"startOffset":11556,"endOffset":11888,"count":1}],"isBlockCoverage":false},{"functionName":"fromStringFast","ranges":[{"startOffset":11890,"endOffset":12436,"count":1}],"isBlockCoverage":false},{"functionName":"fromString","ranges":[{"startOffset":12438,"endOffset":12891,"count":1}],"isBlockCoverage":false},{"functionName":"isEncoding","ranges":[{"startOffset":14755,"endOffset":14906,"count":1}],"isBlockCoverage":false},{"functionName":"write","ranges":[{"startOffset":16525,"endOffset":16589,"count":1}],"isBlockCoverage":false},{"functionName":"slice","ranges":[{"startOffset":16602,"endOffset":16648,"count":1}],"isBlockCoverage":false},{"functionName":"getEncodingOps","ranges":[{"startOffset":19908,"endOffset":21732,"count":1}],"isBlockCoverage":false},{"functionName":"toString","ranges":[{"startOffset":23247,"endOffset":23826,"count":1}],"isBlockCoverage":false}]},{"scriptId":"25","url":"node:internal/buffer","functions":[{"functionName":"FastBuffer","ranges":[{"startOffset":26353,"endOffset":26453,"count":1}],"isBlockCoverage":false},{"functionName":"markAsUntransferable","ranges":[{"startOffset":29752,"endOffset":30016,"count":1}],"isBlockCoverage":false},{"functionName":"createUnsafeBuffer","ranges":[{"startOffset":30294,"endOffset":30430,"count":1}],"isBlockCoverage":false}]},{"scriptId":"32","url":"node:internal/process/task_queues","functions":[{"functionName":"hasTickScheduled","ranges":[{"startOffset":999,"endOffset":1074,"count":1}],"isBlockCoverage":false},{"functionName":"setHasTickScheduled","ranges":[{"startOffset":1076,"endOffset":1162,"count":1}],"isBlockCoverage":false},{"functionName":"runNextTicks","ranges":[{"startOffset":1264,"endOffset":1460,"count":1}],"isBlockCoverage":false},{"functionName":"processTicksAndRejections","ranges":[{"startOffset":1462,"endOffset":2430,"count":1}],"isBlockCoverage":false},{"functionName":"nextTick","ranges":[{"startOffset":2574,"endOffset":3435,"count":1}],"isBlockCoverage":false}]},{"scriptId":"33","url":"node:internal/process/promises","functions":[{"functionName":"setHasRejectionToWarn","ranges":[{"startOffset":2032,"endOffset":2122,"count":1}],"isBlockCoverage":false},{"functionName":"hasRejectionToWarn","ranges":[{"startOffset":2124,"endOffset":2203,"count":1}],"isBlockCoverage":false},{"functionName":"processPromiseRejections","ranges":[{"startOffset":6096,"endOffset":9263,"count":1}],"isBlockCoverage":false}]},{"scriptId":"34","url":"node:internal/fixed_queue","functions":[{"functionName":"isEmpty","ranges":[{"startOffset":3077,"endOffset":3129,"count":1}],"isBlockCoverage":false},{"functionName":"isFull","ranges":[{"startOffset":3133,"endOffset":3200,"count":1}],"isBlockCoverage":false},{"functionName":"push","ranges":[{"startOffset":3204,"endOffset":3291,"count":1}],"isBlockCoverage":false},{"functionName":"shift","ranges":[{"startOffset":3295,"endOffset":3510,"count":1}],"isBlockCoverage":false},{"functionName":"isEmpty","ranges":[{"startOffset":3630,"endOffset":3677,"count":1}],"isBlockCoverage":false},{"functionName":"push","ranges":[{"startOffset":3681,"endOffset":3945,"count":1}],"isBlockCoverage":false},{"functionName":"shift","ranges":[{"startOffset":3949,"endOffset":4180,"count":1}],"isBlockCoverage":false}]},{"scriptId":"39","url":"node:internal/url","functions":[{"functionName":"URLContext","ranges":[{"startOffset":3689,"endOffset":3912,"count":1}],"isBlockCoverage":false},{"functionName":"URLSearchParams","ranges":[{"startOffset":4314,"endOffset":6722,"count":1}],"isBlockCoverage":false},{"functionName":"onParseComplete","ranges":[{"startOffset":14171,"endOffset":14864,"count":1}],"isBlockCoverage":false},{"functionName":"onParsePathComplete","ranges":[{"startOffset":16126,"endOffset":16620,"count":1}],"isBlockCoverage":false},{"functionName":"URL","ranges":[{"startOffset":16978,"endOffset":17336,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":17425,"endOffset":17518,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":18734,"endOffset":19993,"count":1}],"isBlockCoverage":false},{"functionName":"toString","ranges":[{"startOffset":20050,"endOffset":20096,"count":1}],"isBlockCoverage":false},{"functionName":"get href","ranges":[{"startOffset":20100,"endOffset":20146,"count":1}],"isBlockCoverage":false},{"functionName":"get origin","ranges":[{"startOffset":20361,"endOffset":20930,"count":1}],"isBlockCoverage":false},{"functionName":"get protocol","ranges":[{"startOffset":20934,"endOffset":20987,"count":1}],"isBlockCoverage":false},{"functionName":"get hostname","ranges":[{"startOffset":22614,"endOffset":22671,"count":1}],"isBlockCoverage":false},{"functionName":"get pathname","ranges":[{"startOffset":23404,"endOffset":23609,"count":1}],"isBlockCoverage":false},{"functionName":"set pathname","ranges":[{"startOffset":23613,"endOffset":23827,"count":1}],"isBlockCoverage":false},{"functionName":"initSearchParams","ranges":[{"startOffset":27024,"endOffset":27164,"count":1}],"isBlockCoverage":false},{"functionName":"getPathFromURLPosix","ranges":[{"startOffset":37732,"endOffset":38236,"count":1}],"isBlockCoverage":false},{"functionName":"fileURLToPath","ranges":[{"startOffset":38238,"endOffset":38585,"count":1}],"isBlockCoverage":false},{"functionName":"encodePathChars","ranges":[{"startOffset":39345,"endOffset":40061,"count":1}],"isBlockCoverage":false},{"functionName":"pathToFileURL","ranges":[{"startOffset":40063,"endOffset":41314,"count":1}],"isBlockCoverage":false},{"functionName":"isURLInstance","ranges":[{"startOffset":41316,"endOffset":41435,"count":1}],"isBlockCoverage":false},{"functionName":"toPathIfFileURL","ranges":[{"startOffset":41437,"endOffset":41582,"count":1}],"isBlockCoverage":false}]},{"scriptId":"41","url":"node:path","functions":[{"functionName":"isAbsolute","ranges":[{"startOffset":35437,"endOffset":35593,"count":1}],"isBlockCoverage":false},{"functionName":"relative","ranges":[{"startOffset":36166,"endOffset":38526,"count":1}],"isBlockCoverage":false},{"functionName":"toNamespacedPath","ranges":[{"startOffset":38592,"endOffset":38668,"count":1}],"isBlockCoverage":false},{"functionName":"basename","ranges":[{"startOffset":39503,"endOffset":41903,"count":1}],"isBlockCoverage":false}]},{"scriptId":"47","url":"node:timers","functions":[{"functionName":"unenroll","ranges":[{"startOffset":2332,"endOffset":3516,"count":1}],"isBlockCoverage":false},{"functionName":"setTimeout","ranges":[{"startOffset":4218,"endOffset":4863,"count":1}],"isBlockCoverage":false},{"functionName":"clearTimeout","ranges":[{"startOffset":5163,"endOffset":5529,"count":1}],"isBlockCoverage":false},{"functionName":"clearInterval","ranges":[{"startOffset":6510,"endOffset":6808,"count":1}],"isBlockCoverage":false}]},{"scriptId":"54","url":"node:internal/streams/destroy","functions":[{"functionName":"checkError","ranges":[{"startOffset":235,"endOffset":546,"count":1}],"isBlockCoverage":false},{"functionName":"destroy","ranges":[{"startOffset":656,"endOffset":1455,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1316,"endOffset":1391,"count":0}],"isBlockCoverage":false},{"functionName":"_destroy","ranges":[{"startOffset":1457,"endOffset":2404,"count":1}],"isBlockCoverage":false},{"functionName":"onDestroy","ranges":[{"startOffset":1517,"endOffset":1976,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2188,"endOffset":2259,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2271,"endOffset":2344,"count":0}],"isBlockCoverage":false},{"functionName":"emitCloseNT","ranges":[{"startOffset":2495,"endOffset":2755,"count":1}],"isBlockCoverage":false}]},{"scriptId":"55","url":"node:internal/streams/duplex","functions":[{"functionName":"get","ranges":[{"startOffset":3271,"endOffset":3483,"count":1}],"isBlockCoverage":false}]},{"scriptId":"56","url":"node:internal/streams/readable","functions":[{"functionName":"Readable._destroy","ranges":[{"startOffset":7263,"endOffset":7295,"count":1}],"isBlockCoverage":false},{"functionName":"Readable.push","ranges":[{"startOffset":7613,"endOffset":7699,"count":1}],"isBlockCoverage":false},{"functionName":"readableAddChunk","ranges":[{"startOffset":7883,"endOffset":10153,"count":1}],"isBlockCoverage":false},{"functionName":"howMuchToRead","ranges":[{"startOffset":12193,"endOffset":12587,"count":1}],"isBlockCoverage":false},{"functionName":"Readable.read","ranges":[{"startOffset":12684,"endOffset":17055,"count":1}],"isBlockCoverage":false},{"functionName":"onEofChunk","ranges":[{"startOffset":17058,"endOffset":17878,"count":1}],"isBlockCoverage":false},{"functionName":"emitReadable_","ranges":[{"startOffset":18408,"endOffset":19062,"count":1}],"isBlockCoverage":false},{"functionName":"onunpipe","ranges":[{"startOffset":22459,"endOffset":22685,"count":1}],"isBlockCoverage":false},{"functionName":"cleanup","ranges":[{"startOffset":22792,"endOffset":23684,"count":1}],"isBlockCoverage":false},{"functionName":"unpipe","ranges":[{"startOffset":25851,"endOffset":25917,"count":1}],"isBlockCoverage":false},{"functionName":"Readable.unpipe","ranges":[{"startOffset":26938,"endOffset":27639,"count":1}],"isBlockCoverage":false},{"functionName":"Readable.removeListener","ranges":[{"startOffset":28767,"endOffset":29332,"count":1}],"isBlockCoverage":false},{"functionName":"Readable.pause","ranges":[{"startOffset":31546,"endOffset":31813,"count":1}],"isBlockCoverage":false},{"functionName":"flow","ranges":[{"startOffset":31816,"endOffset":31963,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":35439,"endOffset":35828,"count":1}],"isBlockCoverage":false},{"functionName":"endReadable","ranges":[{"startOffset":39079,"endOffset":39300,"count":1}],"isBlockCoverage":false},{"functionName":"endReadableNT","ranges":[{"startOffset":39302,"endOffset":40227,"count":1}],"isBlockCoverage":false}]},{"scriptId":"63","url":"node:internal/streams/writable","functions":[{"functionName":"nop","ranges":[{"startOffset":2397,"endOffset":2414,"count":1}],"isBlockCoverage":false},{"functionName":"_write","ranges":[{"startOffset":9368,"endOffset":10712,"count":1}],"isBlockCoverage":false},{"functionName":"Writable.write","ranges":[{"startOffset":10741,"endOffset":10827,"count":1}],"isBlockCoverage":false},{"functionName":"writeOrBuffer","ranges":[{"startOffset":11646,"endOffset":12659,"count":1}],"isBlockCoverage":false},{"functionName":"onwrite","ranges":[{"startOffset":13428,"endOffset":15067,"count":1}],"isBlockCoverage":false},{"functionName":"afterWriteTick","ranges":[{"startOffset":15069,"endOffset":15208,"count":1}],"isBlockCoverage":false},{"functionName":"afterWrite","ranges":[{"startOffset":15210,"endOffset":15585,"count":1}],"isBlockCoverage":false},{"functionName":"Writable.end","ranges":[{"startOffset":18003,"endOffset":19339,"count":1}],"isBlockCoverage":false},{"functionName":"needFinish","ranges":[{"startOffset":19342,"endOffset":19652,"count":1}],"isBlockCoverage":false},{"functionName":"callFinal","ranges":[{"startOffset":19654,"endOffset":21017,"count":1}],"isBlockCoverage":false},{"functionName":"onFinish","ranges":[{"startOffset":19715,"endOffset":20453,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":20695,"endOffset":20808,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":20820,"endOffset":20935,"count":0}],"isBlockCoverage":false},{"functionName":"prefinish","ranges":[{"startOffset":21019,"endOffset":21324,"count":1}],"isBlockCoverage":false},{"functionName":"finishMaybe","ranges":[{"startOffset":21326,"endOffset":21638,"count":1}],"isBlockCoverage":false},{"functionName":"finish","ranges":[{"startOffset":21640,"endOffset":22366,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":22733,"endOffset":23125,"count":1}],"isBlockCoverage":false}]},{"scriptId":"66","url":"node:internal/streams/transform","functions":[{"functionName":"final","ranges":[{"startOffset":4739,"endOffset":5967,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4875,"endOffset":5169,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5364,"endOffset":5595,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5609,"endOffset":5798,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5858,"endOffset":5881,"count":0}],"isBlockCoverage":false},{"functionName":"prefinish","ranges":[{"startOffset":5969,"endOffset":6050,"count":1}],"isBlockCoverage":false}]},{"scriptId":"80","url":"node:fs","functions":[{"functionName":"isFileType","ranges":[{"startOffset":5266,"endOffset":5526,"count":1}],"isBlockCoverage":false},{"functionName":"tryStatSync","ranges":[{"startOffset":10302,"endOffset":10532,"count":1}],"isBlockCoverage":false},{"functionName":"tryCreateBuffer","ranges":[{"startOffset":10534,"endOffset":10845,"count":1}],"isBlockCoverage":false},{"functionName":"tryReadSync","ranges":[{"startOffset":10847,"endOffset":11102,"count":1}],"isBlockCoverage":false},{"functionName":"readFileSync","ranges":[{"startOffset":11326,"endOffset":12724,"count":1}],"isBlockCoverage":false},{"functionName":"closeSync","ranges":[{"startOffset":13269,"endOffset":13409,"count":1}],"isBlockCoverage":false},{"functionName":"openSync","ranges":[{"startOffset":14401,"endOffset":14797,"count":1}],"isBlockCoverage":false},{"functionName":"writeSync","ranges":[{"startOffset":21642,"endOffset":22546,"count":1}],"isBlockCoverage":false},{"functionName":"writeFileSync","ranges":[{"startOffset":56721,"endOffset":57431,"count":1}],"isBlockCoverage":false},{"functionName":"splitRoot","ranges":[{"startOffset":62836,"endOffset":63046,"count":1}],"isBlockCoverage":false},{"functionName":"encodeRealpathResult","ranges":[{"startOffset":63051,"endOffset":63338,"count":1}],"isBlockCoverage":false},{"functionName":"nextPart","ranges":[{"startOffset":63744,"endOffset":63819,"count":1}],"isBlockCoverage":false},{"functionName":"realpathSync","ranges":[{"startOffset":64031,"endOffset":67963,"count":1}],"isBlockCoverage":false}]},{"scriptId":"81","url":"node:internal/fs/utils","functions":[{"functionName":"assertEncoding","ranges":[{"startOffset":3504,"endOffset":3704,"count":1}],"isBlockCoverage":false},{"functionName":"getOptions","ranges":[{"startOffset":7199,"endOffset":7841,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8569,"endOffset":9158,"count":1}],"isBlockCoverage":false},{"functionName":"stringToFlags","ranges":[{"startOffset":15047,"endOffset":16303,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":17717,"endOffset":18121,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":18163,"endOffset":18433,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":18656,"endOffset":18777,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":23570,"endOffset":23942,"count":1}],"isBlockCoverage":false}]},{"scriptId":"87","url":"node:internal/stream_base_commons","functions":[{"functionName":"handleWriteReq","ranges":[{"startOffset":1151,"endOffset":2006,"count":1}],"isBlockCoverage":false},{"functionName":"createWriteWrap","ranges":[{"startOffset":2695,"endOffset":2933,"count":1}],"isBlockCoverage":false},{"functionName":"writeGeneric","ranges":[{"startOffset":3576,"endOffset":3781,"count":1}],"isBlockCoverage":false},{"functionName":"afterWriteDispatched","ranges":[{"startOffset":3783,"endOffset":4086,"count":1}],"isBlockCoverage":false},{"functionName":"onStreamRead","ranges":[{"startOffset":4088,"endOffset":6019,"count":1}],"isBlockCoverage":false}]},{"scriptId":"88","url":"node:vm","functions":[{"functionName":"compileFunction","ranges":[{"startOffset":9538,"endOffset":11817,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9752,"endOffset":9803,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":10761,"endOffset":10893,"count":0}],"isBlockCoverage":false},{"functionName":"importModuleDynamically","ranges":[{"startOffset":11742,"endOffset":11775,"count":0}],"isBlockCoverage":false}]},{"scriptId":"91","url":"node:internal/bootstrap/switches/is_main_thread","functions":[{"functionName":"getStdout","ranges":[{"startOffset":3321,"endOffset":3652,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3600,"endOffset":3627,"count":0}],"isBlockCoverage":false},{"functionName":"getStderr","ranges":[{"startOffset":3654,"endOffset":3985,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3933,"endOffset":3960,"count":0}],"isBlockCoverage":false}]},{"scriptId":"92","url":"node:internal/process/signal","functions":[{"functionName":"isSignal","ranges":[{"startOffset":238,"endOffset":334,"count":1}],"isBlockCoverage":false},{"functionName":"startListeningIfSignal","ranges":[{"startOffset":398,"endOffset":904,"count":1}],"isBlockCoverage":false}]},{"scriptId":"95","url":"node:internal/bootstrap/pre_execution","functions":[{"functionName":"get","ranges":[{"startOffset":9809,"endOffset":9845,"count":1}],"isBlockCoverage":false}]},{"scriptId":"96","url":"node:internal/options","functions":[{"functionName":"getCLIOptionsFromBinding","ranges":[{"startOffset":464,"endOffset":598,"count":1}],"isBlockCoverage":false},{"functionName":"getOptionValue","ranges":[{"startOffset":879,"endOffset":1145,"count":1}],"isBlockCoverage":false}]},{"scriptId":"98","url":"node:internal/source_map/source_map_cache","functions":[{"functionName":"getSourceMapsEnabled","ranges":[{"startOffset":1389,"endOffset":1563,"count":1}],"isBlockCoverage":false},{"functionName":"maybeCacheSourceMap","ranges":[{"startOffset":2211,"endOffset":3273,"count":1}],"isBlockCoverage":false}]},{"scriptId":"100","url":"node:internal/modules/cjs/helpers","functions":[{"functionName":"loadNativeModule","ranges":[{"startOffset":1126,"endOffset":1431,"count":1}],"isBlockCoverage":false},{"functionName":"makeRequireFunction","ranges":[{"startOffset":1680,"endOffset":3678,"count":1}],"isBlockCoverage":false},{"functionName":"require","ranges":[{"startOffset":1932,"endOffset":3065,"count":0}],"isBlockCoverage":false},{"functionName":"require","ranges":[{"startOffset":3092,"endOffset":3154,"count":1}],"isBlockCoverage":false},{"functionName":"resolve","ranges":[{"startOffset":3163,"endOffset":3309,"count":0}],"isBlockCoverage":false},{"functionName":"paths","ranges":[{"startOffset":3343,"endOffset":3465,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeReferrerURL","ranges":[{"startOffset":5824,"endOffset":6012,"count":1}],"isBlockCoverage":false}]},{"scriptId":"102","url":"node:internal/modules/cjs/loader","functions":[{"functionName":"stat","ranges":[{"startOffset":4614,"endOffset":5024,"count":1}],"isBlockCoverage":false},{"functionName":"updateChildren","ranges":[{"startOffset":5026,"endOffset":5222,"count":1}],"isBlockCoverage":false},{"functionName":"Module","ranges":[{"startOffset":5269,"endOffset":5521,"count":1}],"isBlockCoverage":false},{"functionName":"readPackage","ranges":[{"startOffset":8082,"endOffset":8892,"count":1}],"isBlockCoverage":false},{"functionName":"readPackageScope","ranges":[{"startOffset":8894,"endOffset":9437,"count":1}],"isBlockCoverage":false},{"functionName":"tryPackage","ranges":[{"startOffset":9439,"endOffset":10716,"count":1}],"isBlockCoverage":false},{"functionName":"tryFile","ranges":[{"startOffset":11061,"endOffset":11271,"count":1}],"isBlockCoverage":false},{"functionName":"toRealPath","ranges":[{"startOffset":11273,"endOffset":11404,"count":1}],"isBlockCoverage":false},{"functionName":"tryExtensions","ranges":[{"startOffset":11479,"endOffset":11685,"count":1}],"isBlockCoverage":false},{"functionName":"findLongestRegisteredExtension","ranges":[{"startOffset":11774,"endOffset":12242,"count":1}],"isBlockCoverage":false},{"functionName":"trySelfParentPath","ranges":[{"startOffset":12244,"endOffset":12533,"count":1}],"isBlockCoverage":false},{"functionName":"trySelf","ranges":[{"startOffset":12535,"endOffset":13384,"count":1}],"isBlockCoverage":false},{"functionName":"resolveExports","ranges":[{"startOffset":13545,"endOffset":14253,"count":1}],"isBlockCoverage":false},{"functionName":"Module._findPath","ranges":[{"startOffset":14319,"endOffset":16931,"count":1}],"isBlockCoverage":false},{"functionName":"Module._resolveLookupPaths","ranges":[{"startOffset":19956,"endOffset":21141,"count":1}],"isBlockCoverage":false},{"functionName":"Module._load","ranges":[{"startOffset":23200,"endOffset":26126,"count":1}],"isBlockCoverage":false},{"functionName":"Module._resolveFilename","ranges":[{"startOffset":26155,"endOffset":29160,"count":1}],"isBlockCoverage":false},{"functionName":"finalizeEsmResolution","ranges":[{"startOffset":29163,"endOffset":29876,"count":1}],"isBlockCoverage":false},{"functionName":"Module.load","ranges":[{"startOffset":30257,"endOffset":31078,"count":1}],"isBlockCoverage":false},{"functionName":"Module.require","ranges":[{"startOffset":31196,"endOffset":31495,"count":1}],"isBlockCoverage":false},{"functionName":"wrapSafe","ranges":[{"startOffset":31675,"endOffset":32688,"count":1}],"isBlockCoverage":false},{"functionName":"importModuleDynamically","ranges":[{"startOffset":31929,"endOffset":32143,"count":0}],"isBlockCoverage":false},{"functionName":"importModuleDynamically","ranges":[{"startOffset":32326,"endOffset":32554,"count":0}],"isBlockCoverage":false},{"functionName":"Module._compile","ranges":[{"startOffset":32888,"endOffset":34737,"count":1}],"isBlockCoverage":false},{"functionName":"Module._extensions..js","ranges":[{"startOffset":34796,"endOffset":36504,"count":1}],"isBlockCoverage":false}]},{"scriptId":"103","url":"node:internal/modules/package_json_reader","functions":[{"functionName":"read","ranges":[{"startOffset":279,"endOffset":954,"count":1}],"isBlockCoverage":false}]},{"scriptId":"109","url":"node:internal/modules/esm/resolve","functions":[{"functionName":"resolvePackageTargetString","ranges":[{"startOffset":15535,"endOffset":17243,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":16191,"endOffset":16204,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":17171,"endOffset":17184,"count":0}],"isBlockCoverage":false},{"functionName":"isArrayIndex","ranges":[{"startOffset":17298,"endOffset":17438,"count":1}],"isBlockCoverage":false},{"functionName":"resolvePackageTarget","ranges":[{"startOffset":17440,"endOffset":19612,"count":1}],"isBlockCoverage":false},{"functionName":"isConditionalExportsMainSugar","ranges":[{"startOffset":19748,"endOffset":20683,"count":1}],"isBlockCoverage":false},{"functionName":"packageExportsResolve","ranges":[{"startOffset":20893,"endOffset":23561,"count":1}],"isBlockCoverage":false}]},{"scriptId":"118","url":"node:internal/vm/module","functions":[{"functionName":"importModuleDynamicallyWrap","ranges":[{"startOffset":11669,"endOffset":12148,"count":1}],"isBlockCoverage":false},{"functionName":"importModuleDynamicallyWrapper","ranges":[{"startOffset":11774,"endOffset":12104,"count":0}],"isBlockCoverage":false}]},{"scriptId":"136","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-cli/build/cli/index.js","functions":[{"functionName":"run","ranges":[{"startOffset":2895,"endOffset":3604,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5257,"endOffset":5355,"count":1}],"isBlockCoverage":false}]},{"scriptId":"148","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-util/build/index.js","functions":[{"functionName":"get","ranges":[{"startOffset":289,"endOffset":337,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":716,"endOffset":769,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":848,"endOffset":897,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1413,"endOffset":1465,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1989,"endOffset":2049,"count":1}],"isBlockCoverage":false}]},{"scriptId":"149","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-util/build/clearLine.js","functions":[{"functionName":"clearLine","ranges":[{"startOffset":320,"endOffset":413,"count":1}],"isBlockCoverage":false}]},{"scriptId":"154","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-util/build/deepCyclicCopy.js","functions":[{"functionName":"deepCyclicCopy","ranges":[{"startOffset":351,"endOffset":781,"count":1}],"isBlockCoverage":false}]},{"scriptId":"155","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-util/build/interopRequireDefault.js","functions":[{"functionName":"interopRequireDefault","ranges":[{"startOffset":550,"endOffset":668,"count":1}],"isBlockCoverage":false}]},{"scriptId":"158","url":"node:net","functions":[{"functionName":"_unrefTimer","ranges":[{"startOffset":11273,"endOffset":11403,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":15342,"endOffset":15387,"count":1}],"isBlockCoverage":false},{"functionName":"Socket.pause","ranges":[{"startOffset":16204,"endOffset":16538,"count":1}],"isBlockCoverage":false},{"functionName":"Socket.read","ranges":[{"startOffset":16780,"endOffset":16966,"count":1}],"isBlockCoverage":false},{"functionName":"onReadableStreamEnd","ranges":[{"startOffset":17013,"endOffset":17112,"count":1}],"isBlockCoverage":false},{"functionName":"Socket._destroy","ranges":[{"startOffset":17325,"endOffset":18279,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":17841,"endOffset":17920,"count":1}],"isBlockCoverage":false},{"functionName":"Socket._writeGeneric","ranges":[{"startOffset":19798,"endOffset":20559,"count":1}],"isBlockCoverage":false},{"functionName":"connect","ranges":[{"startOffset":20115,"endOffset":20195,"count":0}],"isBlockCoverage":false},{"functionName":"Socket._write","ranges":[{"startOffset":20688,"endOffset":20769,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":45455,"endOffset":45486,"count":1}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":45490,"endOffset":45526,"count":1}],"isBlockCoverage":false}]},{"scriptId":"172","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-util/build/formatTime.js","functions":[{"functionName":"formatTime","ranges":[{"startOffset":321,"endOffset":652,"count":1}],"isBlockCoverage":false}]},{"scriptId":"174","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-util/build/requireOrImportModule.js","functions":[{"functionName":"_path","ranges":[{"startOffset":184,"endOffset":218,"count":1}],"isBlockCoverage":false},{"functionName":"requireOrImportModule","ranges":[{"startOffset":756,"endOffset":2148,"count":1}],"isBlockCoverage":false}]},{"scriptId":"176","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/graceful-fs/graceful-fs.js","functions":[{"functionName":"get","ranges":[{"startOffset":746,"endOffset":783,"count":1}],"isBlockCoverage":false},{"functionName":"closeSync","ranges":[{"startOffset":1960,"endOffset":2107,"count":1}],"isBlockCoverage":false},{"functionName":"resetQueue","ranges":[{"startOffset":10396,"endOffset":10864,"count":1}],"isBlockCoverage":false},{"functionName":"retry","ranges":[{"startOffset":10866,"endOffset":12679,"count":1}],"isBlockCoverage":false}]},{"scriptId":"184","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/chalk/source/index.js","functions":[{"functionName":"get","ranges":[{"startOffset":2848,"endOffset":2892,"count":1}],"isBlockCoverage":false},{"functionName":"builder","ranges":[{"startOffset":3323,"endOffset":3790,"count":1}],"isBlockCoverage":false},{"functionName":"applyStyle","ranges":[{"startOffset":4095,"endOffset":5135,"count":1}],"isBlockCoverage":false}]},{"scriptId":"186","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/supports-color/index.js","functions":[{"functionName":"translateLevel","ranges":[{"startOffset":648,"endOffset":806,"count":1}],"isBlockCoverage":false},{"functionName":"supportsColor","ranges":[{"startOffset":808,"endOffset":2439,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1706,"endOffset":1725,"count":0}],"isBlockCoverage":false},{"functionName":"getSupportLevel","ranges":[{"startOffset":2441,"endOffset":2570,"count":1}],"isBlockCoverage":false}]},{"scriptId":"187","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/has-flag/index.js","functions":[{"functionName":"module.exports","ranges":[{"startOffset":32,"endOffset":328,"count":1}],"isBlockCoverage":false}]},{"scriptId":"224","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/core/build/TestScheduler.js","functions":[{"functionName":"_testResult","ranges":[{"startOffset":642,"endOffset":676,"count":1}],"isBlockCoverage":false},{"functionName":"_jestSnapshot","ranges":[{"startOffset":987,"endOffset":1151,"count":1}],"isBlockCoverage":false},{"functionName":"_jestSnapshot","ranges":[{"startOffset":1098,"endOffset":1132,"count":1}],"isBlockCoverage":false},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":1433,"endOffset":1528,"count":1}],"isBlockCoverage":false},{"functionName":"scheduleTests","ranges":[{"startOffset":2576,"endOffset":10191,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2786,"endOffset":2908,"count":0}],"isBlockCoverage":false},{"functionName":"onResult","ranges":[{"startOffset":3241,"endOffset":4536,"count":0}],"isBlockCoverage":false},{"functionName":"onFailure","ranges":[{"startOffset":4561,"endOffset":5139,"count":0}],"isBlockCoverage":false},{"functionName":"updateSnapshotState","ranges":[{"startOffset":5174,"endOffset":6314,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6581,"endOffset":7577,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8353,"endOffset":8402,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8469,"endOffset":8535,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8602,"endOffset":8659,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8758,"endOffset":9003,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9273,"endOffset":9285,"count":1}],"isBlockCoverage":false}]},{"scriptId":"225","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/core/build/ReporterDispatcher.js","functions":[{"functionName":"getErrors","ranges":[{"startOffset":2301,"endOffset":2504,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2349,"endOffset":2494,"count":1}],"isBlockCoverage":false},{"functionName":"hasErrors","ranges":[{"startOffset":2508,"endOffset":2567,"count":1}],"isBlockCoverage":false}]},{"scriptId":"227","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/core/build/TestWatcher.js","functions":[{"functionName":"isInterrupted","ranges":[{"startOffset":1009,"endOffset":1065,"count":1}],"isBlockCoverage":false}]},{"scriptId":"228","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/emittery/index.js","functions":[{"functionName":"assertEventName","ranges":[{"startOffset":300,"endOffset":478,"count":1}],"isBlockCoverage":false},{"functionName":"assertListener","ranges":[{"startOffset":480,"endOffset":613,"count":1}],"isBlockCoverage":false},{"functionName":"getListeners","ranges":[{"startOffset":615,"endOffset":804,"count":1}],"isBlockCoverage":false},{"functionName":"enqueueProducers","ranges":[{"startOffset":1102,"endOffset":1512,"count":1}],"isBlockCoverage":false},{"functionName":"isListenerSymbol","ranges":[{"startOffset":3141,"endOffset":3205,"count":1}],"isBlockCoverage":false},{"functionName":"emit","ranges":[{"startOffset":5557,"endOffset":6215,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5963,"endOffset":6061,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6093,"endOffset":6205,"count":0}],"isBlockCoverage":false}]},{"scriptId":"229","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/core/build/cli/index.js","functions":[{"functionName":"runCLI","ranges":[{"startOffset":2470,"endOffset":4867,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3139,"endOffset":3276,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3905,"endOffset":3936,"count":1}],"isBlockCoverage":false},{"functionName":"openHandles.openHandles","ranges":[{"startOffset":4162,"endOffset":4170,"count":0}],"isBlockCoverage":false},{"functionName":"_run10000","ranges":[{"startOffset":5818,"endOffset":7638,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6663,"endOffset":6816,"count":0}],"isBlockCoverage":false},{"functionName":"filter","ranges":[{"startOffset":6841,"endOffset":7111,"count":0}],"isBlockCoverage":false}]},{"scriptId":"241","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/core/build/runJest.js","functions":[{"functionName":"runJest","ranges":[{"startOffset":5514,"endOffset":10171,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6228,"endOffset":6256,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6544,"endOffset":6589,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6653,"endOffset":7052,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7192,"endOffset":7209,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9114,"endOffset":9323,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9350,"endOffset":9387,"count":0}],"isBlockCoverage":false}]},{"scriptId":"248","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/core/build/runGlobalHook.js","functions":[{"functionName":"runGlobalHook","ranges":[{"startOffset":2112,"endOffset":3697,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2235,"endOffset":2274,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2563,"endOffset":2611,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2972,"endOffset":3251,"count":0}],"isBlockCoverage":false}]},{"scriptId":"292","url":"node:crypto","functions":[{"functionName":"createHash","ranges":[{"startOffset":3343,"endOffset":3425,"count":1}],"isBlockCoverage":false}]},{"scriptId":"295","url":"node:internal/crypto/util","functions":[{"functionName":"getDefaultEncoding","ranges":[{"startOffset":1443,"endOffset":1502,"count":1}],"isBlockCoverage":false}]},{"scriptId":"303","url":"node:internal/streams/lazy_transform","functions":[{"functionName":"LazyTransform","ranges":[{"startOffset":468,"endOffset":530,"count":1}],"isBlockCoverage":false}]},{"scriptId":"305","url":"node:internal/crypto/hash","functions":[{"functionName":"Hash","ranges":[{"startOffset":962,"endOffset":1481,"count":1}],"isBlockCoverage":false},{"functionName":"update","ranges":[{"startOffset":2050,"endOffset":2562,"count":1}],"isBlockCoverage":false},{"functionName":"digest","ranges":[{"startOffset":2590,"endOffset":2935,"count":1}],"isBlockCoverage":false}]},{"scriptId":"336","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/ts-jest/dist/utils/index.js","functions":[{"functionName":"get","ranges":[{"startOffset":327,"endOffset":354,"count":1}],"isBlockCoverage":false}]},{"scriptId":"338","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/fast-json-stable-stringify/index.js","functions":[{"functionName":"module.exports","ranges":[{"startOffset":32,"endOffset":1843,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":243,"endOffset":507,"count":0}],"isBlockCoverage":false},{"functionName":"stringify","ranges":[{"startOffset":552,"endOffset":1833,"count":1}],"isBlockCoverage":false}]},{"scriptId":"342","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/bs-logger/dist/logger/index.js","functions":[{"functionName":"createEmptyFunction","ranges":[{"startOffset":1567,"endOffset":1682,"count":1}],"isBlockCoverage":false},{"functionName":"emptyFunction","ranges":[{"startOffset":1614,"endOffset":1642,"count":0}],"isBlockCoverage":false},{"functionName":"createLogger","ranges":[{"startOffset":2133,"endOffset":6278,"count":1}],"isBlockCoverage":false},{"functionName":"log","ranges":[{"startOffset":2543,"endOffset":3675,"count":0}],"isBlockCoverage":false},{"functionName":"log.child","ranges":[{"startOffset":3693,"endOffset":4345,"count":1}],"isBlockCoverage":false},{"functionName":"translate","ranges":[{"startOffset":4014,"endOffset":4076,"count":0}],"isBlockCoverage":false},{"functionName":"log.wrap","ranges":[{"startOffset":4362,"endOffset":5398,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5434,"endOffset":6258,"count":1}],"isBlockCoverage":false},{"functionName":"log.<computed>","ranges":[{"startOffset":5619,"endOffset":6251,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5842,"endOffset":5885,"count":1}],"isBlockCoverage":false}]},{"scriptId":"354","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-runtime/build/index.js","functions":[{"functionName":"_url","ranges":[{"startOffset":405,"endOffset":517,"count":1}],"isBlockCoverage":false},{"functionName":"_url","ranges":[{"startOffset":464,"endOffset":498,"count":1}],"isBlockCoverage":false},{"functionName":"_transform","ranges":[{"startOffset":1605,"endOffset":1639,"count":1}],"isBlockCoverage":false},{"functionName":"_jestUtil","ranges":[{"startOffset":2454,"endOffset":2582,"count":1}],"isBlockCoverage":false},{"functionName":"_jestUtil","ranges":[{"startOffset":2529,"endOffset":2563,"count":0}],"isBlockCoverage":false},{"functionName":"resetModules","ranges":[{"startOffset":34923,"endOffset":36182,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":35744,"endOffset":36056,"count":1}],"isBlockCoverage":false},{"functionName":"stopCollectingV8Coverage","ranges":[{"startOffset":36374,"endOffset":36621,"count":1}],"isBlockCoverage":false},{"functionName":"getAllCoverageInfoCopy","ranges":[{"startOffset":36625,"endOffset":36750,"count":1}],"isBlockCoverage":false},{"functionName":"getAllV8CoverageInfoCopy","ranges":[{"startOffset":36754,"endOffset":37652,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":36944,"endOffset":36980,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":36993,"endOffset":37051,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":37076,"endOffset":37443,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":37463,"endOffset":37646,"count":0}],"isBlockCoverage":false},{"functionName":"restoreAllMocks","ranges":[{"startOffset":38791,"endOffset":38856,"count":1}],"isBlockCoverage":false},{"functionName":"resetAllMocks","ranges":[{"startOffset":38860,"endOffset":38921,"count":1}],"isBlockCoverage":false}]},{"scriptId":"358","url":"node:internal/child_process","functions":[{"functionName":"ChildProcess._handle.onexit","ranges":[{"startOffset":6874,"endOffset":7908,"count":1}],"isBlockCoverage":false},{"functionName":"flushStdio","ranges":[{"startOffset":8034,"endOffset":8512,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":12002,"endOffset":12047,"count":1}],"isBlockCoverage":false},{"functionName":"ChildProcess.kill","ranges":[{"startOffset":12822,"endOffset":13487,"count":1}],"isBlockCoverage":false},{"functionName":"channel.onread","ranges":[{"startOffset":15677,"endOffset":16856,"count":1}],"isBlockCoverage":false},{"functionName":"target.disconnect","ranges":[{"startOffset":25287,"endOffset":25711,"count":1}],"isBlockCoverage":false},{"functionName":"target._disconnect","ranges":[{"startOffset":25737,"endOffset":26354,"count":1}],"isBlockCoverage":false},{"functionName":"finish","ranges":[{"startOffset":25996,"endOffset":26123,"count":1}],"isBlockCoverage":false},{"functionName":"maybeClose","ranges":[{"startOffset":30529,"endOffset":30730,"count":1}],"isBlockCoverage":false}]},{"scriptId":"391","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/merge-stream/index.js","functions":[{"functionName":"remove","ranges":[{"startOffset":722,"endOffset":882,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":778,"endOffset":816,"count":1}],"isBlockCoverage":false}]},{"scriptId":"394","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/transform/build/index.js","functions":[{"functionName":"get","ranges":[{"startOffset":332,"endOffset":405,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":653,"endOffset":708,"count":1}],"isBlockCoverage":false}]},{"scriptId":"395","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/transform/build/ScriptTransformer.js","functions":[{"functionName":"_fastJsonStableStringify","ranges":[{"startOffset":1077,"endOffset":1111,"count":1}],"isBlockCoverage":false},{"functionName":"_jestUtil","ranges":[{"startOffset":1939,"endOffset":1973,"count":1}],"isBlockCoverage":false},{"functionName":"_defineProperty","ranges":[{"startOffset":3600,"endOffset":3853,"count":1}],"isBlockCoverage":false},{"functionName":"ScriptTransformer","ranges":[{"startOffset":4471,"endOffset":5201,"count":1}],"isBlockCoverage":false},{"functionName":"loadTransformers","ranges":[{"startOffset":8901,"endOffset":10059,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8993,"endOffset":10002,"count":1}],"isBlockCoverage":false},{"functionName":"createTranspilingRequire","ranges":[{"startOffset":24049,"endOffset":24716,"count":1}],"isBlockCoverage":false},{"functionName":"requireAndTranspileModule","ranges":[{"startOffset":24169,"endOffset":24713,"count":0}],"isBlockCoverage":false},{"functionName":"createScriptTransformer","ranges":[{"startOffset":29050,"endOffset":29245,"count":1}],"isBlockCoverage":false}]},{"scriptId":"398","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/transform/build/shouldInstrument.js","functions":[{"functionName":"shouldInstrument","ranges":[{"startOffset":2681,"endOffset":4600,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2982,"endOffset":3031,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3074,"endOffset":3115,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3926,"endOffset":3962,"count":0}],"isBlockCoverage":false}]},{"scriptId":"402","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/console/build/CustomConsole.js","functions":[{"functionName":"getBuffer","ranges":[{"startOffset":4653,"endOffset":4692,"count":1}],"isBlockCoverage":false}]},{"scriptId":"405","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-haste-map/build/index.js","functions":[{"functionName":"_crypto","ranges":[{"startOffset":478,"endOffset":512,"count":1}],"isBlockCoverage":false},{"functionName":"path","ranges":[{"startOffset":852,"endOffset":886,"count":1}],"isBlockCoverage":false},{"functionName":"getStatic","ranges":[{"startOffset":8366,"endOffset":8515,"count":1}],"isBlockCoverage":false},{"functionName":"getCacheFilePath","ranges":[{"startOffset":12439,"endOffset":12662,"count":1}],"isBlockCoverage":false}]},{"scriptId":"406","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-haste-map/build/HasteFS.js","functions":[{"functionName":"getFileIterator","ranges":[{"startOffset":3114,"endOffset":3168,"count":1}],"isBlockCoverage":false},{"functionName":"getAbsoluteFileIterator","ranges":[{"startOffset":3172,"endOffset":3310,"count":1}],"isBlockCoverage":false},{"functionName":"matchFiles","ranges":[{"startOffset":3314,"endOffset":3594,"count":1}],"isBlockCoverage":false}]},{"scriptId":"408","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-haste-map/build/lib/fast_path.js","functions":[{"functionName":"path","ranges":[{"startOffset":222,"endOffset":256,"count":1}],"isBlockCoverage":false},{"functionName":"resolve","ranges":[{"startOffset":2160,"endOffset":2364,"count":1}],"isBlockCoverage":false}]},{"scriptId":"463","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-snapshot/build/SnapshotResolver.js","functions":[{"functionName":"createSnapshotResolver","ranges":[{"startOffset":2710,"endOffset":2953,"count":1}],"isBlockCoverage":false},{"functionName":"createDefaultSnapshotResolver","ranges":[{"startOffset":2955,"endOffset":3479,"count":1}],"isBlockCoverage":false},{"functionName":"resolveSnapshotPath","ranges":[{"startOffset":3034,"endOffset":3178,"count":0}],"isBlockCoverage":false},{"functionName":"resolveTestPath","ranges":[{"startOffset":3201,"endOffset":3345,"count":0}],"isBlockCoverage":false}]},{"scriptId":"482","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/slash/index.js","functions":[{"functionName":"module.exports","ranges":[{"startOffset":31,"endOffset":287,"count":1}],"isBlockCoverage":false}]},{"scriptId":"758","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-worker/build/base/BaseWorkerPool.js","functions":[{"functionName":"end","ranges":[{"startOffset":3760,"endOffset":4851,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3971,"endOffset":4601,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4341,"endOffset":4412,"count":1}],"isBlockCoverage":false},{"functionName":"workerExits.reduce.forceExited","ranges":[{"startOffset":4705,"endOffset":4796,"count":1}],"isBlockCoverage":false}]},{"scriptId":"764","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-worker/build/workers/ChildProcessWorker.js","functions":[{"functionName":"_shutdown","ranges":[{"startOffset":5185,"endOffset":5394,"count":1}],"isBlockCoverage":false},{"functionName":"_onExit","ranges":[{"startOffset":6655,"endOffset":6968,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7477,"endOffset":7485,"count":1}],"isBlockCoverage":false},{"functionName":"forceExit","ranges":[{"startOffset":7548,"endOffset":7771,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7641,"endOffset":7674,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7731,"endOffset":7765,"count":1}],"isBlockCoverage":false}]},{"scriptId":"767","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/test-sequencer/build/index.js","functions":[{"functionName":"fs","ranges":[{"startOffset":195,"endOffset":229,"count":1}],"isBlockCoverage":false},{"functionName":"_jestHasteMap","ranges":[{"startOffset":362,"endOffset":396,"count":1}],"isBlockCoverage":false},{"functionName":"_getCachePath","ranges":[{"startOffset":2732,"endOffset":2974,"count":1}],"isBlockCoverage":false},{"functionName":"_getCache","ranges":[{"startOffset":2978,"endOffset":3497,"count":1}],"isBlockCoverage":false},{"functionName":"cacheResults","ranges":[{"startOffset":5791,"endOffset":6435,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5877,"endOffset":5908,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5943,"endOffset":6300,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6328,"endOffset":6424,"count":1}],"isBlockCoverage":false}]},{"scriptId":"769","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/reporters/build/getResultHeader.js","functions":[{"functionName":"_terminalLink","ranges":[{"startOffset":260,"endOffset":424,"count":1}],"isBlockCoverage":false},{"functionName":"_terminalLink","ranges":[{"startOffset":371,"endOffset":405,"count":0}],"isBlockCoverage":false},{"functionName":"_jestUtil","ranges":[{"startOffset":426,"endOffset":554,"count":1}],"isBlockCoverage":false},{"functionName":"_jestUtil","ranges":[{"startOffset":501,"endOffset":535,"count":0}],"isBlockCoverage":false},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":590,"endOffset":685,"count":1}],"isBlockCoverage":false},{"functionName":"fallback","ranges":[{"startOffset":1732,"endOffset":1755,"count":1}],"isBlockCoverage":false}]},{"scriptId":"770","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/reporters/build/utils.js","functions":[{"functionName":"path","ranges":[{"startOffset":337,"endOffset":371,"count":1}],"isBlockCoverage":false},{"functionName":"_chalk","ranges":[{"startOffset":481,"endOffset":515,"count":1}],"isBlockCoverage":false},{"functionName":"_slash","ranges":[{"startOffset":625,"endOffset":659,"count":1}],"isBlockCoverage":false},{"functionName":"_jestUtil","ranges":[{"startOffset":680,"endOffset":808,"count":1}],"isBlockCoverage":false},{"functionName":"_jestUtil","ranges":[{"startOffset":755,"endOffset":789,"count":0}],"isBlockCoverage":false},{"functionName":"formatTestPath","ranges":[{"startOffset":4129,"endOffset":4334,"count":1}],"isBlockCoverage":false},{"functionName":"relativePath","ranges":[{"startOffset":4400,"endOffset":4872,"count":1}],"isBlockCoverage":false},{"functionName":"getValuesCurrentTestCases","ranges":[{"startOffset":4947,"endOffset":5634,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5133,"endOffset":5515,"count":0}],"isBlockCoverage":false}]},{"scriptId":"771","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/reporters/build/BaseReporter.js","functions":[{"functionName":"log","ranges":[{"startOffset":649,"endOffset":709,"count":1}],"isBlockCoverage":false},{"functionName":"onTestResult","ranges":[{"startOffset":841,"endOffset":886,"count":1}],"isBlockCoverage":false},{"functionName":"getLastError","ranges":[{"startOffset":1143,"endOffset":1187,"count":1}],"isBlockCoverage":false}]},{"scriptId":"774","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/reporters/build/DefaultReporter.js","functions":[{"functionName":"_jestUtil","ranges":[{"startOffset":458,"endOffset":492,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2017,"endOffset":2087,"count":1}],"isBlockCoverage":false},{"functionName":"forceFlushBufferedOutput","ranges":[{"startOffset":3239,"endOffset":3368,"count":1}],"isBlockCoverage":false},{"functionName":"__clearStatus","ranges":[{"startOffset":3372,"endOffset":3565,"count":1}],"isBlockCoverage":false},{"functionName":"__printStatus","ranges":[{"startOffset":3569,"endOffset":3830,"count":1}],"isBlockCoverage":false},{"functionName":"onRunComplete","ranges":[{"startOffset":4134,"endOffset":4350,"count":1}],"isBlockCoverage":false},{"functionName":"testFinished","ranges":[{"startOffset":4816,"endOffset":4943,"count":1}],"isBlockCoverage":false},{"functionName":"printTestFileHeader","ranges":[{"startOffset":4947,"endOffset":5339,"count":1}],"isBlockCoverage":false},{"functionName":"printTestFileFailureMessage","ranges":[{"startOffset":5343,"endOffset":5698,"count":1}],"isBlockCoverage":false}]},{"scriptId":"775","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/reporters/build/Status.js","functions":[{"functionName":"delete","ranges":[{"startOffset":1455,"endOffset":1647,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1517,"endOffset":1574,"count":1}],"isBlockCoverage":false},{"functionName":"runFinished","ranges":[{"startOffset":2998,"endOffset":3114,"count":1}],"isBlockCoverage":false},{"functionName":"testFinished","ranges":[{"startOffset":3523,"endOffset":3941,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3772,"endOffset":3907,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3945,"endOffset":5338,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4205,"endOffset":4775,"count":0}],"isBlockCoverage":false},{"functionName":"_emit","ranges":[{"startOffset":5342,"endOffset":5421,"count":1}],"isBlockCoverage":false},{"functionName":"_debouncedEmit","ranges":[{"startOffset":5425,"endOffset":5743,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5651,"endOffset":5726,"count":1}],"isBlockCoverage":false}]},{"scriptId":"778","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/reporters/build/SummaryReporter.js","functions":[{"functionName":"_chalk","ranges":[{"startOffset":107,"endOffset":249,"count":1}],"isBlockCoverage":false},{"functionName":"_chalk","ranges":[{"startOffset":196,"endOffset":230,"count":1}],"isBlockCoverage":false},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":653,"endOffset":748,"count":1}],"isBlockCoverage":false}]},{"scriptId":"780","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/reporters/build/VerboseReporter.js","functions":[{"functionName":"_chalk","ranges":[{"startOffset":107,"endOffset":249,"count":1}],"isBlockCoverage":false},{"functionName":"_chalk","ranges":[{"startOffset":196,"endOffset":230,"count":1}],"isBlockCoverage":false},{"functionName":"_jestUtil","ranges":[{"startOffset":326,"endOffset":360,"count":1}],"isBlockCoverage":false},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":459,"endOffset":554,"count":1}],"isBlockCoverage":false},{"functionName":"stream.write","ranges":[{"startOffset":1277,"endOffset":1391,"count":1}],"isBlockCoverage":false},{"functionName":"groupTestsBySuites","ranges":[{"startOffset":1521,"endOffset":2235,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1656,"endOffset":2212,"count":0}],"isBlockCoverage":false},{"functionName":"_logTestResults","ranges":[{"startOffset":2789,"endOffset":2917,"count":1}],"isBlockCoverage":false},{"functionName":"_logSuite","ranges":[{"startOffset":2921,"endOffset":3159,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3106,"endOffset":3153,"count":1}],"isBlockCoverage":false},{"functionName":"tests.reduce.pending","ranges":[{"startOffset":4018,"endOffset":4315,"count":1}],"isBlockCoverage":false},{"functionName":"_logLine","ranges":[{"startOffset":5004,"endOffset":5132,"count":1}],"isBlockCoverage":false}]},{"scriptId":"781","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/test-result/build/index.js","functions":[{"functionName":"get","ranges":[{"startOffset":153,"endOffset":201,"count":1}],"isBlockCoverage":false}]},{"scriptId":"784","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/ts-jest/dist/index.js","functions":[{"functionName":"createTransformer","ranges":[{"startOffset":1264,"endOffset":1333,"count":1}],"isBlockCoverage":false}]},{"scriptId":"785","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/ts-jest/dist/ts-jest-transformer.js","functions":[{"functionName":"TsJestTransformer","ranges":[{"startOffset":4512,"endOffset":5079,"count":1}],"isBlockCoverage":false}]},{"scriptId":"800","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/ts-jest/dist/utils/version-checkers.js","functions":[{"functionName":"warn","ranges":[{"startOffset":2237,"endOffset":2388,"count":1}],"isBlockCoverage":false}]},{"scriptId":"854","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-runner/build/index.js","functions":[{"functionName":"runTests","ranges":[{"startOffset":1759,"endOffset":2091,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3552,"endOffset":3801,"count":1}],"isBlockCoverage":false}]},{"scriptId":"855","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-runner/build/runTest.js","functions":[{"functionName":"_sourceMapSupport","ranges":[{"startOffset":519,"endOffset":553,"count":1}],"isBlockCoverage":false},{"functionName":"freezeConsole","ranges":[{"startOffset":3158,"endOffset":3921,"count":1}],"isBlockCoverage":false},{"functionName":"fakeConsolePush","ranges":[{"startOffset":3312,"endOffset":3918,"count":0}],"isBlockCoverage":false},{"functionName":"runTestInternal","ranges":[{"startOffset":4490,"endOffset":11711,"count":1}],"isBlockCoverage":false},{"functionName":"consoleFormatter","ranges":[{"startOffset":5957,"endOffset":6174,"count":0}],"isBlockCoverage":false},{"functionName":"retrieveSourceMap","ranges":[{"startOffset":8151,"endOffset":8629,"count":0}],"isBlockCoverage":false},{"functionName":"exit","ranges":[{"startOffset":9080,"endOffset":9512,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":11451,"endOffset":11573,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":11483,"endOffset":11558,"count":1}],"isBlockCoverage":false},{"functionName":"runTest","ranges":[{"startOffset":11713,"endOffset":12303,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":12088,"endOffset":12123,"count":0}],"isBlockCoverage":false}]},{"scriptId":"856","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/throat/index.js","functions":[{"functionName":"onFulfill","ranges":[{"startOffset":628,"endOffset":694,"count":1}],"isBlockCoverage":false},{"functionName":"release","ranges":[{"startOffset":762,"endOffset":900,"count":1}],"isBlockCoverage":false}]},{"scriptId":"861","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-environment-jsdom/build/index.js","functions":[{"functionName":"JSDOMEnvironment.global.removeEventListener","ranges":[{"startOffset":3290,"endOffset":3447,"count":1}],"isBlockCoverage":false}]},{"scriptId":"885","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/webidl-conversions/lib/index.js","functions":[{"functionName":"exports.DOMString","ranges":[{"startOffset":7840,"endOffset":8180,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1039","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/utils.js","functions":[{"functionName":"isObject","ranges":[{"startOffset":69,"endOffset":182,"count":1}],"isBlockCoverage":false},{"functionName":"wrapperForImpl","ranges":[{"startOffset":797,"endOffset":874,"count":1}],"isBlockCoverage":false},{"functionName":"implForWrapper","ranges":[{"startOffset":876,"endOffset":959,"count":1}],"isBlockCoverage":false},{"functionName":"tryWrapperForImpl","ranges":[{"startOffset":961,"endOffset":1072,"count":1}],"isBlockCoverage":false},{"functionName":"tryImplForWrapper","ranges":[{"startOffset":1074,"endOffset":1185,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1041","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/browser/Window.js","functions":[{"functionName":"get","ranges":[{"startOffset":6354,"endOffset":6459,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6885,"endOffset":6983,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":7431,"endOffset":7531,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":8702,"endOffset":8725,"count":1}],"isBlockCoverage":false},{"functionName":"get length","ranges":[{"startOffset":12461,"endOffset":12510,"count":1}],"isBlockCoverage":false},{"functionName":"get window","ranges":[{"startOffset":12516,"endOffset":12570,"count":1}],"isBlockCoverage":false},{"functionName":"get frameElement","ranges":[{"startOffset":12576,"endOffset":12662,"count":1}],"isBlockCoverage":false},{"functionName":"get frames","ranges":[{"startOffset":12668,"endOffset":12722,"count":1}],"isBlockCoverage":false},{"functionName":"get self","ranges":[{"startOffset":12728,"endOffset":12780,"count":1}],"isBlockCoverage":false},{"functionName":"get parent","ranges":[{"startOffset":12786,"endOffset":12835,"count":1}],"isBlockCoverage":false},{"functionName":"get top","ranges":[{"startOffset":12841,"endOffset":12884,"count":1}],"isBlockCoverage":false},{"functionName":"get document","ranges":[{"startOffset":12890,"endOffset":12943,"count":1}],"isBlockCoverage":false},{"functionName":"get external","ranges":[{"startOffset":12949,"endOffset":12994,"count":1}],"isBlockCoverage":false},{"functionName":"get location","ranges":[{"startOffset":13000,"endOffset":13113,"count":1}],"isBlockCoverage":false},{"functionName":"get history","ranges":[{"startOffset":13119,"endOffset":13230,"count":1}],"isBlockCoverage":false},{"functionName":"get navigator","ranges":[{"startOffset":13236,"endOffset":13283,"count":1}],"isBlockCoverage":false},{"functionName":"get locationbar","ranges":[{"startOffset":13289,"endOffset":13340,"count":1}],"isBlockCoverage":false},{"functionName":"get menubar","ranges":[{"startOffset":13346,"endOffset":13389,"count":1}],"isBlockCoverage":false},{"functionName":"get personalbar","ranges":[{"startOffset":13395,"endOffset":13446,"count":1}],"isBlockCoverage":false},{"functionName":"get scrollbars","ranges":[{"startOffset":13452,"endOffset":13501,"count":1}],"isBlockCoverage":false},{"functionName":"get statusbar","ranges":[{"startOffset":13507,"endOffset":13554,"count":1}],"isBlockCoverage":false},{"functionName":"get toolbar","ranges":[{"startOffset":13560,"endOffset":13603,"count":1}],"isBlockCoverage":false},{"functionName":"get performance","ranges":[{"startOffset":13609,"endOffset":13660,"count":1}],"isBlockCoverage":false},{"functionName":"get screen","ranges":[{"startOffset":13666,"endOffset":13707,"count":1}],"isBlockCoverage":false},{"functionName":"get origin","ranges":[{"startOffset":13713,"endOffset":13762,"count":1}],"isBlockCoverage":false},{"functionName":"get localStorage","ranges":[{"startOffset":14010,"endOffset":14294,"count":1}],"isBlockCoverage":false},{"functionName":"get sessionStorage","ranges":[{"startOffset":14300,"endOffset":14590,"count":1}],"isBlockCoverage":false},{"functionName":"get customElements","ranges":[{"startOffset":14596,"endOffset":14660,"count":1}],"isBlockCoverage":false},{"functionName":"get event","ranges":[{"startOffset":14666,"endOffset":14780,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1042","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/cssstyle/lib/CSSStyleDeclaration.js","functions":[{"functionName":"CSSStyleDeclaration","ranges":[{"startOffset":705,"endOffset":902,"count":1}],"isBlockCoverage":false},{"functionName":"CSSStyleDeclaration._onChange","ranges":[{"startOffset":867,"endOffset":899,"count":0}],"isBlockCoverage":false}]},{"scriptId":"1080","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/interfaces.js","functions":[{"functionName":"exports.getInterfaceWrapper","ranges":[{"startOffset":10389,"endOffset":10436,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1108","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js","functions":[{"functionName":"exports.is","ranges":[{"startOffset":476,"endOffset":607,"count":1}],"isBlockCoverage":false},{"functionName":"exports._internalSetup","ranges":[{"startOffset":1746,"endOffset":1775,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1109","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js","functions":[{"functionName":"convert","ranges":[{"startOffset":122,"endOffset":898,"count":1}],"isBlockCoverage":false},{"functionName":"callTheUserObjectsOperation","ranges":[{"startOffset":285,"endOffset":741,"count":0}],"isBlockCoverage":false}]},{"scriptId":"1112","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/Event.js","functions":[{"functionName":"makeWrapper","ranges":[{"startOffset":729,"endOffset":1124,"count":1}],"isBlockCoverage":false},{"functionName":"exports.create","ranges":[{"startOffset":1143,"endOffset":1316,"count":1}],"isBlockCoverage":false},{"functionName":"exports.createImpl","ranges":[{"startOffset":1340,"endOffset":1509,"count":1}],"isBlockCoverage":false},{"functionName":"exports._internalSetup","ranges":[{"startOffset":1537,"endOffset":2056,"count":1}],"isBlockCoverage":false},{"functionName":"get isTrusted","ranges":[{"startOffset":1651,"endOffset":1965,"count":0}],"isBlockCoverage":false},{"functionName":"exports.setup","ranges":[{"startOffset":2075,"endOffset":2516,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1114","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/events/Event-impl.js","functions":[{"functionName":"EventImpl","ranges":[{"startOffset":137,"endOffset":1085,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1115","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js","functions":[{"functionName":"EventTargetImpl","ranges":[{"startOffset":565,"endOffset":683,"count":1}],"isBlockCoverage":false},{"functionName":"_getTheParent","ranges":[{"startOffset":2523,"endOffset":2561,"count":1}],"isBlockCoverage":false},{"functionName":"_dispatch","ranges":[{"startOffset":2736,"endOffset":7523,"count":1}],"isBlockCoverage":false},{"functionName":"invokeEventListeners","ranges":[{"startOffset":7646,"endOffset":8248,"count":1}],"isBlockCoverage":false},{"functionName":"innerInvokeEventListeners","ranges":[{"startOffset":8318,"endOffset":10385,"count":1}],"isBlockCoverage":false},{"functionName":"normalizeEventHandlerOptions","ranges":[{"startOffset":10720,"endOffset":11415,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":11274,"endOffset":11294,"count":0}],"isBlockCoverage":false},{"functionName":"appendToEventPath","ranges":[{"startOffset":11475,"endOffset":11921,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1120","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/helpers/events.js","functions":[{"functionName":"createAnEvent","ranges":[{"startOffset":122,"endOffset":336,"count":1}],"isBlockCoverage":false},{"functionName":"fireAnEvent","ranges":[{"startOffset":338,"endOffset":662,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1121","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/helpers/node.js","functions":[{"functionName":"nodeRoot","ranges":[{"startOffset":542,"endOffset":667,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1124","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/symbol-tree/lib/SymbolTree.js","functions":[{"functionName":"returnTrue","ranges":[{"startOffset":252,"endOffset":298,"count":1}],"isBlockCoverage":false},{"functionName":"initialize","ranges":[{"startOffset":1181,"endOffset":1279,"count":1}],"isBlockCoverage":false},{"functionName":"_node","ranges":[{"startOffset":1289,"endOffset":1605,"count":1}],"isBlockCoverage":false},{"functionName":"firstChild","ranges":[{"startOffset":2255,"endOffset":2339,"count":1}],"isBlockCoverage":false},{"functionName":"lastChild","ranges":[{"startOffset":2602,"endOffset":2684,"count":1}],"isBlockCoverage":false},{"functionName":"parent","ranges":[{"startOffset":3661,"endOffset":3737,"count":1}],"isBlockCoverage":false},{"functionName":"childrenToArray","ranges":[{"startOffset":8262,"endOffset":9089,"count":1}],"isBlockCoverage":false},{"functionName":"ancestorsToArray","ranges":[{"startOffset":9883,"endOffset":10475,"count":1}],"isBlockCoverage":false},{"functionName":"childrenIterator","ranges":[{"startOffset":12277,"endOffset":12712,"count":1}],"isBlockCoverage":false},{"functionName":"ancestorsIterator","ranges":[{"startOffset":14294,"endOffset":14529,"count":1}],"isBlockCoverage":false},{"functionName":"childrenCount","ranges":[{"startOffset":17894,"endOffset":18142,"count":1}],"isBlockCoverage":false},{"functionName":"appendChild","ranges":[{"startOffset":28635,"endOffset":29437,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1125","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/symbol-tree/lib/SymbolTreeNode.js","functions":[{"functionName":"SymbolTreeNode","ranges":[{"startOffset":63,"endOffset":826,"count":1}],"isBlockCoverage":false},{"functionName":"get isAttached","ranges":[{"startOffset":836,"endOffset":953,"count":1}],"isBlockCoverage":false},{"functionName":"get hasChildren","ranges":[{"startOffset":963,"endOffset":1041,"count":1}],"isBlockCoverage":false},{"functionName":"childrenChanged","ranges":[{"startOffset":1051,"endOffset":1284,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1127","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/symbol-tree/lib/TreeIterator.js","functions":[{"functionName":"TreeIterator","ranges":[{"startOffset":145,"endOffset":376,"count":1}],"isBlockCoverage":false},{"functionName":"next","ranges":[{"startOffset":386,"endOffset":1580,"count":1}],"isBlockCoverage":false},{"functionName":"value","ranges":[{"startOffset":1664,"endOffset":1715,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1128","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/helpers/shadow-dom.js","functions":[{"functionName":"isNode","ranges":[{"startOffset":892,"endOffset":975,"count":1}],"isBlockCoverage":false},{"functionName":"isShadowRoot","ranges":[{"startOffset":1186,"endOffset":1329,"count":1}],"isBlockCoverage":false},{"functionName":"isSlotable","ranges":[{"startOffset":1380,"endOffset":1527,"count":1}],"isBlockCoverage":false},{"functionName":"isSlot","ranges":[{"startOffset":1529,"endOffset":1648,"count":1}],"isBlockCoverage":false},{"functionName":"retarget","ranges":[{"startOffset":2038,"endOffset":2315,"count":1}],"isBlockCoverage":false},{"functionName":"getEventTargetParent","ranges":[{"startOffset":2364,"endOffset":2783,"count":1}],"isBlockCoverage":false},{"functionName":"shadowIncludingRoot","ranges":[{"startOffset":2847,"endOffset":2985,"count":1}],"isBlockCoverage":false},{"functionName":"shadowIncludingInclusiveDescendantsIterator","ranges":[{"startOffset":5786,"endOffset":6098,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1130","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/helpers/mutation-observers.js","functions":[{"functionName":"queueMutationRecord","ranges":[{"startOffset":1289,"endOffset":3033,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1943,"endOffset":1989,"count":0}],"isBlockCoverage":false},{"functionName":"queueTreeMutationRecord","ranges":[{"startOffset":3096,"endOffset":3367,"count":1}],"isBlockCoverage":false},{"functionName":"queueMutationObserverMicrotask","ranges":[{"startOffset":3735,"endOffset":3957,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3911,"endOffset":3953,"count":1}],"isBlockCoverage":false},{"functionName":"notifyMutationObservers","ranges":[{"startOffset":4017,"endOffset":5262,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4156,"endOffset":4179,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4526,"endOffset":4606,"count":0}],"isBlockCoverage":false}]},{"scriptId":"1135","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/MouseEvent.js","functions":[{"functionName":"exports.isImpl","ranges":[{"startOffset":540,"endOffset":624,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1144","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/NamedNodeMap.js","functions":[{"functionName":"makeWrapper","ranges":[{"startOffset":963,"endOffset":1372,"count":1}],"isBlockCoverage":false},{"functionName":"exports.create","ranges":[{"startOffset":1391,"endOffset":1564,"count":1}],"isBlockCoverage":false},{"functionName":"exports.createImpl","ranges":[{"startOffset":1588,"endOffset":1757,"count":1}],"isBlockCoverage":false},{"functionName":"exports._internalSetup","ranges":[{"startOffset":1785,"endOffset":1814,"count":1}],"isBlockCoverage":false},{"functionName":"exports.setup","ranges":[{"startOffset":1833,"endOffset":2321,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":11464,"endOffset":12041,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1146","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/helpers/custom-elements.js","functions":[{"functionName":"push","ranges":[{"startOffset":883,"endOffset":943,"count":1}],"isBlockCoverage":false},{"functionName":"pop","ranges":[{"startOffset":947,"endOffset":988,"count":1}],"isBlockCoverage":false},{"functionName":"ceReactionsPreSteps","ranges":[{"startOffset":1603,"endOffset":1677,"count":1}],"isBlockCoverage":false},{"functionName":"ceReactionsPostSteps","ranges":[{"startOffset":1678,"endOffset":1792,"count":1}],"isBlockCoverage":false},{"functionName":"isValidCustomElementName","ranges":[{"startOffset":2089,"endOffset":2250,"count":1}],"isBlockCoverage":false},{"functionName":"lookupCEDefinition","ranges":[{"startOffset":4256,"endOffset":5011,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4616,"endOffset":4698,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4840,"endOffset":4916,"count":0}],"isBlockCoverage":false}]},{"scriptId":"1147","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/is-potential-custom-element-name/index.js","functions":[{"functionName":"isPotentialCustomElementName","ranges":[{"startOffset":478,"endOffset":526,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1148","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/Node.js","functions":[{"functionName":"exports._internalSetup","ranges":[{"startOffset":1830,"endOffset":1913,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1150","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/nodes/Node-impl.js","functions":[{"functionName":"isHostInclusiveAncestor","ranges":[{"startOffset":3390,"endOffset":3734,"count":1}],"isBlockCoverage":false},{"functionName":"NodeImpl","ranges":[{"startOffset":3779,"endOffset":4163,"count":1}],"isBlockCoverage":false},{"functionName":"get parentNode","ranges":[{"startOffset":4301,"endOffset":4362,"count":1}],"isBlockCoverage":false},{"functionName":"get nodeName","ranges":[{"startOffset":4470,"endOffset":5190,"count":1}],"isBlockCoverage":false},{"functionName":"get firstChild","ranges":[{"startOffset":5194,"endOffset":5259,"count":1}],"isBlockCoverage":false},{"functionName":"get isConnected","ranges":[{"startOffset":5362,"endOffset":5491,"count":1}],"isBlockCoverage":false},{"functionName":"_modified","ranges":[{"startOffset":6139,"endOffset":6461,"count":1}],"isBlockCoverage":false},{"functionName":"_clearMemoizedQueries","ranges":[{"startOffset":6532,"endOffset":6708,"count":1}],"isBlockCoverage":false},{"functionName":"_descendantAdded","ranges":[{"startOffset":6880,"endOffset":7040,"count":1}],"isBlockCoverage":false},{"functionName":"_preInsertValidity","ranges":[{"startOffset":17226,"endOffset":22135,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":19388,"endOffset":19438,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":19751,"endOffset":19798,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":20155,"endOffset":20205,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":20850,"endOffset":20900,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":21515,"endOffset":21571,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":21830,"endOffset":21880,"count":0}],"isBlockCoverage":false},{"functionName":"_preInsert","ranges":[{"startOffset":22197,"endOffset":22556,"count":1}],"isBlockCoverage":false},{"functionName":"_insert","ranges":[{"startOffset":22614,"endOffset":25345,"count":1}],"isBlockCoverage":false},{"functionName":"_append","ranges":[{"startOffset":25403,"endOffset":25470,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1154","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/helpers/strings.js","functions":[{"functionName":"exports.asciiUppercase","ranges":[{"startOffset":370,"endOffset":430,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":406,"endOffset":426,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1156","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/helpers/create-element.js","functions":[{"functionName":"getHTMLElementInterface","ranges":[{"startOffset":4444,"endOffset":5063,"count":1}],"isBlockCoverage":false},{"functionName":"createElement","ranges":[{"startOffset":5763,"endOffset":9553,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1164","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/attributes/NamedNodeMap-impl.js","functions":[{"functionName":"NamedNodeMapImpl","ranges":[{"startOffset":285,"endOffset":416,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1165","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/Element.js","functions":[{"functionName":"exports.is","ranges":[{"startOffset":597,"endOffset":728,"count":1}],"isBlockCoverage":false},{"functionName":"exports._internalSetup","ranges":[{"startOffset":1855,"endOffset":1931,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1168","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/nodes/Element-impl.js","functions":[{"functionName":"ElementImpl","ranges":[{"startOffset":2270,"endOffset":3051,"count":1}],"isBlockCoverage":false},{"functionName":"get namespaceURI","ranges":[{"startOffset":3983,"endOffset":4038,"count":1}],"isBlockCoverage":false},{"functionName":"get localName","ranges":[{"startOffset":4087,"endOffset":4136,"count":1}],"isBlockCoverage":false},{"functionName":"get _qualifiedName","ranges":[{"startOffset":4139,"endOffset":4256,"count":1}],"isBlockCoverage":false},{"functionName":"get tagName","ranges":[{"startOffset":4259,"endOffset":4870,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1175","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/browser/parser/index.js","functions":[{"functionName":"parseFragment","ranges":[{"startOffset":159,"endOffset":625,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1181","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/DocumentFragment.js","functions":[{"functionName":"makeWrapper","ranges":[{"startOffset":971,"endOffset":1388,"count":1}],"isBlockCoverage":false},{"functionName":"exports.create","ranges":[{"startOffset":1407,"endOffset":1580,"count":1}],"isBlockCoverage":false},{"functionName":"exports.createImpl","ranges":[{"startOffset":1604,"endOffset":1773,"count":1}],"isBlockCoverage":false},{"functionName":"exports._internalSetup","ranges":[{"startOffset":1801,"endOffset":1877,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1182","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/nodes/DocumentFragment-impl.js","functions":[{"functionName":"DocumentFragmentImpl","ranges":[{"startOffset":476,"endOffset":770,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1192","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/nodes/Slotable-impl.js","functions":[{"functionName":"_initSlotableMixin","ranges":[{"startOffset":227,"endOffset":282,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1198","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/browser/parser/html.js","functions":[{"functionName":"OpenElementStack.push","ranges":[{"startOffset":1099,"endOffset":1356,"count":1}],"isBlockCoverage":false},{"functionName":"JSDOMParse5Adapter","ranges":[{"startOffset":1754,"endOffset":2209,"count":1}],"isBlockCoverage":false},{"functionName":"_ownerDocument","ranges":[{"startOffset":2213,"endOffset":2619,"count":1}],"isBlockCoverage":false},{"functionName":"createDocumentFragment","ranges":[{"startOffset":3125,"endOffset":3287,"count":1}],"isBlockCoverage":false},{"functionName":"createElement","ranges":[{"startOffset":3358,"endOffset":4365,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3488,"endOffset":3514,"count":0}],"isBlockCoverage":false},{"functionName":"appendChild","ranges":[{"startOffset":4531,"endOffset":4602,"count":1}],"isBlockCoverage":false},{"functionName":"adoptAttributes","ranges":[{"startOffset":6822,"endOffset":7051,"count":1}],"isBlockCoverage":false},{"functionName":"parseFragment","ranges":[{"startOffset":7166,"endOffset":7604,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1199","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/parse5/lib/index.js","functions":[{"functionName":"parseFragment","ranges":[{"startOffset":258,"endOffset":555,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1200","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/parse5/lib/parser/index.js","functions":[{"functionName":"Parser","ranges":[{"startOffset":13791,"endOffset":14248,"count":1}],"isBlockCoverage":false},{"functionName":"_bootstrap","ranges":[{"startOffset":15845,"endOffset":16732,"count":1}],"isBlockCoverage":false},{"functionName":"_runParsingLoop","ranges":[{"startOffset":16859,"endOffset":17668,"count":1}],"isBlockCoverage":false},{"functionName":"_setupTokenizerCDATAMode","ranges":[{"startOffset":18086,"endOffset":18397,"count":1}],"isBlockCoverage":false},{"functionName":"_getAdjustedCurrentElement","ranges":[{"startOffset":18882,"endOffset":19066,"count":1}],"isBlockCoverage":false},{"functionName":"_findFormInFragmentContext","ranges":[{"startOffset":19072,"endOffset":19387,"count":1}],"isBlockCoverage":false},{"functionName":"_insertFakeRootElement","ranges":[{"startOffset":21831,"endOffset":22056,"count":1}],"isBlockCoverage":false},{"functionName":"_adoptNodes","ranges":[{"startOffset":22569,"endOffset":22844,"count":1}],"isBlockCoverage":false},{"functionName":"_shouldProcessTokenInForeignContent","ranges":[{"startOffset":22873,"endOffset":24223,"count":1}],"isBlockCoverage":false},{"functionName":"_processToken","ranges":[{"startOffset":24229,"endOffset":24326,"count":1}],"isBlockCoverage":false},{"functionName":"_processInputToken","ranges":[{"startOffset":25173,"endOffset":25577,"count":1}],"isBlockCoverage":false},{"functionName":"eofInBody","ranges":[{"startOffset":70003,"endOffset":70157,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1201","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/parse5/lib/tokenizer/index.js","functions":[{"functionName":"Tokenizer","ranges":[{"startOffset":9149,"endOffset":9626,"count":1}],"isBlockCoverage":false},{"functionName":"getNextToken","ranges":[{"startOffset":9858,"endOffset":10172,"count":1}],"isBlockCoverage":false},{"functionName":"write","ranges":[{"startOffset":10178,"endOffset":10292,"count":1}],"isBlockCoverage":false},{"functionName":"_ensureHibernation","ranges":[{"startOffset":10444,"endOffset":10827,"count":1}],"isBlockCoverage":false},{"functionName":"_consume","ranges":[{"startOffset":10851,"endOffset":10951,"count":1}],"isBlockCoverage":false},{"functionName":"_createEOFToken","ranges":[{"startOffset":13409,"endOffset":13493,"count":1}],"isBlockCoverage":false},{"functionName":"_emitCurrentToken","ranges":[{"startOffset":14039,"endOffset":14710,"count":1}],"isBlockCoverage":false},{"functionName":"_emitCurrentCharacterToken","ranges":[{"startOffset":14716,"endOffset":14913,"count":1}],"isBlockCoverage":false},{"functionName":"_emitEOFToken","ranges":[{"startOffset":14919,"endOffset":15008,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":19159,"endOffset":19703,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1202","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/parse5/lib/tokenizer/preprocessor.js","functions":[{"functionName":"Preprocessor","ranges":[{"startOffset":387,"endOffset":720,"count":1}],"isBlockCoverage":false},{"functionName":"dropParsedChunk","ranges":[{"startOffset":1796,"endOffset":2067,"count":1}],"isBlockCoverage":false},{"functionName":"write","ranges":[{"startOffset":2073,"endOffset":2352,"count":1}],"isBlockCoverage":false},{"functionName":"advance","ranges":[{"startOffset":2607,"endOffset":4002,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1206","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/parse5/lib/parser/open-element-stack.js","functions":[{"functionName":"OpenElementStack","ranges":[{"startOffset":2807,"endOffset":3079,"count":1}],"isBlockCoverage":false},{"functionName":"_isInTemplate","ranges":[{"startOffset":3379,"endOffset":3515,"count":1}],"isBlockCoverage":false},{"functionName":"_updateCurrentElement","ranges":[{"startOffset":3521,"endOffset":3807,"count":1}],"isBlockCoverage":false},{"functionName":"push","ranges":[{"startOffset":3829,"endOffset":4012,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1208","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/parse5/lib/parser/formatting-element-list.js","functions":[{"functionName":"FormattingElementList","ranges":[{"startOffset":117,"endOffset":271,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1219","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/parse5/lib/utils/merge-options.js","functions":[{"functionName":"mergeOptions","ranges":[{"startOffset":32,"endOffset":332,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":160,"endOffset":307,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":218,"endOffset":275,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1223","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/domparsing/parse5-adapter-serialization.js","functions":[{"functionName":"exports.getFirstChild","ranges":[{"startOffset":240,"endOffset":263,"count":1}],"isBlockCoverage":false},{"functionName":"exports.getParentNode","ranges":[{"startOffset":393,"endOffset":416,"count":1}],"isBlockCoverage":false},{"functionName":"exports.getTagName","ranges":[{"startOffset":779,"endOffset":812,"count":1}],"isBlockCoverage":false},{"functionName":"exports.getNamespaceURI","ranges":[{"startOffset":890,"endOffset":921,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1224","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/domparsing/InnerHTML-impl.js","functions":[{"functionName":"set innerHTML","ranges":[{"startOffset":619,"endOffset":1015,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1238","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/Document.js","functions":[{"functionName":"exports.is","ranges":[{"startOffset":819,"endOffset":950,"count":1}],"isBlockCoverage":false},{"functionName":"close","ranges":[{"startOffset":25918,"endOffset":26374,"count":1}],"isBlockCoverage":false},{"functionName":"get body","ranges":[{"startOffset":41821,"endOffset":42309,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1241","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/HTMLElement.js","functions":[{"functionName":"exports._internalSetup","ranges":[{"startOffset":2039,"endOffset":2118,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1245","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js","functions":[{"functionName":"HTMLElementImpl","ranges":[{"startOffset":717,"endOffset":1078,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1246","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/nodes/ElementCSSInlineStyle-impl.js","functions":[{"functionName":"_initElementCSSInlineStyle","ranges":[{"startOffset":85,"endOffset":402,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":201,"endOffset":396,"count":0}],"isBlockCoverage":false}]},{"scriptId":"1247","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/nodes/GlobalEventHandlers-impl.js","functions":[{"functionName":"_initGlobalEvents","ranges":[{"startOffset":962,"endOffset":1076,"count":1}],"isBlockCoverage":false},{"functionName":"_getEventHandlerTarget","ranges":[{"startOffset":1080,"endOffset":1127,"count":1}],"isBlockCoverage":false},{"functionName":"_getEventHandlerFor","ranges":[{"startOffset":1131,"endOffset":1304,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1248","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/helpers/create-event-accessor.js","functions":[{"functionName":"exports.getCurrentEventHandlerValue","ranges":[{"startOffset":2824,"endOffset":5348,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1250","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOrSVGElement-impl.js","functions":[{"functionName":"_initHTMLOrSVGElement","ranges":[{"startOffset":481,"endOffset":622,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1260","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/DOMStringMap.js","functions":[{"functionName":"makeWrapper","ranges":[{"startOffset":928,"endOffset":1337,"count":1}],"isBlockCoverage":false},{"functionName":"makeProxy","ranges":[{"startOffset":1339,"endOffset":1631,"count":1}],"isBlockCoverage":false},{"functionName":"exports.create","ranges":[{"startOffset":1650,"endOffset":1823,"count":1}],"isBlockCoverage":false},{"functionName":"exports.createImpl","ranges":[{"startOffset":1847,"endOffset":2016,"count":1}],"isBlockCoverage":false},{"functionName":"exports._internalSetup","ranges":[{"startOffset":2044,"endOffset":2073,"count":1}],"isBlockCoverage":false},{"functionName":"exports.setup","ranges":[{"startOffset":2092,"endOffset":2580,"count":1}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3898,"endOffset":4475,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1261","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/nodes/DOMStringMap-impl.js","functions":[{"functionName":"DOMStringMapImpl","ranges":[{"startOffset":578,"endOffset":708,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1262","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/nodes/Document-impl.js","functions":[{"functionName":"_getTheParent","ranges":[{"startOffset":8373,"endOffset":8535,"count":1}],"isBlockCoverage":false},{"functionName":"get documentElement","ranges":[{"startOffset":9297,"endOffset":9509,"count":1}],"isBlockCoverage":false},{"functionName":"set readyState","ranges":[{"startOffset":9849,"endOffset":9963,"count":1}],"isBlockCoverage":false},{"functionName":"close","ranges":[{"startOffset":14274,"endOffset":15990,"count":1}],"isBlockCoverage":false},{"functionName":"onDOMContentLoad","ranges":[{"startOffset":14731,"endOffset":15279,"count":1}],"isBlockCoverage":false},{"functionName":"dispatchEvent","ranges":[{"startOffset":14769,"endOffset":14968,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":14995,"endOffset":15271,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":15160,"endOffset":15225,"count":0}],"isBlockCoverage":false},{"functionName":"onLoad","ranges":[{"startOffset":15301,"endOffset":15727,"count":1}],"isBlockCoverage":false},{"functionName":"dispatchEvent","ranges":[{"startOffset":15339,"endOffset":15444,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":15471,"endOffset":15719,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":15644,"endOffset":15709,"count":0}],"isBlockCoverage":false},{"functionName":"get body","ranges":[{"startOffset":18049,"endOffset":18341,"count":1}],"isBlockCoverage":false},{"functionName":"_adoptNode","ranges":[{"startOffset":24975,"endOffset":25958,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1304","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/browser/resources/async-resource-queue.js","functions":[{"functionName":"count","ranges":[{"startOffset":471,"endOffset":539,"count":1}],"isBlockCoverage":false},{"functionName":"notifyItem","ranges":[{"startOffset":2034,"endOffset":2192,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1305","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/browser/resources/resource-queue.js","functions":[{"functionName":"_notify","ranges":[{"startOffset":666,"endOffset":737,"count":1}],"isBlockCoverage":false},{"functionName":"push","ranges":[{"startOffset":803,"endOffset":2671,"count":1}],"isBlockCoverage":false},{"functionName":"check","ranges":[{"startOffset":1235,"endOffset":1956,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1557,"endOffset":1936,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2472,"endOffset":2561,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2576,"endOffset":2665,"count":0}],"isBlockCoverage":false},{"functionName":"resume","ranges":[{"startOffset":2675,"endOffset":2889,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1381","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/HTMLHtmlElement.js","functions":[{"functionName":"makeWrapper","ranges":[{"startOffset":1091,"endOffset":1506,"count":1}],"isBlockCoverage":false},{"functionName":"exports.create","ranges":[{"startOffset":1525,"endOffset":1698,"count":1}],"isBlockCoverage":false},{"functionName":"exports.createImpl","ranges":[{"startOffset":1722,"endOffset":1891,"count":1}],"isBlockCoverage":false},{"functionName":"exports._internalSetup","ranges":[{"startOffset":1919,"endOffset":2002,"count":1}],"isBlockCoverage":false},{"functionName":"exports.setup","ranges":[{"startOffset":2021,"endOffset":2462,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1444","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/HTMLUnknownElement.js","functions":[{"functionName":"makeWrapper","ranges":[{"startOffset":759,"endOffset":1180,"count":1}],"isBlockCoverage":false},{"functionName":"exports.create","ranges":[{"startOffset":1199,"endOffset":1372,"count":1}],"isBlockCoverage":false},{"functionName":"exports.createImpl","ranges":[{"startOffset":1396,"endOffset":1565,"count":1}],"isBlockCoverage":false},{"functionName":"exports._internalSetup","ranges":[{"startOffset":1593,"endOffset":1676,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1486","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/generated/Storage.js","functions":[{"functionName":"get","ranges":[{"startOffset":7141,"endOffset":7718,"count":1}],"isBlockCoverage":false},{"functionName":"getOwnPropertyDescriptor","ranges":[{"startOffset":8376,"endOffset":8890,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1487","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/lib/jsdom/living/webstorage/Storage-impl.js","functions":[{"functionName":"getItem","ranges":[{"startOffset":1230,"endOffset":1338,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1710","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jest-mock/build/index.js","functions":[{"functionName":"resetAllMocks","ranges":[{"startOffset":24450,"endOffset":24554,"count":1}],"isBlockCoverage":false},{"functionName":"restoreAllMocks","ranges":[{"startOffset":24558,"endOffset":24664,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":24605,"endOffset":24625,"count":0}],"isBlockCoverage":false}]},{"scriptId":"1712","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/fake-timers/build/legacyFakeTimers.js","functions":[{"functionName":"clearAllTimers","ranges":[{"startOffset":2428,"endOffset":2504,"count":1}],"isBlockCoverage":false},{"functionName":"dispose","ranges":[{"startOffset":2508,"endOffset":2577,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1713","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/fake-timers/build/modernFakeTimers.js","functions":[{"functionName":"dispose","ranges":[{"startOffset":1294,"endOffset":1335,"count":1}],"isBlockCoverage":false},{"functionName":"useRealTimers","ranges":[{"startOffset":2124,"endOffset":2243,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1747","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/source-map-support/source-map-support.js","functions":[{"functionName":"handlerExec","ranges":[{"startOffset":2085,"endOffset":2287,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2123,"endOffset":2284,"count":0}],"isBlockCoverage":false},{"functionName":"exports.resetRetrieveHandlers","ranges":[{"startOffset":19903,"endOffset":20222,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1760","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/collect-v8-coverage/index.js","functions":[{"functionName":"stopInstrumenting","ranges":[{"startOffset":486,"endOffset":737,"count":1}],"isBlockCoverage":false}]},{"scriptId":"1761","url":"node:inspector","functions":[{"functionName":"","ranges":[{"startOffset":1520,"endOffset":1563,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2016,"endOffset":2694,"count":1}],"isBlockCoverage":false},{"functionName":"post","ranges":[{"startOffset":2889,"endOffset":3550,"count":1}],"isBlockCoverage":false}]},{"scriptId":"2238","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@jest/reporters/node_modules/terminal-link/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":837,"count":1}],"isBlockCoverage":false},{"functionName":"terminalLink","ranges":[{"startOffset":140,"endOffset":523,"count":1}],"isBlockCoverage":false},{"functionName":"module.exports","ranges":[{"startOffset":543,"endOffset":604,"count":1}],"isBlockCoverage":false},{"functionName":"module.exports.stderr","ranges":[{"startOffset":631,"endOffset":715,"count":0}],"isBlockCoverage":false}]},{"scriptId":"2240","url":"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/supports-hyperlinks/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2011,"count":1}],"isBlockCoverage":false},{"functionName":"parseVersion","ranges":[{"startOffset":101,"endOffset":544,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":441,"endOffset":461,"count":1}],"isBlockCoverage":false},{"functionName":"supportsHyperlink","ranges":[{"startOffset":546,"endOffset":1880,"count":0}],"isBlockCoverage":false}]}],"timestamp":4353.664167,"source-map-cache":{"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/get-caller-file/index.js":{"lineLengths":[13,69,69,2,58,51,46,44,208,5,55,68,34,51,54,35,56,54,75,5,2,33],"data":{"version":3,"file":"index.js","sourceRoot":"","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/get-caller-file/index.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,qEAAqE;AACrE,EAAE;AACF,0DAA0D;AAE1D,iBAAS,SAAS,aAAa,CAAC,QAAY;IAAZ,yBAAA,EAAA,YAAY;IAC1C,IAAI,QAAQ,IAAI,KAAK,CAAC,eAAe,EAAE;QACrC,MAAM,IAAI,SAAS,CAAC,kGAAkG,GAAG,QAAQ,GAAG,oCAAoC,GAAG,KAAK,CAAC,eAAe,GAAG,GAAG,CAAC,CAAC;KACzM;IAED,IAAM,oBAAoB,GAAG,KAAK,CAAC,iBAAiB,CAAC;IACrD,KAAK,CAAC,iBAAiB,GAAG,UAAC,CAAC,EAAE,KAAK,IAAM,OAAA,KAAK,EAAL,CAAK,CAAC;IAC/C,IAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;IAChC,KAAK,CAAC,iBAAiB,GAAG,oBAAoB,CAAC;IAG/C,IAAI,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC/C,2BAA2B;QAC3B,gDAAgD;QAChD,8CAA8C;QAC9C,OAAO,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAE,KAAK,CAAC,QAAQ,CAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;KAC7E;AACH,CAAC,CAAC"},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/human-signals/build/src/main.js":{"lineLengths":[145,0,37,39,0,0,0,34,40,42,2,0,31,17,59,1,7,20,67,0,2,0,75,0,0,0,0,36,40,34,51,35,0,37,2,0,49,48,0,23,9,1,0,64,7,10,5,7,12,10,7,7,11,0,0,2,0,0,0,50,74,0,23,14,1,0,54,2,0,83,32],"data":{"version":3,"sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/human-signals/src/main.js"],"names":["getSignalsByName","signals","reduce","getSignalByName","signalByNameMemo","name","number","description","supported","action","forced","standard","signalsByName","getSignalsByNumber","length","SIGRTMAX","signalsA","Array","from","value","getSignalByNumber","Object","assign","signal","findSignalByNumber","undefined","find","constants","signalA","signalsByNumber"],"mappings":"2HAAA;;AAEA;AACA;;;;AAIA,KAAMA,CAAAA,gBAAgB,CAAG,UAAW;AAClC,KAAMC,CAAAA,OAAO,CAAG,yBAAhB;AACA,MAAOA,CAAAA,OAAO,CAACC,MAAR,CAAeC,eAAf,CAAgC,EAAhC,CAAP;AACD,CAHD;;AAKA,KAAMA,CAAAA,eAAe,CAAG;AACtBC,gBADsB;AAEtB,CAAEC,IAAF,CAAQC,MAAR,CAAgBC,WAAhB,CAA6BC,SAA7B,CAAwCC,MAAxC,CAAgDC,MAAhD,CAAwDC,QAAxD,CAFsB;AAGtB;AACA,MAAO;AACL,GAAGP,gBADE;AAEL,CAACC,IAAD,EAAQ,CAAEA,IAAF,CAAQC,MAAR,CAAgBC,WAAhB,CAA6BC,SAA7B,CAAwCC,MAAxC,CAAgDC,MAAhD,CAAwDC,QAAxD,CAFH,CAAP;;AAID,CARD;;AAUO,KAAMC,CAAAA,aAAa,CAAGZ,gBAAgB,EAAtC,C;;;;;AAKP,KAAMa,CAAAA,kBAAkB,CAAG,UAAW;AACpC,KAAMZ,CAAAA,OAAO,CAAG,yBAAhB;AACA,KAAMa,CAAAA,MAAM,CAAGC,mBAAW,CAA1B;AACA,KAAMC,CAAAA,QAAQ,CAAGC,KAAK,CAACC,IAAN,CAAW,CAAEJ,MAAF,CAAX,CAAuB,CAACK,KAAD,CAAQb,MAAR;AACtCc,iBAAiB,CAACd,MAAD,CAASL,OAAT,CADF,CAAjB;;AAGA,MAAOoB,CAAAA,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkB,GAAGN,QAArB,CAAP;AACD,CAPD;;AASA,KAAMI,CAAAA,iBAAiB,CAAG,SAASd,MAAT,CAAiBL,OAAjB,CAA0B;AAClD,KAAMsB,CAAAA,MAAM,CAAGC,kBAAkB,CAAClB,MAAD,CAASL,OAAT,CAAjC;;AAEA,GAAIsB,MAAM,GAAKE,SAAf,CAA0B;AACxB,MAAO,EAAP;AACD;;AAED,KAAM,CAAEpB,IAAF,CAAQE,WAAR,CAAqBC,SAArB,CAAgCC,MAAhC,CAAwCC,MAAxC,CAAgDC,QAAhD,EAA6DY,MAAnE;AACA,MAAO;AACL,CAACjB,MAAD,EAAU;AACRD,IADQ;AAERC,MAFQ;AAGRC,WAHQ;AAIRC,SAJQ;AAKRC,MALQ;AAMRC,MANQ;AAORC,QAPQ,CADL,CAAP;;;AAWD,CAnBD;;;;AAuBA,KAAMa,CAAAA,kBAAkB,CAAG,SAASlB,MAAT,CAAiBL,OAAjB,CAA0B;AACnD,KAAMsB,CAAAA,MAAM,CAAGtB,OAAO,CAACyB,IAAR,CAAa,CAAC,CAAErB,IAAF,CAAD,GAAcsB,cAAU1B,OAAV,CAAkBI,IAAlB,IAA4BC,MAAvD,CAAf;;AAEA,GAAIiB,MAAM,GAAKE,SAAf,CAA0B;AACxB,MAAOF,CAAAA,MAAP;AACD;;AAED,MAAOtB,CAAAA,OAAO,CAACyB,IAAR,CAAaE,OAAO,EAAIA,OAAO,CAACtB,MAAR,GAAmBA,MAA3C,CAAP;AACD,CARD;;AAUO,KAAMuB,CAAAA,eAAe,CAAGhB,kBAAkB,EAA1C,C","sourcesContent":["import { constants } from 'os'\n\nimport { getSignals } from './signals.js'\nimport { SIGRTMAX } from './realtime.js'\n\n// Retrieve `signalsByName`, an object mapping signal name to signal properties.\n// We make sure the object is sorted by `number`.\nconst getSignalsByName = function() {\n  const signals = getSignals()\n  return signals.reduce(getSignalByName, {})\n}\n\nconst getSignalByName = function(\n  signalByNameMemo,\n  { name, number, description, supported, action, forced, standard },\n) {\n  return {\n    ...signalByNameMemo,\n    [name]: { name, number, description, supported, action, forced, standard },\n  }\n}\n\nexport const signalsByName = getSignalsByName()\n\n// Retrieve `signalsByNumber`, an object mapping signal number to signal\n// properties.\n// We make sure the object is sorted by `number`.\nconst getSignalsByNumber = function() {\n  const signals = getSignals()\n  const length = SIGRTMAX + 1\n  const signalsA = Array.from({ length }, (value, number) =>\n    getSignalByNumber(number, signals),\n  )\n  return Object.assign({}, ...signalsA)\n}\n\nconst getSignalByNumber = function(number, signals) {\n  const signal = findSignalByNumber(number, signals)\n\n  if (signal === undefined) {\n    return {}\n  }\n\n  const { name, description, supported, action, forced, standard } = signal\n  return {\n    [number]: {\n      name,\n      number,\n      description,\n      supported,\n      action,\n      forced,\n      standard,\n    },\n  }\n}\n\n// Several signals might end up sharing the same number because of OS-specific\n// numbers, in which case those prevail.\nconst findSignalByNumber = function(number, signals) {\n  const signal = signals.find(({ name }) => constants.signals[name] === number)\n\n  if (signal !== undefined) {\n    return signal\n  }\n\n  return signals.find(signalA => signalA.number === number)\n}\n\nexport const signalsByNumber = getSignalsByNumber()\n"],"file":"src/main.js","sourceRoot":""},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/human-signals/build/src/signals.js":{"lineLengths":[118,0,31,39,0,0,0,28,57,73,15,32,0,0,0,0,0,0,0,32,5,21,12,7,13,10,1,6,33,14,43,52,65,2,35],"data":{"version":3,"sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/human-signals/src/signals.js"],"names":["getSignals","realtimeSignals","signals","SIGNALS","map","normalizeSignal","name","number","defaultNumber","description","action","forced","standard","constantSignal","constants","supported","undefined"],"mappings":"gGAAA;;AAEA;AACA;;;;AAIO,KAAMA,CAAAA,UAAU,CAAG,UAAW;AACnC,KAAMC,CAAAA,eAAe,CAAG,kCAAxB;AACA,KAAMC,CAAAA,OAAO,CAAG,CAAC,GAAGC,aAAJ,CAAa,GAAGF,eAAhB,EAAiCG,GAAjC,CAAqCC,eAArC,CAAhB;AACA,MAAOH,CAAAA,OAAP;AACD,CAJM,C;;;;;;;;AAYP,KAAMG,CAAAA,eAAe,CAAG,SAAS;AAC/BC,IAD+B;AAE/BC,MAAM,CAAEC,aAFuB;AAG/BC,WAH+B;AAI/BC,MAJ+B;AAK/BC,MAAM,CAAG,KALsB;AAM/BC,QAN+B,CAAT;AAOrB;AACD,KAAM;AACJV,OAAO,CAAE,CAAE,CAACI,IAAD,EAAQO,cAAV,CADL;AAEFC,aAFJ;AAGA,KAAMC,CAAAA,SAAS,CAAGF,cAAc,GAAKG,SAArC;AACA,KAAMT,CAAAA,MAAM,CAAGQ,SAAS,CAAGF,cAAH,CAAoBL,aAA5C;AACA,MAAO,CAAEF,IAAF,CAAQC,MAAR,CAAgBE,WAAhB,CAA6BM,SAA7B,CAAwCL,MAAxC,CAAgDC,MAAhD,CAAwDC,QAAxD,CAAP;AACD,CAdD","sourcesContent":["import { constants } from 'os'\n\nimport { SIGNALS } from './core.js'\nimport { getRealtimeSignals } from './realtime.js'\n\n// Retrieve list of know signals (including realtime) with information about\n// them\nexport const getSignals = function() {\n  const realtimeSignals = getRealtimeSignals()\n  const signals = [...SIGNALS, ...realtimeSignals].map(normalizeSignal)\n  return signals\n}\n\n// Normalize signal:\n//  - `number`: signal numbers are OS-specific. This is taken into account by\n//    `os.constants.signals`. However we provide a default `number` since some\n//     signals are not defined for some OS.\n//  - `forced`: set default to `false`\n//  - `supported`: set value\nconst normalizeSignal = function({\n  name,\n  number: defaultNumber,\n  description,\n  action,\n  forced = false,\n  standard,\n}) {\n  const {\n    signals: { [name]: constantSignal },\n  } = constants\n  const supported = constantSignal !== undefined\n  const number = supported ? constantSignal : defaultNumber\n  return { name, number, description, supported, action, forced, standard }\n}\n"],"file":"src/signals.js","sourceRoot":""},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/human-signals/build/src/core.js":{"lineLengths":[93,0,15,1,14,9,19,30,18,0,1,14,9,19,44,17,0,1,15,9,14,45,18,0,1,14,9,14,42,17,0,1,15,9,14,34,18,0,1,15,9,14,22,17,0,1,14,9,14,22,16,0,1,14,9,14,12,68,16,0,1,14,9,19,64,18,0,1,14,9,14,46,17,0,1,15,9,19,33,17,13,0,1,15,10,19,42,18,0,1,15,10,14,33,17,0,1,15,10,19,42,18,0,1,15,10,19,36,18,0,1,15,10,19,31,18,0,1,15,10,19,26,17,0,1,17,10,19,43,18,0,1,15,10,16,59,18,0,1,14,10,16,59,18,0,1,15,10,17,23,17,13,0,1,15,10,15,21,17,13,0,1,15,10,15,49,18,0,1,15,10,15,60,18,0,1,16,10,19,48,18,0,1,15,10,15,65,18,0,1,14,10,16,47,16,0,1,15,10,14,32,16,0,1,15,10,14,27,16,0,1,17,10,19,31,16,0,1,15,10,19,31,16,0,1,16,10,16,43,16,0,1,13,10,19,31,18,0,1,15,10,19,28,18,0,1,15,10,16,46,18,0,1,14,10,19,42,20,0,1,14,10,14,34,18,0,1,17,10,19,34,43,32],"data":{"version":3,"sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/human-signals/src/core.js"],"names":["SIGNALS","name","number","action","description","standard","forced"],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\n// List of known process signals with information about them\nexport const SIGNALS = [\n  {\n    name: 'SIGHUP',\n    number: 1,\n    action: 'terminate',\n    description: 'Terminal closed',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGINT',\n    number: 2,\n    action: 'terminate',\n    description: 'User interruption with CTRL-C',\n    standard: 'ansi',\n  },\n  {\n    name: 'SIGQUIT',\n    number: 3,\n    action: 'core',\n    description: 'User interruption with CTRL-\\\\',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGILL',\n    number: 4,\n    action: 'core',\n    description: 'Invalid machine instruction',\n    standard: 'ansi',\n  },\n  {\n    name: 'SIGTRAP',\n    number: 5,\n    action: 'core',\n    description: 'Debugger breakpoint',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGABRT',\n    number: 6,\n    action: 'core',\n    description: 'Aborted',\n    standard: 'ansi',\n  },\n  {\n    name: 'SIGIOT',\n    number: 6,\n    action: 'core',\n    description: 'Aborted',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGBUS',\n    number: 7,\n    action: 'core',\n    description:\n      'Bus error due to misaligned, non-existing address or paging error',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGEMT',\n    number: 7,\n    action: 'terminate',\n    description: 'Command should be emulated but is not implemented',\n    standard: 'other',\n  },\n  {\n    name: 'SIGFPE',\n    number: 8,\n    action: 'core',\n    description: 'Floating point arithmetic error',\n    standard: 'ansi',\n  },\n  {\n    name: 'SIGKILL',\n    number: 9,\n    action: 'terminate',\n    description: 'Forced termination',\n    standard: 'posix',\n    forced: true,\n  },\n  {\n    name: 'SIGUSR1',\n    number: 10,\n    action: 'terminate',\n    description: 'Application-specific signal',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGSEGV',\n    number: 11,\n    action: 'core',\n    description: 'Segmentation fault',\n    standard: 'ansi',\n  },\n  {\n    name: 'SIGUSR2',\n    number: 12,\n    action: 'terminate',\n    description: 'Application-specific signal',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGPIPE',\n    number: 13,\n    action: 'terminate',\n    description: 'Broken pipe or socket',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGALRM',\n    number: 14,\n    action: 'terminate',\n    description: 'Timeout or timer',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGTERM',\n    number: 15,\n    action: 'terminate',\n    description: 'Termination',\n    standard: 'ansi',\n  },\n  {\n    name: 'SIGSTKFLT',\n    number: 16,\n    action: 'terminate',\n    description: 'Stack is empty or overflowed',\n    standard: 'other',\n  },\n  {\n    name: 'SIGCHLD',\n    number: 17,\n    action: 'ignore',\n    description: 'Child process terminated, paused or unpaused',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGCLD',\n    number: 17,\n    action: 'ignore',\n    description: 'Child process terminated, paused or unpaused',\n    standard: 'other',\n  },\n  {\n    name: 'SIGCONT',\n    number: 18,\n    action: 'unpause',\n    description: 'Unpaused',\n    standard: 'posix',\n    forced: true,\n  },\n  {\n    name: 'SIGSTOP',\n    number: 19,\n    action: 'pause',\n    description: 'Paused',\n    standard: 'posix',\n    forced: true,\n  },\n  {\n    name: 'SIGTSTP',\n    number: 20,\n    action: 'pause',\n    description: 'Paused using CTRL-Z or \"suspend\"',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGTTIN',\n    number: 21,\n    action: 'pause',\n    description: 'Background process cannot read terminal input',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGBREAK',\n    number: 21,\n    action: 'terminate',\n    description: 'User interruption with CTRL-BREAK',\n    standard: 'other',\n  },\n  {\n    name: 'SIGTTOU',\n    number: 22,\n    action: 'pause',\n    description: 'Background process cannot write to terminal output',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGURG',\n    number: 23,\n    action: 'ignore',\n    description: 'Socket received out-of-band data',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGXCPU',\n    number: 24,\n    action: 'core',\n    description: 'Process timed out',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGXFSZ',\n    number: 25,\n    action: 'core',\n    description: 'File too big',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGVTALRM',\n    number: 26,\n    action: 'terminate',\n    description: 'Timeout or timer',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGPROF',\n    number: 27,\n    action: 'terminate',\n    description: 'Timeout or timer',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGWINCH',\n    number: 28,\n    action: 'ignore',\n    description: 'Terminal window size changed',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGIO',\n    number: 29,\n    action: 'terminate',\n    description: 'I/O is available',\n    standard: 'other',\n  },\n  {\n    name: 'SIGPOLL',\n    number: 29,\n    action: 'terminate',\n    description: 'Watched event',\n    standard: 'other',\n  },\n  {\n    name: 'SIGINFO',\n    number: 29,\n    action: 'ignore',\n    description: 'Request for process information',\n    standard: 'other',\n  },\n  {\n    name: 'SIGPWR',\n    number: 30,\n    action: 'terminate',\n    description: 'Device running out of power',\n    standard: 'systemv',\n  },\n  {\n    name: 'SIGSYS',\n    number: 31,\n    action: 'core',\n    description: 'Invalid system call',\n    standard: 'other',\n  },\n  {\n    name: 'SIGUNUSED',\n    number: 31,\n    action: 'terminate',\n    description: 'Invalid system call',\n    standard: 'other',\n  },\n]\n/* eslint-enable max-lines */\n"],"file":"src/core.js","sourceRoot":""},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/human-signals/build/src/realtime.js":{"lineLengths":[121,36,33,46,48,0,46,7,23,22,19,53,18,0,2,0,18,44,36],"data":{"version":3,"sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/human-signals/src/realtime.js"],"names":["getRealtimeSignals","length","SIGRTMAX","SIGRTMIN","Array","from","getRealtimeSignal","value","index","name","number","action","description","standard"],"mappings":";AACO,KAAMA,CAAAA,kBAAkB,CAAG,UAAW;AAC3C,KAAMC,CAAAA,MAAM,CAAGC,QAAQ,CAAGC,QAAX,CAAsB,CAArC;AACA,MAAOC,CAAAA,KAAK,CAACC,IAAN,CAAW,CAAEJ,MAAF,CAAX,CAAuBK,iBAAvB,CAAP;AACD,CAHM,C;;AAKP,KAAMA,CAAAA,iBAAiB,CAAG,SAASC,KAAT,CAAgBC,KAAhB,CAAuB;AAC/C,MAAO;AACLC,IAAI,CAAG,QAAOD,KAAK,CAAG,CAAE,EADnB;AAELE,MAAM,CAAEP,QAAQ,CAAGK,KAFd;AAGLG,MAAM,CAAE,WAHH;AAILC,WAAW,CAAE,wCAJR;AAKLC,QAAQ,CAAE,OALL,CAAP;;AAOD,CARD;;AAUA,KAAMV,CAAAA,QAAQ,CAAG,EAAjB;AACO,KAAMD,CAAAA,QAAQ,CAAG,EAAjB,C","sourcesContent":["// List of realtime signals with information about them\nexport const getRealtimeSignals = function() {\n  const length = SIGRTMAX - SIGRTMIN + 1\n  return Array.from({ length }, getRealtimeSignal)\n}\n\nconst getRealtimeSignal = function(value, index) {\n  return {\n    name: `SIGRT${index + 1}`,\n    number: SIGRTMIN + index,\n    action: 'terminate',\n    description: 'Application-specific signal (realtime)',\n    standard: 'posix',\n  }\n}\n\nconst SIGRTMIN = 34\nexport const SIGRTMAX = 64\n"],"file":"src/realtime.js","sourceRoot":""},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/lib/index.js":{"lineLengths":[13,0,62,0,58,32,18,39,13,0,43,24,45,30,3,0,16,1,0,16,33,23,25,24,21,22,23,3,0,1,22,27,24,22,27,33,23,19,3,0,1,65,9,9,11,9,15,73,1,0,39,43,66,3,0,52,9,59,4,0,14,84,3,0,3,0,233,20,19,222,20,63,0,27,89,47,5,95,47,4,4,0,26,46,48,45,55,50,37,37,27,46,27,48,54,30,21,29,30,4,45,37,2,0,28,7,8,111,0,29,27,8,47,85,119,91,101,92,112,80,76,79,95,80,96,72,67,65,37,8,55,192,109,142,75,75,68,130,70,75,23,14,93,59,64,60,59,29,14,14,169,101,30,8,119,75,79,110,28,8,76,112,52,29,14,122,99,23,20,110,68,69,111,52,51,76,40,20,9,46,61,75,34,16,55,25,18,49,18,12,69,25,12,77,38,96,32,14,49,81,37,18,59,65,101,71,26,13,53,104,72,62,51,90,44,21,17,136,27,17,156,72,118,87,97,41,7,71,40,21,105,29,13,49,59,55,58,59,133,114,87,94,94,39,74,63,27,18,150,32,18,54,180,184,186,72,72,144,78,170,69,74,178,182,184,71,130,68,87,25,11,44,95,102,92,91,56,30,16,55,79,23,13,14,113,124,72,87,109,84,31,11,25,93,88,102,143,50,60,57,52,24,18,69,85,79,84,4,0,31,61,27,17,59,34,15,52,107,83,81,41,4,0,149,37,176,147,84,34,9,190,128,31,8,80,8,40,126,103,106,89,100,153,4,0,34,0,40,7,13,11,68,0,31,8,11,6,67,9,9,29,40,28,163,69,11,8,0,16,23,25,8,16,15,84,10,0,20,50,17,13,9,0,8,12,29,24,8,52,41,24,7,7,4,1,0,67,24,101,18,1,49,32,97,3,0,63,36,0,61,80,40,16,23,18,45,3,0,32,1,187,0,7,16,11,0,69,20,20,3,0,33,42,40,14,1,0,54,11,49,0,30,54,5,0,16,3,0,22,12,9,6,21,0,9,41,18,0,48,18,14,11,6,16,3,0,29,15,0,9,29,23,20,5,0,49,46,16,3,0,30,25,50,47,16,3,0,29,47,3,0,29,42,3,0,30,42,3,0,22,41,3,0,30,42,3,0,30,45,72,92,62,48,89,61,77,3,0,31,38,28,3,0,26,54,40,12,35,5,3,0,40,31,3,0,26,30,0,231,3,0,33,40,82,54,27,3,0,94,106,0,32,58,35,5,0,32,3,0,22,42,5,61,20,7,5,60,3,0,47,46,16,19,21,36,16,3,0,23,5,61,41,7,5,45,3,0,26,5,61,44,7,5,21,3,0,29,49,30,22,16,3,0,62,61,58,3,0,104,36,30,118,41,25,26,0,40,28,5,0,30,39,3,0,31,59,5,61,28,7,5,45,24,3,0,38,66,5,61,28,7,5,45,34,24,3,0,72,92,0,15,29,53,29,5,0,16,3,0,81,101,0,15,25,29,5,0,16,3,0,30,76,3,0,33,54,54,5,0,47,3,0,37,54,13,12,13,15,0,36,82,7,0,38,18,5,0,43,3,0,51,53,45,20,9,29,43,20,9,12,60,5,3,0,40,47,0,40,37,38,0,47,29,0,99,7,0,28,25,5,0,16,3,0,31,43,13,5,0,38,3,0,21,28,0,24,34,29,14,0,36,101,45,54,33,9,0,14,5,0,16,3,0,60,80,0,36,95,43,7,0,23,49,32,57,7,84,28,5,0,16,3,0,34,42,29,5,0,48,3,0,25,43,3,0,26,76,3,0,24,69,3,0,36,68,3,0,61,41,27,3,0,3,0,18,37,24,32,23,41,3,0,1,15,29,33,34,48,2,1,45,1,0,24,24,20,22,20,21,25,33,24,26,29,29,35,25,27,25,26,24,23,32,40,40,52,32,36,32,34,56,5,32,5,3,0,1,29,0,44,25,43,30,15,1,0,35,28,15,9,5,1,0,26,22,23,23,28,28,25,0,42,80,0,21,25,83,106,106,91,56,26,1,0,48,84,0,21,41,25,85,108,108,93,58,26,1,0,12,30,15,14,5,35,15,14,5,34,15,14,5,29,33,28,15,14,5,32,15,14,5,33,15,14,5,28,14,5,31,28,15,14,5,27,27,14,5,26,14,5,27,14,5,34,14,5,24,30,14,5,33,28,14,5,36,32,14,5,31,14,5,35,15,14,5,37,14,5,41,15,14,5,23,26,14,5,45,24,15,12,5,29,15,12,5,34,15,12,5,32,15,12,5,35,15,12,5,32,11,12,14,5,26,15,11,14,5,27,15,11,14,5,34,14,5,31,14,5,33,42,34,35,33,34,34,44,34,34,42,40,41,41,31,15,13,11,14,5,28,14,14,5,26,13,5,30,31,15,14,26,5,28,15,12,5,44,15,12,5,33,32,14,5,33,39,39,38,14,5,32,14,5,37,40,14,5,27,36,14,5,35,34,15,11,14,5,29,29,33,31,30,15,14,5,32,14,5,34,14,5,34,14,5,38,14,5,35,36,14,5,32,14,5,32,14,5,34,14,5,36,15,11,14,5,32,15,11,14,5,36,15,11,14,5,28,11,14,5,30,10,5,34,10,5,32,14,5,40,14,5,38,14,5,38,14,5,36,14,5,34,14,5,34,14,5,36,14,5,32,14,5,36,14,5,34,14,5,40,14,5,38,14,5,42,14,5,40,14,5,42,14,5,40,14,5,48,14,5,46,14,5,38,14,5,32,14,5,40,14,5,38,14,5,42,14,5,38,14,5,44,14,5,40,14,5,44,14,5,42,14,5,36,14,5,40,14,5,46,14,5,46,14,5,36,14,5,40,14,5,29,14,5,33,14,5,27,14,5,33,14,5,35,14,5,33,14,5,37,14,5,26,34,35,20,5,43,20,5,38,34,20,4,2,35,37,1,51,21,1,44,37,1,44,37,1,44,33,1,41,33,1,35,36,1,52,38,1,29,36,1,32,36,1,33,36,1,32,22,1,31,30,1,39,38,1,43,38,1,32,28,1,41,28,1,41,22,1,33,36,1,34,27,1,1,44,18,4,0,105,30,4,0,45,57,20,12,35,5,4,0,46,45,4,1,0,4306,2652,85,106,62,1987,978,0,35,20,0,60,18,33,22,33,3,0,15,1,0,34,36,30,36,31,0,23,83,3,0,57,1,33,36,29,30,30,36,31,0,23,78,3,0,103,1,0,23,329,109,35,2,48,61,69,41,57,1,47,76,1,45,46,1,51,84,1,26,28,1,0,48,67,1,491,34,39,1,0,32,34,35,32,39,32,39,32,39,36,67,39,38,38,42,43,39,40,42,48,49,50,92,66,58,68,68,48,96,62,46,63,67,64,56,40,40,40,90,90,90,64,64,30,0,18,17,35,45,3,0,27,43,44,12,55,0,40,21,7,0,57,0,53,91,23,9,7,0,18,5,3,0,33,26,0,101,3,0,1,0,46,44,37,10,47,3,1,0,45,43,36,10,46,3,1,0,43,41,34,10,44,3,1,0,57,25,26,0,41,32,3,0,68,47,10,57,3,1,0,41,23,60,38,3,0,24,11,18,19,51,41,35,42,0,43,39,10,5,0,11,22,13,0,25,40,39,0,35,40,40,34,14,39,40,9,0,14,7,5,3,0,30,11,14,18,0,76,43,61,7,0,44,61,7,12,13,29,27,20,0,59,28,34,31,34,66,18,0,32,40,65,18,0,37,36,41,30,29,36,62,18,0,33,30,33,64,18,0,40,35,66,18,0,18,13,47,13,9,14,41,7,5,3,0,31,11,18,19,0,56,44,5,0,33,3,0,43,11,18,19,11,12,21,29,47,0,41,35,5,3,0,45,11,18,19,51,41,35,0,25,40,39,43,0,33,37,40,38,38,14,7,5,3,0,1,0,43,53,26,17,12,12,14,14,18,0,12,19,3,1,55,78,150,29,17,16,16,16,12,13,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,0,12,19,3,1,0,13,17,25,26,28,27,25,21,31,24,40,40,24,36,32,34,33,25,34,25,6,27,44,21,31,23,27,17,20,22,19,17,30,32,26,33,35,29,34,26,3,0,8,15,15,14,15,6,102,29,34,74,3,0,17,75,3,0,21,30,35,0,60,26,26,0,46,26,7,0,23,5,0,17,3,0,1,0,25,26,0,39,34,2,76,43,57,33,2,42,36,34,34,82,2,13,22,27,29,29,25,64,3,0,1,40,31,12,30,21,29,29,23,31,29,3,0,20,49,28,30,3,0,10,31,0,30,44,5,0,47,49,53,21,3,0,13,27,18,18,12,19,5,3,0,15,36,3,0,31,12,21,18,23,25,21,35,27,31,41,29,33,36,6,3,0,15,27,48,28,21,29,28,21,16,3,0,20,52,3,0,28,35,76,3,0,23,56,3,0,23,40,0,64,47,0,40,62,7,5,0,14,3,0,21,31,0,17,88,10,10,38,5,3,0,16,61,3,0,15,21,38,74,0,40,28,13,5,0,63,3,0,22,17,63,33,52,0,21,52,36,9,5,0,29,37,0,72,27,50,5,0,33,21,27,46,12,19,65,6,53,19,3,0,30,33,17,63,64,0,39,64,51,7,5,0,33,31,59,21,26,12,12,10,65,6,53,19,3,0,15,38,24,0,48,55,0,19,16,17,15,27,16,0,16,65,29,11,0,16,18,18,27,31,48,16,0,16,62,20,15,56,0,44,43,73,17,0,22,15,0,20,15,56,0,44,43,73,17,0,22,15,0,20,25,11,0,16,0,16,33,29,51,39,0,156,54,0,42,41,71,15,20,25,13,51,39,0,138,54,0,42,41,71,15,20,25,13,18,23,11,0,7,5,0,30,33,33,26,12,17,26,27,28,8,54,5,3,0,26,36,49,37,27,27,0,28,35,5,3,0,22,27,25,3,0,26,63,13,5,0,39,46,0,35,57,36,9,5,0,74,42,0,76,147,38,11,7,0,26,0,25,28,14,28,7,41,23,50,29,23,46,12,27,5,3,0,19,59,0,35,28,13,5,0,74,26,27,12,23,27,5,3,0,21,59,0,22,27,12,27,5,3,0,27,62,55,32,33,24,0,62,49,5,0,62,32,16,3,0,31,37,18,57,0,37,14,55,16,5,0,44,14,35,5,0,31,3,0,28,59,0,24,61,29,14,49,7,0,13,5,0,23,24,29,15,7,0,61,77,78,40,13,9,0,28,28,15,7,0,60,77,77,40,13,9,0,28,28,15,7,5,0,22,27,13,5,0,45,3,0,21,59,0,44,27,67,23,22,10,27,65,0,31,32,7,12,27,5,3,0,22,59,0,60,23,22,10,27,12,27,5,3,0,28,59,0,24,27,13,5,0,22,27,12,27,5,3,0,18,11,9,19,48,0,22,50,29,15,7,0,27,13,5,0,22,27,13,5,0,25,3,0,18,11,9,19,48,0,22,65,0,53,36,15,7,0,30,13,5,0,22,27,13,5,0,25,3,0,27,59,0,22,82,13,5,0,37,26,27,13,5,0,44,3,0,24,59,60,0,22,25,29,14,29,7,62,26,27,12,23,27,5,3,0,26,19,14,29,15,0,14,25,29,15,0,14,25,29,15,0,14,25,29,15,0,14,25,29,15,0,14,100,79,81,42,15,11,0,30,30,16,27,30,9,0,15,0,14,25,28,15,0,15,100,79,82,42,15,11,0,30,30,16,27,30,9,0,15,0,15,25,28,15,0,14,97,31,16,27,31,9,0,15,0,14,34,15,0,14,33,15,0,14,9,65,0,44,37,19,11,0,44,36,19,11,0,43,36,19,11,9,0,14,14,14,14,14,14,14,14,14,31,15,0,14,14,30,15,0,14,31,15,0,14,14,41,15,0,15,14,38,15,0,14,31,15,0,14,14,38,15,0,14,28,15,0,14,28,15,0,14,14,37,15,0,15,29,15,0,14,32,15,0,14,36,15,0,14,24,15,0,14,38,30,17,9,0,5,0,55,35,44,7,3,0,24,72,27,32,3,0,16,41,39,25,9,9,19,0,20,31,53,57,11,7,0,44,0,26,53,57,11,7,0,20,24,14,24,25,42,26,43,16,9,0,28,7,5,0,49,10,18,0,84,0,31,42,43,0,38,25,60,0,35,58,27,15,11,32,35,58,27,15,11,9,0,34,51,25,13,9,53,49,23,11,14,14,7,0,12,19,5,0,25,27,23,17,7,3,0,59,33,129,227,24,18,0,67,57,14,0,56,63,63,0,33,63,40,13,129,57,40,13,9,0,25,17,7,0,23,29,30,29,34,24,14,23,7,0,25,53,18,43,41,17,13,30,18,25,16,16,9,7,0,23,34,5,0,95,18,5,0,17,3,0,26,46,25,24,36,0,22,39,56,13,9,5,0,55,0,23,23,22,30,47,20,9,5,0,65,49,36,9,5,0,19,88,33,13,5,0,31,3,0,29,33,46,24,25,26,28,24,0,54,40,36,9,5,0,94,0,25,62,62,20,9,0,31,51,0,32,56,71,13,9,7,0,56,5,0,53,0,34,23,23,21,51,5,0,52,53,0,39,25,7,0,38,53,22,11,7,0,21,25,51,5,0,23,38,49,22,11,7,0,23,22,5,0,23,61,0,42,43,22,11,7,0,23,23,5,0,65,49,36,9,5,0,78,0,19,33,13,5,0,20,33,13,5,0,61,31,3,0,33,53,13,0,21,23,110,23,0,45,29,47,40,13,16,22,9,7,12,56,5,0,16,3,0,21,17,38,0,14,42,53,33,11,7,0,55,30,0,22,60,43,36,46,25,29,46,33,53,33,11,14,25,7,5,0,58,31,3,0,30,25,31,5,0,21,29,3,0,23,17,36,32,21,0,14,42,55,68,11,7,0,55,0,22,25,60,59,15,7,0,75,28,60,59,15,7,0,22,60,51,0,31,33,16,25,9,0,36,33,60,25,0,21,18,63,31,13,0,18,24,18,0,18,43,18,9,0,29,46,36,14,25,7,5,3,0,40,6,6,27,0,67,32,10,9,12,61,5,3,0,31,39,55,21,0,17,15,20,0,15,20,0,15,9,66,66,9,0,15,9,58,67,9,0,15,20,0,14,20,0,15,24,0,15,20,0,14,59,27,9,0,14,46,29,0,16,16,18,0,14,14,25,22,16,67,76,13,9,0,14,35,87,98,34,44,0,28,45,42,11,0,48,61,0,63,29,26,20,71,27,17,13,11,0,44,9,0,39,5,3,0,46,45,53,0,21,27,50,21,11,14,43,7,5,0,13,3,0,24,35,18,33,36,0,34,52,5,0,42,53,0,33,47,29,38,61,50,96,0,62,51,40,13,42,19,9,0,25,45,0,27,38,59,26,15,11,0,44,9,0,36,14,14,7,5,0,63,3,0,23,43,38,0,29,51,12,34,5,3,0,25,11,10,19,0,57,53,32,42,9,5,3,0,40,11,8,24,78,0,59,32,10,13,7,49,57,17,3,0,49,11,8,24,79,0,59,26,37,0,50,30,0,36,41,14,17,11,7,0,39,5,0,53,3,0,28,0,25,46,51,49,7,3,0,33,37,18,5,0,44,50,33,7,3,0,32,58,52,32,34,9,5,3,0,1,0,13,22,25,29,31,23,3,0,1,20,33,25,25,27,38,25,29,3,0,20,62,3,0,20,60,3,0,26,67,3,0,17,60,3,0,41,47,71,3,0,23,52,13,13,29,0,39,20,7,0,46,21,7,5,3,0,28,63,3,0,29,64,3,0,22,28,3,0,16,50,3,0,10,26,3,0,37,123,3,0,39,36,0,80,68,0,46,34,14,32,7,0,45,45,7,46,61,35,70,28,45,43,7,5,0,62,41,5,3,0,35,62,41,5,3,0,60,61,50,16,28,9,5,3,0,49,55,0,43,89,5,0,44,103,5,0,194,3,0,24,11,10,11,45,0,113,52,5,3,0,18,55,3,0,26,52,13,13,29,0,30,21,7,5,3,0,27,52,13,13,29,0,72,21,7,5,3,0,1,0,31,24,19,38,3,0,1,0,45,22,32,3,0,39,38,0,51,68,43,39,13,5,0,36,3,0,49,61,0,51,105,5,0,17,3,0,24,60,33,5,3,0,1,0,18,17,34,35,43,3,0,1,25,23,25,20,43,25,3,0,13,45,3,0,11,38,3,0,10,43,35,0,80,20,55,55,9,14,65,18,30,11,7,5,3,0,46,11,19,20,27,23,43,0,52,60,0,21,63,66,63,66,67,51,30,45,7,5,0,20,58,16,28,9,5,0,27,39,3,0,29,19,0,36,52,5,0,21,54,12,63,16,28,9,5,3,0,1,0,22,42,47,32,0,23,35,23,21,3,0,36,111,3,0,37,47,3,0,1,0,53,21,16,39,3,0,45,6,6,27,63,3,0,32,41,3,0,27,45,3,0,1,0,30,23,25,41,25,3,0,16,27,3,0,10,21,3,0,49,12,6,20,24,6,11,11,13,29,25,0,54,51,59,14,15,7,0,25,5,0,44,3,0,38,12,6,11,11,13,42,20,24,6,0,50,71,56,82,12,13,5,3,0,35,6,6,11,11,13,29,25,0,52,64,69,12,11,7,0,25,5,3,0,23,11,11,13,49,63,57,39,15,9,31,27,0,54,47,27,7,7,3,0,1,41,52,1,30,68,1,31,73,1,31,31,1,0,21,27,27,28,24,34,17,21,3,0,16,28,3,0,10,22,3,0,18,47,3,0,18,51,3,0,18,51,3,0,19,52,3,0,15,48,3,0,1,46,71,1,0,36,49,22,48,0,21,25,12,41,19,13,9,5,3,0,23,64,3,0,41,44,0,56,52,73,5,0,17,3,0,31,39,49,3,0,24,35,18,18,5,0,17,3,0,41,37,33,40,33,11,7,0,41,5,3,0,24,76,3,0,27,94,3,0,27,57,54,3,0,22,53,3,0,30,66,41,34,7,3,0,21,49,3,0,47,25,16,6,0,9,40,32,26,9,0,62,37,30,57,16,15,58,24,25,19,10,7,0,14,13,20,22,23,23,8,21,35,28,0,41,16,21,16,23,25,19,10,7,0,34,16,33,22,24,24,19,10,7,0,18,5,3,0,56,43,11,25,21,20,27,28,109,0,20,23,5,0,37,54,30,9,5,0,33,41,26,9,5,0,32,49,25,9,5,0,40,45,5,3,0,27,55,3,0,23,39,3,0,26,24,3,0,34,127,3,0,25,94,3,0,26,42,3,0,24,40,3,0,69,40,27,60,41,38,29,32,48,50,40,54,42,50,52,60,18,36,56,34,28,36,38,48,6,3,0,24,27,0,24,32,5,0,36,37,3,0,50,11,19,28,0,33,63,5,3,0,1,24,17,35,31,30,38,3,0,1,0,12,33,19,21,17,39,71,79,3,0,1,0,37,1,39,31,35,0,60,26,0,95,33,7,5,0,19,4,1,0,33,31,1,0,32,9,9,10,8,8,10,10,8,11,46,21,23,19,19,23,23,21,0,31,44,3,0,16,1,35,9,9,10,8,8,10,9,11,0,31,34,3,0,46,21,23,19,19,23,0,31,26,10,25,3,0,28,16,1,36,15,65,3,0,25,36,3,0,25,56,3,0,26,67,3,0,36,0,21,28,26,58,62,16,3,0,45,23,30,51,3,0,61,28,26,58,3,0,50,78,3,0,1,0,178,47,113,202,26,16,59,84,105,84,39,15,12,148,31,15,12,133,36,12,195,31,20,12,145,46,12,131,47,13,15,16,141,46,13,14,102,47,13,14,146,29,13,15,14,169,38,13,14,107,49,12,130,75,211,103,104,70,132,136,93,82,106,40,5,75,63,92,135,75,88,78,144,95,111,30,16,53,92,97,94,86,108,170,36,26,14,104,110,58,4,0,38,248,1,0,34,68,1,0,37,57,1,0,27,30,28,22,31,2,0,32,19,19,0,41,59,3,0,24,1,0,51,52,24,19,32,3,0,21,28,3,0,22,77,3,0,22,51,3,0,26,53,42,31,7,5,0,40,3,0,23,40,60,0,55,33,43,35,14,50,7,5,0,37,3,0,33,40,29,27,38,34,16,3,0,24,34,42,16,31,0,56,65,21,9,5,0,23,42,22,56,12,56,5,3,0,42,40,29,20,20,25,0,25,36,44,12,34,36,0,27,46,7,5,0,29,3,0,31,16,43,49,3,0,34,16,48,38,43,0,25,73,12,37,5,0,20,51,33,29,30,20,88,87,73,30,21,82,52,3,0,40,25,46,32,49,32,49,41,27,56,14,27,54,42,13,9,0,49,7,40,50,40,51,40,50,32,72,12,30,5,3,0,34,16,60,70,21,52,3,0,32,34,0,26,37,12,39,5,0,50,36,19,0,28,38,0,27,20,0,57,70,42,13,9,0,35,14,83,57,7,0,26,5,0,22,19,48,20,32,33,40,34,61,27,13,9,0,20,63,30,64,27,13,9,0,28,61,27,13,9,0,26,31,7,7,35,50,3,0,57,20,0,23,45,67,14,48,25,7,0,26,63,12,114,39,67,34,39,46,11,7,0,89,67,29,65,129,38,0,53,42,31,33,9,0,42,20,7,5,0,28,3,0,39,16,31,57,21,57,3,0,35,16,34,35,16,3,0,36,16,41,36,16,3,0,35,16,37,53,3,0,48,65,100,0,25,69,12,33,5,0,22,25,21,0,23,10,60,41,5,0,33,18,0,10,59,29,5,0,33,18,0,10,63,29,5,0,42,27,24,25,26,25,7,3,0,31,34,54,0,25,71,12,33,5,0,53,3,0,28,37,57,3,0,28,23,59,31,9,5,3,0,50,41,97,19,24,7,3,0,55,79,41,3,0,28,62,74,0,25,69,12,33,5,0,51,21,46,3,0,38,31,61,74,0,25,69,12,33,5,0,26,0,25,57,5,0,25,0,19,56,5,0,21,47,3,0,50,45,34,46,60,27,29,38,0,25,19,42,12,27,56,26,11,7,5,0,50,3,0,39,40,34,21,29,0,44,18,12,24,5,0,32,0,8,73,38,0,34,31,7,0,28,24,7,30,0,20,34,61,3,0,41,34,40,21,29,20,64,42,0,29,45,0,28,24,7,5,0,58,20,34,63,3,0,50,34,40,21,29,20,0,29,68,0,28,24,7,5,0,20,34,63,3,0,28,34,31,22,0,23,10,60,29,5,0,42,25,24,25,24,25,7,60,3,0,32,98,3,0,56,27,0,39,50,49,12,21,38,5,0,19,49,29,54,3,0,51,27,48,19,19,0,43,25,28,99,12,26,0,25,29,7,0,51,5,0,59,3,0,38,21,21,31,21,0,25,69,5,0,20,0,25,56,28,0,28,24,7,5,0,48,63,0,28,24,7,5,0,23,57,5,0,20,54,59,3,0,51,39,27,62,59,3,0,23,16,15,16,15,16,6,40,29,39,34,30,28,33,17,14,24,0,38,21,19,19,12,21,19,20,5,0,28,0,35,27,31,33,36,0,49,43,0,61,22,46,30,9,7,0,50,43,0,61,22,26,9,7,0,48,0,24,36,41,9,0,26,25,48,11,0,93,16,93,9,52,36,41,9,0,23,46,9,0,92,14,26,0,62,45,0,59,36,24,11,9,0,169,0,37,25,55,16,51,9,7,0,37,0,64,66,29,11,7,5,0,26,0,22,34,5,0,67,34,15,3,0,105,23,96,0,27,27,57,42,13,35,53,42,13,9,0,23,50,24,13,9,0,20,7,0,25,53,40,11,7,0,34,39,7,0,21,47,22,11,7,0,43,63,12,51,29,41,23,27,0,45,27,0,36,41,9,0,23,46,9,0,101,0,47,49,9,0,81,63,31,13,9,14,47,28,0,27,26,9,0,53,33,7,0,31,57,5,3,0,41,55,80,0,30,121,31,9,5,0,32,91,20,9,5,0,57,49,20,9,5,3,0,29,77,24,5,3,0,60,44,47,62,0,26,57,33,58,63,5,0,16,3,0,48,54,31,76,0,25,71,5,0,58,3,0,25,34,20,48,57,3,0,24,34,20,19,0,60,44,31,22,5,0,19,56,3,0,37,20,25,30,34,32,42,0,43,29,53,18,11,7,0,42,0,25,24,0,21,60,20,13,9,7,0,55,12,44,5,0,21,29,41,54,3,0,44,62,21,26,31,54,3,0,44,20,21,0,25,52,24,0,28,24,7,5,0,48,58,0,28,24,7,5,0,23,52,5,0,12,13,11,11,6,3,0,59,22,17,58,0,18,21,62,0,19,60,0,19,60,0,20,61,0,20,61,0,20,61,0,14,41,65,5,3,0,26,38,41,34,12,13,30,64,0,30,13,41,29,28,28,28,28,11,0,13,41,29,27,28,28,29,11,0,13,46,41,62,20,0,14,71,24,49,33,29,30,24,24,47,63,0,14,20,0,49,69,48,57,18,33,11,9,0,28,48,38,64,0,117,28,24,18,25,11,9,0,19,98,16,51,9,0,33,29,30,24,24,47,35,63,0,15,82,0,14,14,36,20,69,0,14,39,22,0,32,99,11,0,32,99,11,0,69,35,13,9,0,32,0,15,82,0,15,82,0,14,20,59,0,14,20,66,0,14,20,59,0,14,20,61,0,14,42,0,14,46,56,22,53,56,39,49,11,0,98,9,0,5,0,28,3,0,26,38,41,43,42,0,77,56,36,72,21,0,39,32,20,60,14,31,46,23,0,40,35,68,16,60,9,7,5,0,16,3,0,25,34,0,23,55,61,12,41,5,3,0,40,45,0,57,66,69,23,23,45,33,61,5,0,17,3,0,31,34,17,59,24,0,26,65,5,0,96,3,0,24,34,17,50,24,0,26,56,5,0,89,3,0,19,40,29,43,34,16,3,0,42,62,40,43,42,65,12,34,5,3,0,29,34,58,51,3,0,62,105,0,25,60,35,5,0,17,3,0,29,57,72,27,3,0,23,24,0,25,34,0,37,31,14,32,7,0,18,44,5,0,20,3,0,66,30,110,5,0,58,3,0,60,25,40,94,101,5,0,59,3,0,37,54,41,0,55,38,20,45,7,67,36,18,49,5,0,57,0,72,29,5,0,16,3,0,40,37,36,121,45,9,54,40,47,42,47,44,55,9,7,5,0,54,3,0,34,11,10,19,0,94,37,5,0,48,3,0,30,11,10,19,0,94,36,5,0,44,3,0,34,60,36,18,49,5,0,48,3,0,67,37,0,44,46,0,77,61,20,7,5,0,20,37,51,54,9,17,12,45,68,0,39,47,0,31,27,41,0,50,43,9,0,10,21,16,50,68,7,0,39,58,28,11,7,0,41,27,39,41,10,21,16,50,7,5,0,51,45,20,21,33,116,58,3,0,35,64,54,35,47,12,17,12,6,3,0,50,25,22,0,32,31,0,52,54,43,16,28,9,0,30,57,36,35,7,5,0,26,63,26,5,0,97,3,0,31,20,0,122,51,41,22,3,0,49,15,0,74,66,23,49,12,23,5,0,18,3,0,44,58,0,23,27,34,5,0,25,64,37,67,65,5,0,16,3,0,33,250,13,5,0,40,3,0,21,41,0,89,51,5,0,16,3,0,32,33,31,47,18,0,26,59,35,20,14,56,7,40,31,47,18,62,40,31,47,18,54,67,32,47,18,60,12,48,5,3,0,23,55,0,65,31,18,18,18,5,0,17,3,0,44,11,14,19,72,0,53,32,5,0,24,3,0,47,54,0,25,69,5,3,0,46,11,14,19,0,33,65,15,7,0,28,5,0,53,0,25,126,52,22,11,32,61,26,11,7,5,3,0,20,59,3,0,18,35,33,0,55,44,37,32,9,5,0,36,3,0,26,59,0,39,33,67,53,50,24,36,7,0,34,88,26,33,12,42,5,3,0,33,45,59,12,49,5,3,0,37,45,71,12,45,5,3,0,55,47,31,0,73,53,7,5,0,69,3,0,51,47,22,0,31,0,174,50,33,11,7,5,0,20,3,0,69,89,0,61,43,5,0,16,3,0,30,77,3,0,28,25,59,5,0,42,3,0,35,25,59,5,0,49,3,0,19,51,3,0,21,53,3,0,34,67,3,0,94,26,49,5,0,27,0,25,71,5,0,101,0,41,35,0,61,61,20,11,7,92,41,0,61,61,20,11,7,5,3,0,67,26,49,5,0,27,0,25,71,5,0,74,3,0,25,32,0,44,76,5,0,33,18,47,0,10,38,59,0,29,75,16,37,9,0,67,29,5,3,0,35,42,61,0,28,30,0,61,58,19,11,43,58,19,11,7,5,3,0,41,45,3,0,113,24,47,5,0,25,23,0,40,64,45,5,0,120,0,25,59,5,3,0,39,23,40,50,19,11,7,0,36,58,19,11,7,0,28,5,0,25,60,41,58,17,9,5,0,52,49,17,9,5,0,33,17,3,0,47,67,0,115,52,31,9,5,0,16,3,0,34,35,50,5,0,49,3,0,52,120,70,3,0,42,30,20,0,25,22,40,20,5,0,15,34,13,12,13,0,43,39,7,0,68,20,31,7,5,0,56,3,0,90,42,33,0,43,39,35,48,37,7,5,0,26,0,69,50,0,87,38,49,52,14,40,36,49,7,12,86,56,49,14,31,58,26,40,13,9,0,40,36,7,0,35,49,14,25,62,7,5,0,63,0,54,66,21,9,5,0,54,84,5,0,69,84,5,0,68,3,0,22,30,14,42,0,14,40,5,3,0,45,27,0,61,69,5,0,52,3,0,26,33,0,25,62,37,5,3,0,49,25,66,43,55,60,5,0,63,3,0,27,59,3,0,57,13,0,21,12,0,71,33,100,38,13,15,21,57,0,79,22,7,5,0,63,23,0,42,25,44,34,0,66,93,85,66,24,11,116,73,61,45,62,31,16,33,0,108,45,33,84,32,15,11,0,28,9,0,37,7,0,48,35,24,7,0,28,37,31,7,0,65,42,70,26,9,5,0,71,3,0,20,25,42,68,45,42,96,62,57,47,24,9,37,54,107,5,0,34,3,0,28,60,3,0,44,74,27,12,53,5,3,0,55,93,13,5,0,50,54,53,28,11,7,5,0,43,3,0,50,121,3,0,54,111,18,56,25,68,53,87,39,121,60,106,59,0,23,37,26,7,0,24,38,27,7,0,40,5,0,68,3,0,69,55,48,0,20,35,20,7,0,18,56,25,70,22,68,27,51,71,56,25,42,81,24,70,70,83,9,0,24,56,27,7,5,0,83,3,0,27,21,0,52,92,5,0,31,34,3,0,57,54,35,39,60,3,0,31,59,0,66,40,26,23,13,5,0,38,3,0,28,59,0,39,26,13,5,0,35,3,0,32,56,0,36,54,36,9,5,0,20,3,0,22,67,38,56,33,11,7,0,38,47,39,13,5,0,36,64,0,23,54,38,11,7,0,35,13,5,0,36,3,0,21,11,9,19,38,0,86,34,5,0,71,75,0,35,43,5,0,117,44,5,0,35,39,5,0,17,3,0,30,57,0,21,52,36,9,5,3,0,49,13,14,6,60,14,17,14,7,3,0,59,262,13,21,3,0,48,13,14,6,59,14,15,16,7,3,0,60,12,6,70,15,14,7,3,0,24,41,0,60,0,30,15,9,69,0,28,20,29,37,28,14,11,0,18,28,25,12,9,0,15,9,68,0,28,20,29,37,28,14,11,0,18,28,25,12,9,0,14,14,9,67,0,28,20,30,37,28,14,11,0,18,28,25,12,9,0,14,16,26,23,10,5,3,0,23,36,42,61,19,9,6,12,9,10,6,3,0,65,11,18,16,0,32,13,5,0,40,63,5,3,0,19,13,16,6,32,21,25,24,24,26,6,34,0,28,25,33,14,7,0,42,13,11,12,35,33,0,30,17,7,0,38,54,17,21,72,18,11,7,0,38,56,17,21,18,11,7,0,32,23,17,21,18,8,25,0,26,23,11,81,41,90,18,11,0,22,11,80,41,88,18,11,0,22,11,80,41,88,18,11,0,23,11,80,11,0,20,11,35,29,81,22,0,28,80,22,0,22,98,13,11,7,0,27,24,7,5,0,12,14,23,6,3,0,63,12,6,42,30,47,32,69,48,73,18,11,7,0,30,12,46,73,18,11,7,0,32,5,3,0,29,12,6,46,0,46,75,32,16,9,5,0,11,11,19,16,0,96,54,32,17,30,9,5,0,17,3,0,26,29,33,57,14,7,19,11,14,23,30,15,18,7,47,0,27,21,33,46,23,56,0,20,33,45,23,55,0,20,33,100,18,11,23,55,0,20,48,23,55,0,14,9,31,30,27,59,12,0,36,57,55,55,63,0,67,27,45,104,22,15,27,59,72,60,79,25,42,17,13,0,50,27,60,72,60,78,25,42,17,13,0,49,27,59,18,65,26,22,15,27,11,9,5,3,0,34,38,17,56,52,3,0,25,39,0,45,56,50,5,0,17,3,0,39,71,3,0,3,0,18,18,17,11,17,10,10,17,18,17,18,19,16,19,17,16,17,17,18,16,16,16,17,16,19,17,17,18,18,17,19,18,17,17,18,19,19,19,19,19,19,18,19,17,18,18,19,19,19,18,17,19,19,18,17,16,19,19,19,18,19,17,18,19,19,19,18,17,19,18,18,19,19,18,19,17,18,18,19,19,19,18,17,19,19,18,17,16,19,19,19,18,19,17,19,19,19,19,18,17,19,18,17,18,18,19,19,17,17,17,18,18,17,18,18,20,17,16,18,17,18,19,15,15,15,20,15,16,18,16,20,16,16,16,18,18,17,18,18,20,17,16,18,17,18,19,15,15,15,20,15,16,19,18,16,20,16,16,16,18,21,18,16,17,17,19,17,16,16,16,18,18,18,18,18,18,18,18,19,19,17,19,19,18,18,19,19,18,18,17,18,19,17,18,20,17,17,17,17,17,18,17,17,17,17,17,19,17,18,18,18,17,18,15,17,16,18,19,18,17,18,16,16,15,16,16,16,19,16,17,18,15,18,15,15,16,16,17,17,17,18,19,17,17,18,18,19,19,17,17,16,19,18,19,17,2,0,45,86,32,18,75,81,142,23,15,14,104,91,58,133,4,0,29,103,1,0,38,40,23,3,0,44,58,3,0,46,91,3,0,62,1,0,51,18,17,36,0,14,42,60,33,11,7,0,55,0,19,16,17,52,61,31,43,13,0,46,11,0,62,44,0,16,62,38,38,16,0,16,17,0,16,30,64,45,40,18,29,11,0,7,5,3,0,33,53,12,21,0,68,23,42,12,36,5,0,25,42,15,3,0,24,17,38,0,14,42,53,33,11,7,0,55,30,0,22,60,36,36,33,60,42,36,14,25,7,5,0,58,38,3,0,19,38,0,53,23,21,0,56,19,25,7,0,70,0,77,25,47,7,12,20,23,0,115,25,7,0,17,64,38,25,0,21,24,9,7,5,0,30,15,3,0,17,11,33,0,8,51,48,0,74,3,0,24,34,0,26,35,49,50,12,24,5,0,16,50,3,0,28,38,41,43,35,54,26,42,54,3,0,25,38,41,45,0,44,18,5,0,26,59,28,51,61,5,0,16,3,0,28,13,0,30,13,32,37,20,68,0,60,50,20,13,9,0,20,0,15,15,36,0,14,57,33,11,5,3,0,29,92,78,3,0,29,16,45,34,19,51,3,0,54,24,55,12,48,35,5,0,37,19,59,3,0,23,34,0,24,35,18,22,53,36,21,57,5,0,46,69,49,3,0,48,54,0,26,23,57,5,0,43,54,3,0,41,26,0,49,48,5,0,33,36,21,54,3,0,48,54,0,26,23,57,5,0,43,21,54,3,0,41,54,24,77,30,0,38,26,34,19,40,43,24,0,31,81,29,13,0,70,18,0,19,48,18,0,17,13,44,43,26,0,35,62,22,84,15,0,20,13,0,18,36,9,7,0,97,57,28,11,77,56,29,66,11,78,100,58,31,68,13,9,7,5,0,37,44,44,12,43,43,5,0,29,0,25,64,31,9,5,0,115,3,0,21,38,41,16,54,3,0,26,11,13,19,45,3,0,38,26,60,33,36,80,29,36,12,54,5,3,0,15,41,53,3,0,26,38,0,35,33,5,0,63,36,34,7,0,24,25,37,7,0,69,40,7,5,0,107,23,35,5,0,40,3,0,27,11,14,10,19,0,42,42,44,30,33,30,46,0,76,22,85,14,38,45,7,12,71,5,3,0,3,0,37,24,19,27,27,32,29,40,3,0,1,0,51,22,38,3,0,39,38,0,50,43,41,13,5,0,36,0,39,45,70,45,7,0,28,5,0,64,75,64,3,0,49,32,45,67,52,36,7,0,18,5,0,68,36,49,14,21,7,5,0,64,18,5,0,51,3,0,24,45,11,10,11,0,88,33,5,3,0,1,0,89,0,21,18,46,3,0,11,1,0,20,11,35,3,1,0,51,39,14,95,38,16,96,102,81,22,8,39,80,82,183,97,23,8,52,90,99,38,12,48,25,12,46,31,9,44,63,65,103,76,29,13,86,88,38,12,83,86,91,84,96,35,12,66,29,20,93,88,89,98,101,130,89,137,105,88,38,12,83,117,142,128,98,87,94,47,21,124,84,148,128,145,145,106,104,72,82,90,107,41,8,105,4,0,37,18,15,28,0,19,32,0,18,31,0,17,30,0,18,31,0,18,31,0,18,31,0,18,31,0,21,34,0,19,32,0,12,23,3,1,0,39,85,1,0,58,21,34,3,0,20,46,3,0,30,164,3,0,34,16,43,3,0,68,46,23,5,0,38,0,52,76,25,7,0,74,24,7,5,0,21,3,0,20,13,21,24,33,6,60,51,52,18,43,11,7,6,0,57,87,52,18,33,11,7,6,0,14,13,16,21,156,27,0,41,37,63,25,20,13,16,65,63,65,44,9,14,61,50,25,20,13,16,65,65,67,67,66,65,9,0,34,7,0,82,58,23,18,11,7,5,3,0,28,19,25,25,29,0,35,29,0,31,29,0,39,30,5,0,35,3,0,35,22,0,44,34,5,0,18,3,0,65,99,3,0,86,22,30,0,14,42,14,7,0,28,37,0,28,25,7,0,27,0,25,51,17,7,0,42,14,7,0,26,24,7,0,23,5,0,30,51,5,0,18,3,0,90,26,20,23,14,24,7,5,0,86,0,18,21,12,22,5,0,18,3,0,23,34,20,20,0,27,58,31,9,5,0,41,20,0,23,48,5,0,25,56,5,0,49,3,0,48,58,0,26,48,25,60,56,5,0,18,3,0,26,34,45,0,58,56,5,0,52,3,0,33,16,43,29,60,25,52,3,0,25,34,16,47,3,0,22,34,20,0,25,47,12,47,5,0,48,3,0,26,34,48,50,47,52,3,0,30,25,42,5,3,0,27,34,0,44,18,12,24,5,0,33,15,6,145,0,35,48,16,9,5,0,43,70,5,0,63,3,0,35,50,16,54,0,39,43,35,21,9,5,0,25,3,0,43,51,35,43,63,20,65,0,30,88,41,88,5,3,0,36,57,147,64,22,28,11,7,0,21,7,3,0,32,52,22,5,3,0,38,35,38,39,3,0,37,16,0,45,18,28,5,0,17,3,0,34,96,23,5,0,19,38,53,30,19,27,49,41,38,53,3,0,52,43,25,0,43,21,57,18,11,7,0,29,0,42,62,38,11,7,0,39,40,37,45,0,34,43,45,40,13,0,55,68,42,15,11,9,41,45,45,40,13,16,54,0,49,68,42,15,11,0,80,72,42,15,11,0,54,68,42,15,11,9,0,36,63,37,13,9,14,31,7,0,58,12,31,45,51,47,40,62,5,3,0,23,34,0,43,77,5,0,25,34,18,0,45,84,14,52,66,7,5,0,27,21,37,106,7,52,0,14,17,5,0,33,0,150,32,35,5,0,72,3,0,24,34,51,50,3,0,30,19,87,19,19,3,0,27,16,0,23,36,5,0,33,18,5,0,25,19,5,0,16,0,33,19,5,0,16,26,3,0,32,34,48,53,52,3,0,23,34,19,0,25,39,18,33,41,27,5,0,19,59,71,19,0,25,39,18,22,30,27,5,0,48,21,19,49,3,0,22,34,125,36,31,46,27,0,11,12,22,0,146,57,25,11,7,0,134,0,34,49,32,7,0,54,100,0,42,63,25,11,7,7,48,3,0,29,11,22,14,19,30,34,34,33,0,18,53,38,0,107,42,14,54,18,11,33,7,0,51,64,26,58,45,65,5,0,15,60,37,53,5,0,16,3,0,30,34,20,45,20,56,3,0,52,34,0,39,33,32,18,5,0,35,39,3,0,28,34,0,27,32,17,17,17,16,16,38,0,16,34,7,9,0,50,3,0,32,34,45,50,3,0,31,53,45,3,0,40,51,0,66,56,12,25,5,3,0,25,30,15,15,15,14,14,45,0,14,39,40,45,0,65,36,11,0,48,56,9,0,14,0,14,57,0,14,39,0,14,40,0,13,126,0,13,39,0,14,47,0,14,14,49,0,14,9,17,16,25,0,70,131,0,76,44,26,53,13,0,47,11,9,5,0,28,3,0,30,42,0,58,26,48,32,23,52,14,48,31,44,23,60,7,5,0,16,3,0,25,34,38,16,29,61,0,34,50,5,0,51,3,0,42,39,25,25,15,0,14,49,18,11,5,3,0,22,34,31,43,57,75,48,3,0,33,93,140,3,0,72,34,50,21,0,8,41,33,0,52,22,5,0,23,39,3,0,37,118,3,0,30,115,3,0,29,25,18,5,0,100,3,0,26,63,18,18,5,0,24,13,14,21,47,0,11,38,52,25,21,7,5,0,24,18,13,14,21,47,0,11,43,52,26,21,7,5,0,17,3,0,42,16,0,43,18,5,0,38,81,20,7,0,27,20,0,29,22,9,7,5,0,17,3,0,53,32,33,31,36,85,0,38,74,0,54,49,30,37,71,16,67,43,9,0,45,54,7,0,121,0,35,23,54,9,0,52,31,35,68,54,7,0,53,49,33,29,66,52,7,3,0,45,86,3,0,30,69,3,0,20,39,3,0,32,38,0,66,18,16,5,3,0,33,34,19,5,0,47,16,0,65,19,5,0,22,53,39,31,9,5,0,16,3,0,64,25,36,44,7,50,3,0,17,30,50,0,56,18,5,0,44,26,56,20,39,20,40,54,3,0,36,66,3,0,31,41,69,5,0,25,72,55,78,5,0,43,3,0,26,73,50,31,9,5,0,34,0,56,0,63,20,45,52,3,0,32,49,129,0,32,52,29,13,9,5,0,25,3,0,40,34,47,0,25,56,5,0,66,3,0,54,50,31,48,0,45,39,55,12,21,49,31,9,5,0,58,0,23,59,5,0,34,72,57,59,3,0,37,37,48,47,60,22,0,67,38,20,59,7,0,32,7,21,59,3,0,21,42,41,0,9,18,15,38,5,3,0,16,40,29,0,9,18,15,36,5,3,0,29,71,3,0,32,60,3,0,25,53,3,0,25,32,11,32,7,3,0,23,34,82,0,23,56,5,0,49,3,0,49,44,48,31,37,82,19,95,19,54,3,0,24,34,34,19,73,22,50,3,0,61,37,0,18,55,5,0,23,37,60,24,12,40,34,44,28,24,5,0,56,3,0,49,33,25,39,33,37,12,24,5,0,24,40,34,44,28,24,12,23,5,0,56,3,0,50,38,37,48,20,58,0,93,53,27,9,5,0,43,21,62,3,0,33,69,3,0,28,118,3,0,36,34,31,20,0,27,30,5,0,43,20,62,3,0,18,37,20,23,15,3,0,25,58,57,52,23,3,0,17,37,23,0,51,20,12,25,23,5,3,0,27,34,13,5,0,36,13,0,32,21,19,5,0,42,29,28,62,7,0,29,28,50,7,0,30,50,23,11,7,0,30,66,7,0,49,69,30,78,9,0,24,50,22,23,11,7,0,30,63,23,11,34,7,0,41,69,7,7,3,0,33,77,3,0,42,24,21,9,59,0,28,39,31,11,0,16,9,0,20,28,44,38,27,28,24,47,28,32,61,9,0,14,0,14,63,5,3,0,41,20,22,105,55,9,0,14,0,20,47,32,70,58,66,11,9,0,14,0,23,85,64,9,0,14,0,18,85,56,9,0,14,5,3,0,31,15,53,18,18,5,0,36,3,0,59,26,23,5,0,72,45,47,56,57,38,71,22,18,7,66,0,15,23,5,0,54,3,0,38,34,23,5,0,39,3,0,26,34,64,22,97,8,0,35,47,16,9,5,0,20,65,3,0,26,54,3,0,30,50,44,3,0,55,38,41,22,25,25,0,39,26,29,17,84,9,45,35,35,0,80,58,22,11,7,5,0,42,44,73,0,48,54,0,30,35,7,0,58,43,43,0,74,63,16,11,7,0,25,56,5,0,28,35,5,0,15,3,0,27,123,3,0,60,25,70,5,0,168,0,68,42,13,5,0,78,61,16,9,0,25,71,15,7,5,0,59,3,0,37,32,53,12,54,5,3,0,37,27,75,55,33,11,7,7,3,0,42,46,20,3,0,27,47,0,42,53,5,0,16,3,0,60,58,44,18,69,42,71,5,0,31,0,60,20,26,20,7,0,56,18,5,0,43,31,52,58,92,0,29,32,11,9,0,58,27,70,0,28,50,60,30,11,0,41,74,60,48,0,44,45,13,0,78,56,95,50,26,11,9,0,26,9,0,33,50,7,0,32,5,0,74,3,0,27,43,60,61,47,20,9,0,27,45,7,5,0,34,3,0,58,106,64,29,0,58,0,19,37,14,57,7,0,46,26,73,5,0,72,3,0,63,39,72,5,3,0,28,0,21,30,0,80,35,0,98,33,20,33,7,0,68,57,7,5,0,47,0,141,67,22,9,5,0,22,3,0,21,25,18,0,70,33,20,14,34,7,0,61,30,26,49,23,59,40,24,33,39,23,67,12,66,20,33,14,34,7,0,37,5,3,0,21,66,3,0,34,33,35,18,26,39,17,5,0,26,72,32,5,0,48,3,0,66,11,22,19,105,46,0,16,9,10,36,26,0,52,68,18,11,250,98,18,11,7,5,0,23,3,0,44,63,36,22,48,19,9,5,0,33,59,5,0,33,72,32,5,0,58,3,0,25,68,3,0,41,39,41,49,7,0,32,7,3,0,29,70,3,0,46,114,27,23,34,41,7,0,52,43,20,20,0,57,62,40,13,9,0,54,14,85,7,6,0,25,64,12,41,5,3,0,68,54,0,14,31,0,28,56,20,11,7,0,33,61,21,40,11,7,0,27,55,20,11,7,0,28,56,20,11,7,0,13,5,0,57,62,18,9,5,0,26,33,52,20,11,7,5,0,75,3,0,46,34,47,0,50,51,24,9,5,0,49,50,24,9,5,3,0,40,102,62,3,0,34,49,48,3,0,67,64,83,5,0,89,0,23,25,76,7,0,18,5,0,52,23,3,0,44,58,0,23,27,34,5,0,25,64,37,65,67,5,0,16,3,0,32,65,78,5,0,38,41,46,0,88,68,31,9,5,0,60,113,34,0,118,31,5,0,20,63,33,5,0,23,3,0,47,65,13,5,0,99,59,61,3,0,38,41,27,5,0,49,41,3,0,28,44,0,56,60,31,9,5,0,42,13,11,15,59,32,122,9,5,0,42,3,0,35,24,54,16,9,5,0,29,59,17,36,9,5,0,44,49,3,0,94,59,0,42,57,26,9,5,0,11,22,10,15,0,56,44,19,12,9,5,0,63,101,3,0,67,59,63,74,3,0,48,48,69,55,3,0,25,32,0,64,73,5,0,34,65,5,3,0,36,59,61,43,3,0,45,59,61,52,3,0,26,33,0,89,27,5,0,49,0,15,36,37,5,3,0,49,25,53,5,0,63,3,0,29,69,0,14,12,17,0,71,33,72,38,13,15,21,57,0,79,22,7,5,0,67,45,5,0,23,40,42,62,0,52,51,0,119,16,7,0,104,62,7,0,43,0,182,56,0,36,7,0,18,14,0,41,76,24,5,0,15,37,77,48,5,0,46,33,22,5,0,21,35,76,24,5,0,59,38,27,5,0,63,40,83,137,3,0,38,20,0,171,51,16,9,5,3,0,40,51,41,12,56,5,3,0,20,25,45,73,66,26,9,33,0,27,56,38,7,5,0,34,3,0,39,23,94,48,19,11,7,0,28,5,0,49,42,33,17,3,0,33,24,34,61,0,33,20,0,14,51,5,3,0,37,24,34,73,0,33,47,0,37,69,0,28,33,29,68,20,0,14,47,5,3,0,52,35,28,33,29,37,68,20,0,14,47,5,3,0,47,21,33,39,40,89,89,66,3,0,22,30,14,42,0,14,40,5,3,0,38,43,68,0,27,62,44,20,7,0,32,5,0,52,3,0,30,94,18,19,12,46,5,3,0,19,51,3,0,21,71,3,0,30,50,0,115,54,31,9,5,0,16,3,0,26,28,24,36,7,0,24,36,7,5,0,40,3,0,18,11,10,19,0,22,26,26,29,26,26,5,3,0,15,11,10,19,0,22,26,27,16,5,0,16,3,0,30,47,31,26,0,26,36,55,16,0,30,31,51,57,18,64,22,15,11,0,16,7,5,0,48,3,0,29,57,72,27,3,0,28,25,65,5,0,42,3,0,27,59,3,0,29,69,3,0,41,43,99,61,5,0,55,3,0,45,70,61,33,71,55,3,0,27,48,49,0,15,34,35,5,0,17,3,0,26,60,39,0,9,18,15,56,5,3,0,29,58,49,0,9,45,15,54,5,3,0,36,25,27,48,40,42,29,71,18,11,54,7,12,32,5,3,0,24,46,0,26,85,0,20,15,13,19,62,21,124,11,7,5,0,18,3,0,30,44,25,3,0,33,55,3,0,11,45,41,5,0,25,3,0,19,45,41,5,0,33,3,0,73,39,75,54,5,0,30,87,3,0,90,47,83,59,5,0,35,104,3,0,80,56,57,37,18,33,33,35,0,32,45,0,34,48,0,58,34,29,87,36,16,31,36,9,63,34,85,14,32,27,7,61,30,82,5,0,55,114,15,9,5,0,33,35,59,56,0,54,92,5,0,30,62,5,0,19,61,5,3,0,3,0,44,59,9,13,12,17,0,130,17,3,0,62,1,0,56,52,59,40,62,1,0,62,54,56,4,60,34,26,36,18,27,46,27,23,56,5,3,0,41,76,37,68,3,0,26,74,35,5,0,48,3,0,19,84,3,0,21,86,3,0,27,66,3,0,22,84,3,0,30,70,3,0,22,84,36,18,5,0,44,3,0,18,31,18,5,0,33,19,5,0,30,39,0,33,18,5,0,17,3,0,29,64,44,3,0,40,80,58,5,0,25,24,62,18,47,55,5,0,21,26,53,3,0,16,85,3,0,21,86,3,0,45,70,16,30,40,60,0,22,63,30,46,23,69,43,14,65,33,11,7,12,55,5,0,31,104,39,3,0,21,60,61,0,52,27,25,76,61,5,0,43,39,37,77,35,3,0,30,25,41,0,52,93,22,9,7,5,0,44,3,0,42,56,18,5,0,64,3,0,21,11,16,13,0,50,88,5,0,28,33,3,0,21,60,61,25,0,52,73,23,56,5,0,56,34,57,36,0,23,69,64,5,0,30,43,21,54,3,0,23,91,3,0,19,60,53,36,9,5,3,0,3,0,59,22,25,54,36,18,0,47,64,61,50,0,29,28,9,7,0,43,5,3,0,19,72,3,0,3,0,45,117,52,59,28,32,58,12,44,0,40,21,7,0,39,58,23,9,7,0,18,5,5,1,49,41,32,32,12,29,5,5,0,40,29,3,0,14,1,66,49,54,35,41,50,89,5,0,100,0,41,296,61,69,5,3,0,71,67,3,0,80,76,3,0,47,78,0,49,76,116,5,0,69,24,8,0,30,47,84,7,0,46,83,7,0,84,0,47,69,151,7,0,52,162,7,59,144,5,3,0,47,5,51,89,7,0,105,0,62,186,7,5,3,0,146,162,3,0,89,124,43,16,3,1,22,9,6,7,13,14,14,2,51,0,24,23,28,17,15,35,36,37,33,32,14,19,16,16,40,23,21,2,27,21,0,50,79,3,0,17,1,0,87,0,47,105,2,0,36,37,34,0,34,0,117,58,0,18,50,67,20,13,63,61,20,13,9,14,59,18,11,7,5,0,24,24,27,26,31,25,14,0,30,36,0,94,27,0,42,36,69,0,126,50,45,15,11,9,0,14,0,28,9,17,16,17,19,0,40,86,11,0,42,16,9,0,27,9,43,36,36,40,16,9,0,29,35,130,14,0,34,36,52,33,13,9,0,40,29,44,14,0,37,48,14,5,0,16,3,0,57,39,116,20,9,58,44,16,9,12,37,5,3,0,55,30,0,14,37,0,66,14,75,34,32,38,49,0,138,37,9,0,31,48,32,13,9,0,14,7,5,0,35,30,0,16,38,0,41,48,19,13,9,7,5,0,20,3,0,33,24,24,27,26,31,25,20,0,30,9,50,53,124,13,9,0,28,45,0,27,48,0,29,94,0,34,37,0,37,50,0,30,38,26,0,14,21,5,3,0,51,20,3,0,55,57,0,34,70,49,7,5,3,0,54,34,16,99,50,3,0,22,34,16,44,48,3,0,22,30,13,9,40,22,61,55,9,0,13,45,5,0,34,3,0,70,20,21,0,30,18,22,14,24,7,0,41,24,35,14,34,78,0,55,29,16,9,14,30,0,61,60,35,13,9,0,32,49,9,0,76,7,5,0,16,3,0,34,16,43,34,48,3,0,26,34,11,11,22,14,19,0,22,49,30,58,65,41,12,35,5,0,24,80,16,3,0,55,42,44,73,0,28,35,5,0,15,3,0,39,17,3,0,47,36,0,80,77,68,35,54,21,48,54,3,0,47,19,32,30,30,44,31,33,13,3,0,25,17,24,25,30,63,36,6,26,0,33,48,0,38,34,58,24,11,7,0,13,5,0,43,93,13,12,21,0,25,37,40,26,13,16,33,9,7,0,13,5,0,185,34,0,29,99,35,23,58,35,33,13,29,9,9,13,5,0,129,172,0,53,18,31,27,18,23,35,28,61,11,7,5,3,0,118,142,38,48,13,32,11,14,55,13,30,11,7,5,0,48,46,10,9,5,0,37,54,5,3,0,50,75,3,0,31,91,55,25,9,5,3,0,30,26,19,5,0,105,29,7,16,3,0,1,0,43,61,104,13,5,0,25,66,0,31,21,42,17,11,15,7,0,26,34,60,63,11,16,45,19,13,9,7,0,27,5,3,0,48,86,3,0,19,30,21,40,0,27,24,5,0,37,40,36,0,30,32,5,0,16,3,0,52,21,85,5,0,80,3,0,44,38,41,60,0,25,56,32,0,28,74,7,0,46,57,5,0,16,3,0,67,96,3,0,64,93,3,0,64,25,0,165,3,0,57,38,41,0,33,36,37,0,29,69,9,0,20,7,5,0,28,0,30,34,12,51,33,5,0,11,10,19,0,49,53,5,0,63,0,25,65,5,0,45,56,40,31,0,27,50,0,113,52,9,0,121,56,9,0,111,62,51,9,14,25,7,0,18,43,28,57,9,18,37,60,5,0,16,3,0,46,38,41,57,56,0,60,18,5,0,80,3,0,67,23,56,23,55,22,47,60,5,0,16,3,0,49,97,3,0,37,38,41,57,68,0,60,18,5,0,58,3,0,58,35,48,0,95,48,19,31,11,7,0,60,5,0,31,0,75,45,0,27,24,48,0,54,24,11,0,64,9,0,66,25,41,47,35,0,23,45,9,0,20,0,62,29,14,66,71,37,15,11,9,0,57,94,39,0,87,62,35,13,9,0,75,7,5,0,16,3,0,34,38,41,0,17,14,71,22,55,46,15,0,23,55,70,60,41,19,15,0,117,15,0,24,62,56,15,9,0,14,55,5,3,0,38,38,41,128,3,0,23,20,0,11,14,19,41,83,0,100,50,21,23,9,5,0,56,42,20,9,5,0,16,3,0,36,25,61,25,9,5,3,0,50,38,41,42,0,43,18,55,59,18,5,0,34,34,0,41,39,25,0,27,46,7,0,38,18,55,60,0,42,34,0,40,43,20,13,56,49,20,13,9,7,0,20,61,56,7,5,0,69,0,18,13,12,21,138,0,51,60,22,11,51,7,5,0,16,3,0,50,17,37,53,9,18,5,0,38,41,61,76,0,75,56,39,26,27,18,28,60,9,5,0,16,3,0,44,38,41,57,57,0,60,18,5,0,58,3,0,54,19,33,55,17,6,0,8,75,36,26,0,16,3,0,60,11,10,19,0,34,70,39,81,5,0,25,0,22,55,26,20,7,0,50,18,5,0,37,93,12,35,0,49,85,14,26,20,7,5,3,0,68,54,23,29,0,19,45,21,33,34,46,22,11,7,0,76,46,12,49,5,0,36,31,63,12,55,5,3,0,55,54,23,16,41,22,102,3,0,78,72,35,45,16,52,23,11,22,25,14,0,26,55,51,5,0,30,31,5,0,19,61,12,135,5,0,57,0,71,24,58,47,34,96,12,28,62,36,7,0,39,5,0,66,16,3,0,52,67,3,0,66,54,20,42,0,36,53,20,9,5,0,61,3,0,30,217,3,0,40,40,40,9,52,50,11,9,7,0,69,44,19,108,11,14,43,45,57,21,15,11,9,7,5,0,89,3,0,107,20,21,80,50,0,30,18,22,14,24,0,32,108,64,44,15,11,0,29,59,11,0,22,16,9,7,0,86,5,0,74,16,3,0,27,56,3,0,49,20,0,49,20,134,0,29,49,5,0,39,59,5,0,16,3,0,21,38,41,80,3,0,38,13,11,10,19,0,19,14,33,0,14,32,20,0,29,52,9,0,30,48,42,13,9,0,47,0,14,32,20,55,0,14,9,55,9,0,14,14,9,28,59,9,0,15,58,0,15,57,0,15,58,0,15,57,0,14,39,0,14,46,0,14,47,0,14,9,78,69,9,0,13,13,9,81,9,0,13,9,74,9,0,13,13,9,82,9,0,13,9,76,9,0,14,50,0,14,31,0,14,32,34,44,0,14,42,0,14,14,41,0,14,9,34,22,29,62,0,51,59,18,54,24,15,11,9,0,15,9,50,36,44,13,41,9,0,14,9,65,9,0,14,9,65,9,0,14,14,9,50,9,0,14,14,14,9,84,0,29,58,18,36,11,9,0,14,9,76,0,69,64,18,18,36,11,9,0,14,38,108,48,11,0,78,53,44,0,82,19,18,27,0,30,57,26,83,49,52,83,22,26,15,37,57,66,13,11,0,75,24,84,11,0,20,16,34,9,0,5,3,0,70,78,0,23,39,41,23,23,80,52,12,30,5,3,0,37,34,41,38,16,78,3,0,65,82,101,0,60,104,22,11,7,0,36,45,12,59,21,40,9,5,3,0,70,27,18,9,54,49,14,9,0,19,32,0,14,61,22,11,5,3,0,38,71,44,26,0,39,52,36,9,5,0,20,50,16,3,0,26,39,0,18,46,5,0,25,16,40,27,0,18,40,36,28,12,36,5,0,34,49,3,0,16,34,16,0,98,42,16,9,81,42,16,9,5,0,63,43,16,9,5,0,42,3,0,22,34,155,34,16,46,48,3,0,33,34,16,0,52,81,18,0,28,42,51,26,7,0,56,5,0,36,3,0,47,21,47,47,0,61,50,26,26,43,9,5,0,49,3,0,33,75,16,0,33,27,52,16,11,7,0,36,5,0,52,3,0,41,43,77,23,16,39,3,0,29,34,54,3,0,29,53,3,0,30,54,3,0,29,53,3,0,30,54,3,0,29,65,33,29,16,3,0,30,34,23,16,51,3,0,22,34,16,48,3,0,50,38,41,12,16,52,72,80,45,50,43,46,24,55,21,23,30,0,29,18,22,14,127,0,29,54,16,9,7,0,27,52,55,45,108,0,44,16,9,14,94,7,5,0,49,20,66,74,57,0,100,58,47,34,60,23,5,0,32,0,27,50,5,0,70,56,58,46,0,30,59,33,49,46,12,24,5,0,57,3,0,51,55,55,56,89,24,5,0,65,44,64,27,3,0,28,38,3,0,20,23,18,5,3,0,44,16,3,0,25,34,16,0,25,76,18,68,0,66,48,22,11,7,0,22,5,0,31,3,0,18,41,0,40,53,23,9,51,48,36,9,30,48,31,9,5,0,33,50,3,0,27,23,42,34,28,12,26,5,3,0,34,11,12,15,10,11,19,32,90,0,25,22,58,57,11,7,5,0,34,39,36,18,72,63,6,23,16,45,101,16,3,0,27,34,26,53,27,0,26,62,38,69,5,0,52,3,0,31,34,3,0,68,19,42,5,0,80,50,41,21,34,25,16,0,32,18,22,14,24,0,32,49,16,9,7,0,15,0,22,43,14,65,71,7,0,86,50,18,11,7,0,27,47,7,0,33,5,0,16,74,34,0,20,29,26,32,5,0,39,3,0,37,66,79,3,0,34,129,3,0,48,24,0,25,41,57,33,11,7,0,30,47,7,5,0,34,24,27,17,17,0,25,47,32,5,0,28,35,22,5,0,24,0,30,34,37,5,0,35,47,47,66,0,78,31,0,65,23,52,35,37,7,0,51,26,52,28,0,29,29,50,41,25,13,22,9,0,37,7,5,0,115,16,3,0,45,41,3,0,40,25,3,0,35,16,0,70,61,0,39,89,18,9,5,0,125,49,18,9,5,3,0,72,21,79,41,18,5,0,51,39,27,25,88,5,3,0,81,27,0,23,145,53,5,0,59,77,0,22,91,34,55,0,42,64,72,11,16,58,34,13,9,0,91,14,47,7,0,28,53,5,3,0,113,177,33,16,3,0,48,22,27,48,21,12,13,13,13,21,14,0,45,41,14,23,19,50,18,0,19,49,18,0,19,49,18,0,19,50,18,0,19,13,56,0,48,65,68,17,22,59,35,19,15,0,44,20,13,0,18,36,9,7,0,21,0,25,30,7,5,0,20,3,0,31,19,27,27,3,0,104,37,35,41,132,65,51,54,26,22,16,3,0,69,18,42,5,0,80,50,34,16,83,74,82,3,0,65,51,46,0,49,24,5,0,32,37,72,0,17,47,70,5,0,46,39,26,22,66,60,3,0,62,73,3,0,60,50,32,3,0,62,59,53,0,23,42,60,12,42,42,29,73,74,63,0,50,59,111,13,9,0,66,134,0,43,73,9,9,28,36,5,0,32,3,0,27,38,3,0,29,56,59,5,0,16,3,0,81,55,30,30,6,0,38,29,29,26,21,25,9,5,3,0,71,20,21,0,30,18,22,14,24,0,32,29,59,11,0,22,16,9,7,0,73,5,0,16,3,0,72,12,0,25,24,44,39,25,11,7,0,17,32,50,53,111,32,46,0,30,58,33,11,7,0,36,18,57,12,83,5,0,15,3,0,28,34,63,45,3,0,32,21,35,47,3,0,37,13,11,15,10,19,0,43,30,12,30,5,0,67,0,18,27,31,7,12,68,5,0,16,16,3,0,63,27,13,5,0,35,13,5,0,27,36,51,22,11,15,7,34,36,51,22,11,15,7,0,37,64,22,11,15,7,0,60,20,9,38,55,45,22,11,15,7,5,0,43,44,21,21,9,13,5,0,123,0,44,49,21,26,9,5,3,0,20,45,0,75,18,5,0,17,3,0,34,54,97,14,7,0,23,44,16,9,5,0,76,36,48,14,38,7,5,0,32,55,5,0,52,3,0,22,50,11,10,19,156,3,0,16,34,83,14,7,16,27,24,0,40,32,0,32,16,17,15,16,15,15,16,16,33,0,16,45,7,5,0,31,29,52,3,0,52,45,23,10,47,59,26,11,7,5,3,0,64,58,0,44,34,63,12,56,38,66,5,3,0,33,30,30,81,0,24,20,0,14,21,5,3,0,48,25,52,31,9,5,0,56,46,20,9,5,3,0,37,59,31,34,25,6,0,9,24,15,55,5,3,0,48,45,23,10,61,33,36,27,8,0,11,26,17,57,7,12,24,5,3,0,44,60,32,0,9,24,15,56,5,3,0,24,48,45,0,25,45,0,11,26,17,30,7,5,0,22,3,0,27,48,46,0,27,46,0,11,26,17,30,7,5,0,22,3,0,28,46,3,0,45,65,3,0,43,103,3,0,33,38,41,51,80,49,92,74,15,3,0,27,38,34,16,16,53,30,37,0,9,58,15,21,5,0,16,53,3,0,42,0,1,0,19,14,2,21,16,2,28,29,37,31,41,53,0,44,43,28,11,10,14,0,35,7,27,17,16,18,18,15,20,39,74,41,39,23,25,28,32,30,25,40,25,30,21,33,27,14,14,19,9,0,36,17,16,18,18,15,20,41,79,25,0,47,36,41,25,27,32,34,37,15,18,36,40,25,27,32,34,37,15,11,0,81,0,28,41,80,71,34,41,25,40,23,46,29,15,18,41,80,71,34,41,26,40,23,46,29,15,11,0,53,39,33,32,36,38,41,24,17,19,9,7,42,5,3,0,16,1,0,48,32,46,40,0,30,64,5,0,41,3,0,74,36,59,50,0,104,78,50,13,19,11,7,5,0,47,3,0,25,27,33,43,32,45,51,79,58,48,53,72,47,21,3,0,31,26,18,5,0,34,34,16,57,3,0,18,33,19,5,0,38,3,0,25,39,45,0,41,18,5,0,30,36,0,36,49,0,55,79,0,55,23,9,7,0,18,5,0,17,3,0,37,25,33,5,0,57,3,0,44,36,34,13,0,30,21,19,5,0,24,14,60,0,14,61,0,14,49,0,14,43,0,14,44,0,14,51,0,22,34,47,37,15,63,47,37,15,11,9,0,66,0,14,39,43,0,14,43,0,14,47,0,14,47,0,14,46,0,14,44,0,14,14,40,0,40,59,35,13,9,0,50,0,14,46,0,14,45,0,13,33,0,14,46,0,14,9,61,0,69,18,11,9,0,14,9,71,55,37,15,11,0,22,21,0,33,44,0,111,44,13,18,44,0,261,44,13,11,0,45,24,9,0,14,9,39,26,72,39,17,13,0,24,69,11,9,5,0,39,40,0,85,72,12,55,5,3,0,33,70,46,16,9,5,3,0,24,87,0,28,35,59,75,5,3,0,29,26,3,0,32,101,0,28,46,47,5,0,25,25,26,7,0,106,49,33,11,7,49,59,31,9,5,3,0,20,62,34,16,0,39,41,40,43,15,0,27,42,45,20,38,24,62,14,43,0,30,60,29,53,32,59,9,7,0,64,38,12,51,5,0,46,3,0,38,23,46,25,68,44,53,5,0,16,3,0,46,16,0,34,24,12,42,23,5,0,44,83,3,0,38,10,0,52,39,0,63,72,41,7,5,0,41,68,47,17,12,9,5,3,0,32,16,21,54,3,0,27,20,39,20,15,3,0,26,16,38,89,28,20,45,17,53,3,0,27,16,38,23,0,58,43,5,0,34,20,0,25,29,33,7,0,39,5,0,48,55,0,52,36,52,18,38,51,0,89,52,7,0,29,33,7,0,39,5,0,50,55,65,43,0,18,26,37,18,11,7,0,78,39,18,11,7,5,0,36,58,36,65,28,13,14,9,9,50,12,60,5,0,27,31,5,0,37,3,0,62,16,114,3,0,26,16,45,48,69,48,3,0,30,80,40,31,9,5,0,16,0,34,27,12,45,23,5,0,52,3,0,30,16,53,34,19,40,34,12,0,43,45,38,52,43,28,20,0,21,44,16,27,57,44,15,11,0,28,26,9,0,24,14,18,57,16,28,9,7,5,0,22,48,16,28,52,3,0,29,16,0,39,44,36,9,5,0,43,21,51,3,0,27,42,47,54,27,11,27,8,28,36,7,17,3,0,27,16,35,24,0,25,38,18,0,27,24,52,24,14,28,38,7,0,97,24,60,5,0,61,0,43,43,16,9,5,0,49,3,0,66,16,62,21,56,3,0,29,16,45,38,92,28,51,3,0,28,28,37,31,9,5,0,16,47,91,50,3,0,29,16,51,3,0,57,44,37,47,19,30,11,7,5,0,90,0,61,41,0,48,48,26,14,14,7,5,0,28,22,17,38,7,119,28,22,53,3,0,40,27,21,56,3,0,86,34,0,26,38,5,0,19,0,32,36,5,0,74,0,32,24,5,0,51,3,0,26,131,3,0,73,32,44,117,3,0,81,40,39,35,0,30,55,0,46,42,55,37,0,82,42,33,11,0,19,9,0,34,40,7,0,22,5,0,26,57,5,0,21,28,5,0,16,3,0,24,21,26,63,26,65,20,90,22,28,49,3,0,35,35,16,0,18,53,12,36,5,0,190,49,17,59,9,5,0,44,37,17,19,30,9,9,5,0,21,83,20,90,22,28,80,3,0,64,48,21,0,14,36,34,116,0,59,102,60,41,33,13,85,60,41,25,13,9,7,0,69,31,5,0,16,3,0,26,38,29,11,34,8,55,7,3,0,67,51,66,71,37,0,47,60,31,9,5,0,34,0,22,48,5,0,72,46,37,65,0,23,39,5,0,42,51,104,7,26,22,0,45,45,5,0,66,16,3,0,30,91,3,0,45,20,63,71,32,3,0,37,25,186,3,0,45,16,30,40,29,53,31,66,87,3,0,21,61,3,0,19,26,3,0,34,123,3,0,44,28,19,28,19,6,24,39,24,19,51,30,27,38,57,42,15,11,0,19,9,0,29,49,19,9,0,40,0,32,41,65,26,9,0,56,0,97,51,22,13,9,7,7,34,16,0,28,50,31,9,5,0,27,51,3,0,51,43,0,31,28,29,30,23,28,74,18,40,26,28,21,26,57,18,5,0,48,17,3,0,46,44,0,19,65,15,7,0,24,54,15,7,5,0,74,3,0,68,32,33,30,31,32,32,38,29,49,0,23,29,44,41,0,26,75,15,7,0,54,51,30,11,7,0,79,13,5,0,87,38,51,59,52,0,31,29,0,22,76,15,7,0,70,36,0,26,42,0,68,51,19,13,9,0,79,52,19,13,9,0,36,48,7,0,100,40,22,62,14,54,7,82,50,39,0,34,52,7,0,29,40,41,54,0,22,81,14,56,49,32,13,9,0,87,7,124,50,29,40,47,0,22,76,14,56,52,32,13,9,0,82,7,0,49,85,50,50,40,45,73,41,22,62,14,54,7,12,24,5,3,0,33,11,11,11,19,0,83,42,31,9,5,0,23,36,57,33,11,7,0,42,23,17,5,0,42,3,0,44,27,0,69,40,27,32,34,64,26,22,34,64,0,88,47,18,9,5,3,0,38,98,48,20,9,5,0,55,3,0,45,54,30,113,3,0,57,39,27,0,70,50,17,11,7,5,0,55,30,0,20,115,5,3,0,94,127,3,0,67,106,30,233,54,3,0,48,98,3,0,47,0,35,32,21,57,3,0,28,32,21,50,3,0,36,32,21,58,3,0,26,48,53,32,70,32,26,22,3,0,73,45,39,0,24,61,7,12,39,23,14,51,33,11,7,5,3,0,25,71,3,0,21,67,58,66,82,85,49,0,35,40,39,59,5,0,69,0,129,37,5,0,23,0,42,29,49,12,62,5,0,60,57,61,5,0,23,61,41,63,5,0,35,3,0,23,24,3,0,42,42,45,41,54,79,18,5,0,17,3,0,44,32,49,94,18,56,83,18,5,0,17,3,0,41,24,49,54,72,25,30,0,47,29,7,0,18,5,0,17,3,0,37,46,27,25,0,47,29,7,0,59,18,5,0,17,3,0,21,45,39,114,3,0,34,34,43,0,36,18,0,20,20,7,0,82,5,0,25,47,5,0,25,105,50,33,11,7,0,34,47,5,0,59,57,31,9,5,0,47,21,15,3,0,32,37,3,0,30,11,10,19,0,34,66,21,7,0,70,15,24,29,0,79,55,23,9,7,33,19,5,0,39,60,0,94,18,5,0,36,86,58,5,0,17,3,0,33,33,45,29,59,0,23,37,7,24,24,5,0,21,3,0,34,11,10,19,0,22,64,0,41,75,58,35,13,9,0,20,7,5,0,110,3,0,52,21,22,52,0,50,33,0,47,0,217,62,29,15,11,9,61,50,17,20,24,93,60,0,43,19,19,26,0,46,56,30,39,26,17,20,79,49,13,11,9,36,110,41,56,52,69,68,50,11,9,7,5,0,101,0,42,59,16,9,5,3,0,26,37,50,47,43,36,7,46,41,19,38,9,7,48,40,45,43,51,39,5,3,0,43,51,37,51,18,11,14,44,19,20,11,7,5,0,45,3,0,41,21,21,19,0,26,18,22,14,24,31,7,0,53,39,36,48,93,5,0,17,3,0,73,33,51,26,53,32,50,5,0,52,3,0,27,26,63,58,0,22,61,21,55,11,7,0,20,5,0,38,3,0,21,25,0,27,69,52,76,71,32,5,0,43,57,0,21,35,12,59,0,23,37,7,5,0,21,54,3,0,23,44,32,3,0,34,46,3,0,52,45,70,3,0,42,37,20,27,7,44,3,0,24,21,32,0,8,26,14,7,0,36,39,0,35,62,34,22,11,7,0,29,0,28,52,14,46,7,0,22,0,29,62,33,11,7,0,61,47,23,27,0,17,3,0,32,58,44,18,12,56,18,5,0,21,33,0,8,36,44,0,37,61,22,11,7,0,42,62,23,28,11,7,0,36,22,0,29,62,33,11,7,0,61,47,23,27,0,17,3,0,32,65,44,18,12,56,18,5,0,16,44,16,17,3,0,42,46,87,18,5,0,17,3,0,39,25,41,18,32,82,18,5,0,17,3,0,36,21,19,0,26,18,22,14,27,59,35,13,9,0,24,31,7,0,41,47,53,56,162,44,5,3,0,90,33,47,12,13,16,20,0,29,56,24,36,11,7,0,77,0,29,52,7,5,0,68,3,0,22,64,3,0,1,0,38,31,34,26,27,28,52,43,3,0,21,24,3,0,11,30,34,37,21,23,38,36,16,3,0,1,0,30,30,0,33,74,65,3,0,19,1,0,32,15,0,88,41,0,9,36,47,33,0,37,19,7,0,47,13,40,51,28,14,42,7,0,17,27,11,38,49,27,0,24,5,10,45,3,1,42,43,0,34,31,3,0,32,1,0,57,24,0,59,74,3,0,20,1,0,48,0,36,19,0,43,37,42,3,0,33,1,0,28,0,45,90,35,34,0,13,17,0,38,38,5,0,32,3,0,13,1,0,22,42,28,33,0],"data":{"version":3,"file":"index.js","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/util/location.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parse-error/credentials.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parse-error/module-errors.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parse-error/to-node-description.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parse-error/standard-errors.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parse-error/strict-mode-errors.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parse-error.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/plugins/estree.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/tokenizer/context.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/tokenizer/types.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/util/identifier.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/util/scopeflags.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parser/base.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parser/comments.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/util/whitespace.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/tokenizer/state.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/tokenizer/index.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/util/scope.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/plugins/flow/scope.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/util/class-scope.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/util/expression-scope.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/util/production-parameter.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parser/util.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parser/node.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/plugins/flow/index.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/plugins/jsx/xhtml.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/plugins/jsx/index.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/plugins/typescript/scope.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/plugins/typescript/index.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/plugins/placeholders.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/plugins/v8intrinsic.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/plugin-utils.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/options.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parser/lval.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parser/expression.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parser/statement.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/parser/index.js","file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/@babel/parser/src/index.js"],"sourcesContent":["// @flow\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","// @flow\n\nexport const ParseErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ParseErrorCode = $Values<typeof ParseErrorCodes>;\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode,\n  reasonCode: string,\n  syntaxPlugin?: SyntaxPlugin,\n\n  toMessage: ToMessage<ErrorDetails>,\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get() {\n    return keys.reduce((object, key) => object[key], this);\n  },\n  set(value) {\n    keys.reduce(\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: () => any,\n  properties: Object,\n  descriptors: Object,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign((new constructor(): T), properties),\n    );\n\nexport { instantiate };\n","// @flow\n\nimport { ParseErrorCodes, toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  ImportMetaOutsideModule: _(\n    `import.meta may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n  ImportOutsideModule: _(\n    `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n});\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = $Keys<\n  $Diff<typeof NodeDescriptions, { UpdateExpression: any }>,\n>;\ntype NodeWithDescription =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | { type: NodeTypesWithDescriptions };\n\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix)]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"Identfier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\",\n    };\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  AccessorIsGenerator: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `A ${kind}ter cannot be a generator.`,\n  ),\n\n  ArgumentsInClass: _(\n    \"'arguments' is only allowed in functions and class methods.\",\n  ),\n  AsyncFunctionInSingleStatementContext: _(\n    \"Async functions can only be declared at the top level or inside a block.\",\n  ),\n  AwaitBindingIdentifier: _(\n    \"Can not use 'await' as identifier inside an async function.\",\n  ),\n  AwaitBindingIdentifierInStaticBlock: _(\n    \"Can not use 'await' as identifier inside a static block.\",\n  ),\n  AwaitExpressionFormalParameter: _(\n    \"'await' is not allowed in async function parameters.\",\n  ),\n  AwaitNotInAsyncContext: _(\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  ),\n  AwaitNotInAsyncFunction: _(\"'await' is only allowed within async functions.\"),\n  BadGetterArity: _(\"A 'get' accesor must not have any formal parameters.\"),\n  BadSetterArity: _(\"A 'set' accesor must have exactly one formal parameter.\"),\n  BadSetterRestParameter: _(\n    \"A 'set' accesor function argument must not be a rest parameter.\",\n  ),\n  ConstructorClassField: _(\"Classes may not have a field named 'constructor'.\"),\n  ConstructorClassPrivateField: _(\n    \"Classes may not have a private field named '#constructor'.\",\n  ),\n  ConstructorIsAccessor: _(\"Class constructor may not be an accessor.\"),\n  ConstructorIsAsync: _(\"Constructor can't be an async function.\"),\n  ConstructorIsGenerator: _(\"Constructor can't be a generator.\"),\n  DeclarationMissingInitializer: _<{| kind: \"const\" | \"destructuring\" |}>(\n    ({ kind }) => `Missing initializer in ${kind} declaration.`,\n  ),\n  DecoratorBeforeExport: _(\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  ),\n  DecoratorConstructor: _(\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  ),\n  DecoratorExportClass: _(\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  ),\n  DecoratorSemicolon: _(\"Decorators must not be followed by a semicolon.\"),\n  DecoratorStaticBlock: _(\"Decorators can't be used with a static block.\"),\n  DeletePrivateField: _(\"Deleting a private field is not allowed.\"),\n  DestructureNamedImport: _(\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  ),\n  DuplicateConstructor: _(\"Duplicate constructor in the same class.\"),\n  DuplicateDefaultExport: _(\"Only one default export allowed per module.\"),\n  DuplicateExport: _<{| exportName: string |}>(\n    ({ exportName }) =>\n      `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  ),\n  DuplicateProto: _(\"Redefinition of __proto__ property.\"),\n  DuplicateRegExpFlags: _(\"Duplicate regular expression flag.\"),\n  ElementAfterRest: _(\"Rest element must be last element.\"),\n  EscapedCharNotAnIdentifier: _(\"Invalid Unicode escape.\"),\n  ExportBindingIsString: _<{| localName: string, exportName: string |}>(\n    ({ localName, exportName }) =>\n      `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ),\n  ExportDefaultFromAsIdentifier: _(\n    \"'from' is not allowed as an identifier after 'export default'.\",\n  ),\n\n  ForInOfLoopInitializer: _<{| type: \"ForInStatement\" | \"ForOfStatement\" |}>(\n    ({ type }) =>\n      `'${\n        type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n      }' loop variable declaration may not have an initializer.`,\n  ),\n\n  ForOfAsync: _(\"The left-hand side of a for-of loop may not be 'async'.\"),\n  ForOfLet: _(\"The left-hand side of a for-of loop may not start with 'let'.\"),\n  GeneratorInSingleStatementContext: _(\n    \"Generators can only be declared at the top level or inside a block.\",\n  ),\n\n  IllegalBreakContinue: _<{| type: \"BreakStatement\" | \"ContinueStatement\" |}>(\n    ({ type }) =>\n      `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n  ),\n\n  IllegalLanguageModeDirective: _(\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  ),\n  IllegalReturn: _(\"'return' outside of function.\"),\n  ImportBindingIsString: _<{| importName: string |}>(\n    ({ importName }) =>\n      `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ),\n  ImportCallArgumentTrailingComma: _(\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ),\n  ImportCallArity: _<{| maxArgumentCount: 1 | 2 |}>(\n    ({ maxArgumentCount }) =>\n      `\\`import()\\` requires exactly ${\n        maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n      }.`,\n  ),\n  ImportCallNotNewExpression: _(\"Cannot use new with import(...).\"),\n  ImportCallSpreadArgument: _(\"`...` is not allowed in `import()`.\"),\n  IncompatibleRegExpUVFlags: _(\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  ),\n  InvalidBigIntLiteral: _(\"Invalid BigIntLiteral.\"),\n  InvalidCodePoint: _(\"Code point out of bounds.\"),\n  InvalidCoverInitializedName: _(\"Invalid shorthand property initializer.\"),\n  InvalidDecimal: _(\"Invalid decimal.\"),\n  InvalidDigit: _<{| radix: number |}>(\n    ({ radix }) => `Expected number in radix ${radix}.`,\n  ),\n  InvalidEscapeSequence: _(\"Bad character escape sequence.\"),\n  InvalidEscapeSequenceTemplate: _(\"Invalid escape sequence in template.\"),\n  InvalidEscapedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`,\n  ),\n  InvalidIdentifier: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Invalid identifier ${identifierName}.`,\n  ),\n  InvalidLhs: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidLhsBinding: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidNumber: _(\"Invalid number.\"),\n  InvalidOrMissingExponent: _(\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  ),\n  InvalidOrUnexpectedToken: _<{| unexpected: string |}>(\n    ({ unexpected }) => `Unexpected character '${unexpected}'.`,\n  ),\n  InvalidParenthesizedAssignment: _(\n    \"Invalid parenthesized assignment pattern.\",\n  ),\n  InvalidPrivateFieldResolution: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Private name #${identifierName} is not defined.`,\n  ),\n  InvalidPropertyBindingPattern: _(\"Binding member expression.\"),\n  InvalidRecordProperty: _(\n    \"Only properties and spread elements are allowed in record definitions.\",\n  ),\n  InvalidRestAssignmentPattern: _(\"Invalid rest operator's argument.\"),\n  LabelRedeclaration: _<{| labelName: string |}>(\n    ({ labelName }) => `Label '${labelName}' is already declared.`,\n  ),\n  LetInLexicalBinding: _(\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  ),\n  LineTerminatorBeforeArrow: _(\"No line break is allowed before '=>'.\"),\n  MalformedRegExpFlags: _(\"Invalid regular expression flag.\"),\n  MissingClassName: _(\"A class name is required.\"),\n  MissingEqInAssignment: _(\n    \"Only '=' operator can be used for specifying default value.\",\n  ),\n  MissingSemicolon: _(\"Missing semicolon.\"),\n  MissingPlugin: _<{| missingPlugin: [string] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also), seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: _<{| missingPlugin: string[] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  MissingUnicodeEscape: _(\"Expecting Unicode escape sequence \\\\uXXXX.\"),\n  MixingCoalesceWithLogical: _(\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ),\n  ModuleAttributeDifferentFromType: _(\n    \"The only accepted module attribute is `type`.\",\n  ),\n  ModuleAttributeInvalidValue: _(\n    \"Only string literals are allowed as module attribute values.\",\n  ),\n  ModuleAttributesWithDuplicateKeys: _<{| key: string |}>(\n    ({ key }) => `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ),\n  ModuleExportNameHasLoneSurrogate: _<{| surrogateCharCode: number |}>(\n    ({ surrogateCharCode }) =>\n      `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n        16,\n      )}'.`,\n  ),\n  ModuleExportUndefined: _<{| localName: string |}>(\n    ({ localName }) => `Export '${localName}' is not defined.`,\n  ),\n  MultipleDefaultsInSwitch: _(\"Multiple default clauses.\"),\n  NewlineAfterThrow: _(\"Illegal newline after throw.\"),\n  NoCatchOrFinally: _(\"Missing catch or finally clause.\"),\n  NumberIdentifier: _(\"Identifier directly after number.\"),\n  NumericSeparatorInEscapeSequence: _(\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ),\n  ObsoleteAwaitStar: _(\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  ),\n  OptionalChainingNoNew: _(\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  ),\n  OptionalChainingNoTemplate: _(\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  ),\n  OverrideOnConstructor: _(\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ),\n  ParamDupe: _(\"Argument name clash.\"),\n  PatternHasAccessor: _(\"Object pattern can't contain getter or setter.\"),\n  PatternHasMethod: _(\"Object pattern can't contain methods.\"),\n  PrivateInExpectedIn: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  ),\n  PrivateNameRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Duplicate private name #${identifierName}.`,\n  ),\n  RecordExpressionBarIncorrectEndSyntaxType: _(\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionBarIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionHashIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  RecordNoProto: _(\"'__proto__' is not allowed in Record expressions.\"),\n  RestTrailingComma: _(\"Unexpected trailing comma after rest element.\"),\n  SloppyFunction: _(\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  ),\n  StaticPrototype: _(\"Classes may not have static property named prototype.\"),\n  SuperNotAllowed: _(\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  ),\n  SuperPrivateField: _(\"Private fields can't be accessed on super.\"),\n  TrailingDecorator: _(\"Decorators must be attached to a class element.\"),\n  TupleExpressionBarIncorrectEndSyntaxType: _(\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionBarIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionHashIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  UnexpectedArgumentPlaceholder: _(\"Unexpected argument placeholder.\"),\n  UnexpectedAwaitAfterPipelineBody: _(\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  ),\n  UnexpectedDigitAfterHash: _(\"Unexpected digit after hash token.\"),\n  UnexpectedImportExport: _(\n    \"'import' and 'export' may only appear at the top level.\",\n  ),\n  UnexpectedKeyword: _<{| keyword: string |}>(\n    ({ keyword }) => `Unexpected keyword '${keyword}'.`,\n  ),\n  UnexpectedLeadingDecorator: _(\n    \"Leading decorators must be attached to a class declaration.\",\n  ),\n  UnexpectedLexicalDeclaration: _(\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  ),\n  UnexpectedNewTarget: _(\n    \"`new.target` can only be used in functions or class properties.\",\n  ),\n  UnexpectedNumericSeparator: _(\n    \"A numeric separator is only allowed between two digits.\",\n  ),\n  UnexpectedPrivateField: _(\"Unexpected private name.\"),\n  UnexpectedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`,\n  ),\n  UnexpectedSuper: _(\"'super' is only allowed in object methods and classes.\"),\n  UnexpectedToken: _<{|\n    expected?: ?string,\n    unexpected?: ?string,\n  |}>(\n    ({ expected, unexpected }) =>\n      `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n        expected ? `, expected \"${expected}\"` : \"\"\n      }`,\n  ),\n  UnexpectedTokenUnaryExponentiation: _(\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  ),\n  UnsupportedBind: _(\"Binding should be performed on object property.\"),\n  UnsupportedDecoratorExport: _(\n    \"A decorated export must export a class declaration.\",\n  ),\n  UnsupportedDefaultExport: _(\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  ),\n  UnsupportedImport: _(\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  ),\n  UnsupportedMetaProperty: _<{|\n    target: string,\n    onlyValidPropertyName: string,\n  |}>(\n    ({ target, onlyValidPropertyName }) =>\n      `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  ),\n  UnsupportedParameterDecorator: _(\n    \"Decorators cannot be used to decorate parameters.\",\n  ),\n  UnsupportedPropertyDecorator: _(\n    \"Decorators cannot be used to decorate object literal properties.\",\n  ),\n  UnsupportedSuper: _(\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  ),\n  UnterminatedComment: _(\"Unterminated comment.\"),\n  UnterminatedRegExp: _(\"Unterminated regular expression.\"),\n  UnterminatedString: _(\"Unterminated string constant.\"),\n  UnterminatedTemplate: _(\"Unterminated template.\"),\n  VarRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Identifier '${identifierName}' has already been declared.`,\n  ),\n  YieldBindingIdentifier: _(\n    \"Can not use 'yield' as identifier inside a generator.\",\n  ),\n  YieldInParameter: _(\"Yield expression is not allowed in formal parameters.\"),\n  ZeroDigitNumericSeparator: _(\n    \"Numeric separator can not be used after leading 0.\",\n  ),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  StrictDelete: _(\"Deleting local variable in strict mode.\"),\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: _<{| referenceName: string |}>(\n    ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`,\n  ),\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: _<{| bindingName: string |}>(\n    ({ bindingName }) => `Binding '${bindingName}' in strict mode.`,\n  ),\n\n  StrictFunction: _(\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  ),\n  StrictNumericEscape: _(\n    \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  ),\n  StrictOctalLiteral: _(\n    \"Legacy octal literals are not allowed in strict mode.\",\n  ),\n  StrictWith: _(\"'with' in strict mode.\"),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set<string>([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n]);\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter: _(\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  ),\n  PipeTopicRequiresHackPipes: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n  PipeTopicUnbound: _(\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  ),\n  PipeTopicUnconfiguredToken: _<{| token: string |}>(\n    ({ token }) =>\n      `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  ),\n  PipeTopicUnused: _(\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  ),\n  PipeUnparenthesizedBody: _<{| type: string |}>(\n    ({ type }) =>\n      `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n        type,\n      })}; please wrap it in parentheses.`,\n  ),\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow: _(\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  ),\n  PipelineBodySequenceExpression: _(\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  ),\n  PipelineHeadSequenceExpression: _(\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  ),\n  PipelineTopicUnused: _(\n    \"Pipeline is in topic style but does not use topic reference.\",\n  ),\n  PrimaryTopicNotAllowed: _(\n    \"Topic reference was used in a lexical context without topic binding.\",\n  ),\n  PrimaryTopicRequiresSmartPipeline: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n});\n","// @flow\n\nimport { Position } from \"./util/location\";\nimport type { NodeBase } from \"./types\";\nimport {\n  instantiate,\n  type ParseErrorCode,\n  ParseErrorCodes,\n  type ParseErrorCredentials,\n} from \"./parse-error/credentials\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: string;\n\n  missingPlugin?: string | string[];\n\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = ({\n  loc: Position,\n  details: ErrorDetails,\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails: Object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = { loc: Position, details: ErrorDetails };\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate<ParseError<ErrorDetails>>(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(overrides: { loc?: Position, details?: ErrorDetails } = {}) {\n          const loc = overrides.loc || {};\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get() {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    );\n  };\n}\n\n// This part is tricky. You'll probably notice from the name of this function\n// that it is supposed to return `ParseErrorCredentials`, but instead these.\n// declarations seem to instead imply that they return\n// `ParseErrorConstructor<ErrorDetails>` instead. This is because in Flow we\n// can't easily extract parameter types (either from functions, like with\n// Typescript's Parameters<f> utility type, or from generic types either). As\n// such, this function does double duty: packaging up the credentials during\n// its actual runtime operation, but pretending to return the\n// `ParseErrorConstructor<ErrorDetails>` that we won't actually have until later\n// to the type system, avoiding the need to do so with $ObjMap (which doesn't\n// work) in `ParseErrorEnum`. This hack won't be necessary when we switch to\n// Typescript.\ndeclare function toParseErrorCredentials<T: string>(\n  T,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<{||}>;\n\n// ESLint seems to erroneously think that Flow's overloading syntax is an\n// accidental redeclaration of the function:\n// https://github.com/babel/eslint-plugin-babel/issues/162\n// eslint-disable-next-line no-redeclare\ndeclare function toParseErrorCredentials<ErrorDetails>(\n  (ErrorDetails) => string,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<ErrorDetails>;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function toParseErrorCredentials(toMessageOrMessage, credentials) {\n  return {\n    toMessage:\n      typeof toMessageOrMessage === \"string\"\n        ? () => toMessageOrMessage\n        : toMessageOrMessage,\n    ...credentials,\n  };\n}\n\n// This is the templated form.\ndeclare function ParseErrorEnum(string[]): typeof ParseErrorEnum;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\ndeclare function ParseErrorEnum<T>(\n  toParseErrorCredentials: (typeof toParseErrorCredentials) => T,\n  syntaxPlugin?: string,\n): T;\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either error\n// messages, or `toMessage` functions that define additional necessary `details`\n// needed by the `ParseError`:\n//\n// ParseErrorEnum`optionalSyntaxPlugin` (_ => ({\n//   ErrorWithStaticMessage: _(\"message\"),\n//   ErrorWithDynamicMessage: _<{ type: string }>(({ type }) => `${type}`),\n// });\n//\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function ParseErrorEnum(argument, syntaxPlugin) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return toParseErrorCredentialsMap =>\n      ParseErrorEnum(toParseErrorCredentialsMap, argument[0]);\n  }\n\n  const partialCredentials = argument(toParseErrorCredentials);\n  const ParseErrorConstructors = {};\n\n  for (const reasonCode of Object.keys(partialCredentials)) {\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCodes.SyntaxError,\n      reasonCode,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...partialCredentials[reasonCode],\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {|\n  ...ErrorDetails,\n  at: Position | NodeBase,\n|};\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object, key) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Property\" ? \"value\" : super.isValidLVal(type, ...rest);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc?: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX openning tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\", { beforeExpr }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport { Errors, type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser from \"../parser/comments\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: ch => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: ch => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: ch => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: ch =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const isAllowedSibling =\n      radix === 16\n        ? isAllowedNumericSeparatorSibling.hex\n        : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n        ? isAllowedNumericSeparatorSibling.oct\n        : isAllowedNumericSeparatorSibling.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition(),\n          });\n        } else if (\n          Number.isNaN(next) ||\n          !isAllowedSibling(next) ||\n          forbiddenSiblings.has(prev) ||\n          forbiddenSiblings.has(next)\n        ) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(Errors.InvalidDigit, {\n            at: this.state.curPosition(),\n            radix,\n          });\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, { at: this.state.curPosition() });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads tempalte continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n            // We immediately follow a \"\\\\\", and we're an 8 or a 9, so we must\n            // be on the same line.\n            at: createPositionWithColumnOffset(this.state.curPosition(), -1),\n          });\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          // We immediately follow a \"\\\\\", and we're something between 0 and 7,\n          // so we must be on the same line.\n          const codePos = createPositionWithColumnOffset(\n            this.state.curPosition(),\n            -1,\n          );\n          const match = this.input\n            .slice(this.state.pos - 1, this.state.pos + 2)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n                at: codePos,\n              });\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, { at: codeLoc });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | empty {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: string, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: string[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n}\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","// @flow\n\nimport { Errors } from \"../parse-error\";\nimport { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport Tokenizer from \"../tokenizer\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\n\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ArrowHeadParsingDeclarationError, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError<T: ArrowHeadParsingDeclarationError>(\n    ParsingErrorClass: T,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: ([ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    { at: node }: { at: Node },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError({ at: node }: { at: Node }): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(Errors.InvalidParenthesizedAssignment, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(\n        Errors.InvalidParenthesizedAssignment,\n        origin,\n      );\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(\n    node: Node,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: ?Position): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParseError<any>),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: ?Position = null;\n  doubleProtoLoc: ?Position = null;\n  privateKeyLoc: ?Position = null;\n  optionalParametersLoc: ?Position = null;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`(_ => ({\n  AmbiguousConditionalArrow: _(\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  ),\n  AmbiguousDeclareModuleKind: _(\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  ),\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`,\n  ),\n  DeclareClassElement: _(\n    \"The `declare` modifier can only appear on class fields.\",\n  ),\n  DeclareClassFieldInitializer: _(\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  ),\n  DuplicateDeclareModuleExports: _(\n    \"Duplicate `declare module.exports` statement.\",\n  ),\n  EnumBooleanMemberNotInitialized: _<{|\n    memberName: string,\n    enumName: string,\n  |}>(\n    ({ memberName, enumName }) =>\n      `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumDuplicateMemberName: _<{| memberName: string, enumName: string |}>(\n    ({ memberName, enumName }) =>\n      `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  ),\n  EnumInconsistentMemberValues: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  ),\n  EnumInvalidExplicitType: _<{| invalidEnumType: string, enumName: string |}>(\n    ({ invalidEnumType, enumName }) =>\n      `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidExplicitTypeUnknownSupplied: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName, explicitType }) =>\n      // $FlowIgnore (coercing null which never actually happens)\n      `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  ),\n  EnumInvalidMemberInitializerSymbolType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberInitializerUnknownType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberName: _<{|\n    enumName: string,\n    memberName: string,\n    suggestion: string,\n  |}>(\n    ({ enumName, memberName, suggestion }) =>\n      `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  ),\n  EnumNumberMemberNotInitialized: _<{|\n    enumName: string,\n    memberName: string,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumStringMemberInconsistentlyInitailized: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  ),\n  GetterMayNotHaveThisParam: _(\"A getter cannot have a `this` parameter.\"),\n  ImportTypeShorthandOnlyInPureImport: _(\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  ),\n  InexactInsideExact: _(\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  ),\n  InexactInsideNonObject: _(\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  ),\n  InexactVariance: _(\"Explicit inexact syntax cannot have variance.\"),\n  InvalidNonTypeImportInDeclareModule: _(\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  ),\n  MissingTypeParamDefault: _(\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  ),\n  NestedDeclareModule: _(\n    \"`declare module` cannot be used inside another `declare module`.\",\n  ),\n  NestedFlowComment: _(\n    \"Cannot have a flow comment inside another flow comment.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    !process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {},\n  ),\n  SetterMayNotHaveThisParam: _(\"A setter cannot have a `this` parameter.\"),\n  SpreadVariance: _(\"Spread properties cannot have variance.\"),\n  ThisParamAnnotationRequired: _(\n    \"A type annotation is required for the `this` parameter.\",\n  ),\n  ThisParamBannedInConstructor: _(\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ),\n  ThisParamMayNotBeOptional: _(\"The `this` parameter cannot be optional.\"),\n  ThisParamMustBeFirst: _(\n    \"The `this` parameter must be the first function parameter.\",\n  ),\n  ThisParamNoDefault: _(\"The `this` parameter may not have a default value.\"),\n  TypeBeforeInitializer: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeCastInPattern: _(\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  ),\n  UnexpectedExplicitInexactInObject: _(\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  ),\n  UnexpectedReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Unexpected reserved type ${reservedType}.`,\n  ),\n  UnexpectedReservedUnderscore: _(\n    \"`_` is only allowed as a type argument to call or new.\",\n  ),\n  UnexpectedSpaceBetweenModuloChecks: _(\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  ),\n  UnexpectedSpreadType: _(\n    \"Spread operator cannot appear in class or interface definitions.\",\n  ),\n  UnexpectedSubtractionOperand: _(\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  ),\n  UnexpectedTokenAfterTypeParameter: _(\n    \"Expected an arrow function after this type parameter declaration.\",\n  ),\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: _(\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  ),\n  UnsupportedDeclareExportKind: _<{|\n    unsupportedExportKind: string,\n    suggestion: string,\n  |}>(\n    ({ unsupportedExportKind, suggestion }) =>\n      `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  ),\n  UnsupportedStatementInDeclareModule: _(\n    \"Only declares and type imports are allowed inside declare module.\",\n  ),\n  UnterminatedFlowComment: _(\"Unterminated flow-comment.\"),\n}));\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", loc: Position, value: N.Node |}\n  | {| type: \"string\", loc: Position, value: N.Node |}\n  | {| type: \"boolean\", loc: Position, value: N.Node |}\n  | {| type: \"invalid\", loc: Position |}\n  | {| type: \"none\", loc: Position |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: ?Position = null;\n        let inexactStartLoc: ?Position = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStartLoc: ?Position,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc?: ?Position,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"TypeCastExpression\" || super.isValidLVal(type, ...rest);\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.loc.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: N.Node, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string, __proto__: null } = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`(_ => ({\n  AttributeIsEmpty: _(\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  ),\n  MissingClosingTagElement: _<{| openingTagName: string |}>(\n    ({ openingTagName }) =>\n      `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  ),\n  MissingClosingTagFragment: _(\n    \"Expected corresponding JSX closing tag for <>.\",\n  ),\n  UnexpectedSequenceExpression: _(\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  ),\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: _<{| unexpected: string, HTMLEntity: string |}>(\n    ({ unexpected, HTMLEntity }) =>\n      `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  ),\n  UnsupportedJsxValue: _(\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  ),\n  UnterminatedJsxContent: _(\"Unterminated JSX contents.\"),\n  UnwrappedAdjacentJSXElements: _(\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            // $FlowIgnore\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              // $FlowIgnore\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { Position, createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_NONE,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`(_ => ({\n  AbstractMethodHasImplementation: _<{| methodName: string |}>(\n    ({ methodName }) =>\n      `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  ),\n  AbstractPropertyHasInitializer: _<{| propertyName: string |}>(\n    ({ propertyName }) =>\n      `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  ),\n  AccesorCannotDeclareThisParameter: _(\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  ),\n  AccesorCannotHaveTypeParameters: _(\n    \"An accessor cannot have type parameters.\",\n  ),\n  CannotFindName: _<{| name: string |}>(\n    ({ name }) => `Cannot find name '${name}'.`,\n  ),\n  ClassMethodHasDeclare: _(\"Class methods cannot have the 'declare' modifier.\"),\n  ClassMethodHasReadonly: _(\n    \"Class methods cannot have the 'readonly' modifier.\",\n  ),\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: _(\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ),\n  ConstructorHasTypeParameters: _(\n    \"Type parameters cannot appear on a constructor declaration.\",\n  ),\n  DeclareAccessor: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `'declare' is not allowed in ${kind}ters.`,\n  ),\n  DeclareClassFieldHasInitializer: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  DeclareFunctionHasImplementation: _(\n    \"An implementation cannot be declared in ambient contexts.\",\n  ),\n  DuplicateAccessibilityModifier: _<{| modifier: N.Accessibility |}>(\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line no-unused-vars\n    ({ modifier }) => `Accessibility modifier already seen.`,\n  ),\n  DuplicateModifier: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `Duplicate modifier: '${modifier}'.`,\n  ),\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: _<{| token: \"extends\" | \"implements\" |}>(\n    ({ token }) => `'${token}' list cannot be empty.`,\n  ),\n  EmptyTypeArguments: _(\"Type argument list cannot be empty.\"),\n  EmptyTypeParameters: _(\"Type parameter list cannot be empty.\"),\n  ExpectedAmbientAfterExportDeclare: _(\n    \"'export declare' must be followed by an ambient declaration.\",\n  ),\n  ImportAliasHasImportType: _(\"An import alias can not use 'import type'.\"),\n  IncompatibleModifiers: _<{| modifiers: [TsModifier, TsModifier] |}>(\n    ({ modifiers }) =>\n      `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  ),\n  IndexSignatureHasAbstract: _(\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  ),\n  IndexSignatureHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  IndexSignatureHasDeclare: _(\n    \"Index signatures cannot have the 'declare' modifier.\",\n  ),\n  IndexSignatureHasOverride: _(\n    \"'override' modifier cannot appear on an index signature.\",\n  ),\n  IndexSignatureHasStatic: _(\n    \"Index signatures cannot have the 'static' modifier.\",\n  ),\n  InitializerNotAllowedInAmbientContext: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  InvalidModifierOnTypeMember: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`,\n  ),\n  InvalidModifiersOrder: _<{| orderedModifiers: [TsModifier, TsModifier] |}>(\n    ({ orderedModifiers }) =>\n      `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  ),\n  InvalidTupleMemberLabel: _(\n    \"Tuple members must be labeled with a simple identifier.\",\n  ),\n  MissingInterfaceName: _(\n    \"'interface' declarations must be followed by an identifier.\",\n  ),\n  MixedLabeledAndUnlabeledElements: _(\n    \"Tuple members must all have names or all not have names.\",\n  ),\n  NonAbstractClassHasAbstractMethod: _(\n    \"Abstract methods can only appear within an abstract class.\",\n  ),\n  NonClassMethodPropertyHasAbstractModifer: _(\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  ),\n  OptionalTypeBeforeRequired: _(\n    \"A required element cannot follow an optional element.\",\n  ),\n  OverrideNotInSubClass: _(\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  ),\n  PrivateElementHasAbstract: _(\n    \"Private elements cannot have the 'abstract' modifier.\",\n  ),\n  PrivateElementHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  ReadonlyForMethodSignature: _(\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ),\n  ReservedArrowTypeParam: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ),\n  ReservedTypeAssertion: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  ),\n  SetAccesorCannotHaveOptionalParameter: _(\n    \"A 'set' accessor cannot have an optional parameter.\",\n  ),\n  SetAccesorCannotHaveRestParameter: _(\n    \"A 'set' accessor cannot have rest parameter.\",\n  ),\n  SetAccesorCannotHaveReturnType: _(\n    \"A 'set' accessor cannot have a return type annotation.\",\n  ),\n  SingleTypeParameterWithoutTrailingComma: _<{| typeParameterName: string |}>(\n    ({ typeParameterName }) =>\n      `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  ),\n  StaticBlockCannotHaveModifier: _(\n    \"Static class blocks cannot have any modifier.\",\n  ),\n  TypeAnnotationAfterAssign: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeImportCannotSpecifyDefaultAndNamed: _(\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  ),\n  TypeModifierIsUsedInTypeExports: _(\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  ),\n  TypeModifierIsUsedInTypeImports: _(\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  ),\n  UnexpectedParameterModifier: _(\n    \"A parameter property is only allowed in a constructor implementation.\",\n  ),\n  UnexpectedReadonly: _(\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  ),\n  UnexpectedTypeAnnotation: _(\"Did not expect a type annotation here.\"),\n  UnexpectedTypeCastInParameter: _(\n    \"Unexpected type cast in parameter position.\",\n  ),\n  UnsupportedImportTypeArgument: _(\n    \"Argument in a type import must be a string literal.\",\n  ),\n  UnsupportedParameterPropertyKind: _(\n    \"A parameter property may not be declared using a binding pattern.\",\n  ),\n  UnsupportedSignatureParameterKind: _<{| type: string |}>(\n    ({ type }) =>\n      `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n    }: {\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    }): void {\n      const enforceOrder = (loc, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (loc, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(TSErrors.InvalidModifierOnTypeMember, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type !== tt._const) return null;\n\n      this.next();\n      const typeReference = this.tsParseTypeReference();\n\n      // If the type reference has type parameters, then you are using it as a\n      // type and not as a const signifier. We'll *never* be able to find this\n      // name, since const isn't allowed as a type name. So in this instance we\n      // get to pretend we're the type checker.\n      if (typeReference.typeParameters) {\n        this.raise(TSErrors.CannotFindName, {\n          at: typeReference.typeName,\n          name: \"const\",\n        });\n      }\n\n      return typeReference;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      node.expression = this.tsParseEntityName();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n      properties: { declare?: true } = {},\n    ): ?N.TsInterfaceDeclaration {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters();\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      properties: { const?: true, declare?: true } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorLoc = this.state.curPosition();\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (tokenIsTemplate(this.state.type)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      // tsTryParseAndCatch is expensive, so avoid if not necessary.\n      // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n      // Also handles `new C<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArgumentsInExpression();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node: N.TsEnumDeclaration = this.startNode();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(this.startNode());\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        stopOnStartOfClassStaticBlock: true,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member: any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member: any).accessibility,\n          });\n        }\n        if ((member: any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member: any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: ?N.Declaration =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // $FlowIgnore\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      let invalidSingleType: ?N.TsTypeParameter;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        // report error if single type parameter used without trailing comma.\n        if (\n          this.hasPlugin(\"jsx\") &&\n          expr.typeParameters.params.length === 1 &&\n          !expr.typeParameters.extra?.trailingComma\n        ) {\n          const parameter = expr.typeParameters.params[0];\n          if (!parameter.constraint) {\n            // A single type parameter must either have constraints\n            // or a trailing comma, otherwise it's ambiguous with JSX.\n            invalidSingleType = parameter;\n          }\n        }\n\n        return expr;\n      }, state);\n\n      if (process.env.BABEL_8_BREAKING) {\n        if (invalidSingleType) {\n          this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n            at: createPositionWithColumnOffset(invalidSingleType.loc.end, 1),\n            typeParameterName: invalidSingleType.name.name,\n          });\n        }\n      }\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE || isParenthesized) && [\n              \"expression\",\n              true,\n            ],\n            TSTypeAssertion: (binding !== BIND_NONE || isParenthesized) && [\n              \"expression\",\n              true,\n            ],\n          },\n          type,\n        ) || super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n                at: expr,\n              });\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | ?N.TsInterfaceDeclaration {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        leftOfAs = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`(_ => ({\n  ClassNameIsRequired: _(\"A class name is required.\"),\n  UnexpectedSpace: _(\"Unexpected space in placeholder.\"),\n}));\n/* eslint-disable sort-keys */\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Placeholder\" || super.isValidLVal(type, ...rest);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  ObjectMember,\n  /*:: TsNamedTypeElementBase, */\n  /*:: PrivateName, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  +parsePrivateName: () => PrivateName\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError({ at: node });\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(Errors.RestTrailingComma, { at: prop });\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc?: ?Position,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param {NodeType} type A Node `type` string\n   * @param {boolean} isParenthesized\n   *        Whether the node in question is parenthesized.\n   * @param {BindingTypes} binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns { boolean | string | [string, boolean] }\n   *          `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  // eslint-disable-next-line no-unused-vars\n  isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param {Expression} expression The expression in question to check.\n   * @param {Object} options A set of options described below.\n   * @param {LValAncestor} options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param {BindingTypes} [options.binding=BIND_NONE]\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param {Set<string>|false} [options.checkClashes=false]\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param {boolean} [options.allowingSloppyLetBinding]\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param {boolean} [options.strictModeChanged=false]\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param {boolean} [options.hasParenthesizedAncestor=false]\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @memberof LValParser\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor,\n      binding?: BindingTypes,\n      checkClashes?: Set<string> | false,\n      strictModeChanged?: boolean,\n      allowingSloppyLetBinding?: boolean,\n      hasParenthesizedAncestor?: boolean,\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      hasParenthesizedAncestor || expression.extra?.parenthesized,\n      binding,\n    );\n\n    if (validity === true) return;\n\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // Flow has difficulty tracking `key` and `expression`, but only if we use\n    // null-proto objects. If we use normal objects, everything works fine.\n    // $FlowIgnore\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(Errors.InvalidRestAssignmentPattern, {\n        at: node.argument,\n      });\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\ndeclare var invariant;\n*/\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, {\n        in: this.finishNode(node, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(startPos, startLoc, val);\n  }\n\n  wrapParenthesis(\n    startPos: number,\n    startLoc: Position,\n    expression: N.Expression,\n  ): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        expression,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = expression;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaLoc: ?Position,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaLoc: ?Position,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaLoc, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // $FlowIgnore\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // $FlowIgnore\n                !!node.key\n                  ? node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" };\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      { at: node },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      { at: node },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startPos, startLoc, expr);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: ?Position,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassProperty> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateProperty> = member;\n    const accessorProp: $FlowSubtype<N.ClassAccessorProperty> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = (prop.key: N.Expression);\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier(specifier: N.Node, type: string) {\n    this.checkLVal(specifier.local, {\n      in: specifier,\n      binding: BIND_LEXICAL,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: imported.value,\n        });\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCodes","Object","freeze","SyntaxError","SourceTypeModuleError","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","_","ImportMetaOutsideModule","code","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","toMessage","loc","details","clone","overrides","message","pos","toParseErrorCredentials","toMessageOrMessage","credentials","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","toParseErrorCredentialsMap","partialCredentials","ParseErrorConstructors","reasonCode","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","args","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isValidLVal","rest","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","raise","at","finishCallExpression","optional","callee","source","arguments","hasPlugin","attributes","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","state","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","template","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","Token","Tokenizer","isLookahead","pushToken","checkKeywordEscapes","nextToken","eat","match","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","inClass","content","mods","char","includes","readInt","len","forceLen","allowNumSeparator","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","Number","isNaN","errorRecovery","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","readHexChar","quote","out","chunkStart","readEscapedChar","readTemplateContinuation","containsInvalid","inTemplate","codePos","octalStr","octal","codeLoc","n","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","CannotFindName","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifiersOrder","orderedModifiers","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","typeReference","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","trailingComma","reportReservedArrowTypeParam","toAssignableParenthesizedExpression","isParenthesized","binding","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","isLast","checkToRestConversion","arg","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","ObjectProperty","checkLVal","in","checkClashes","strictModeChanged","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","parseForIn","startsWithAsync","isForOf","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","nodes","surrogate","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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","sourceRoot":""},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/saxes/saxes.js":{"lineLengths":[13,62,44,44,48,18,26,42,32,24,26,26,48,38,34,61,56,16,66,20,23,27,2,22,66,20,13,12,12,15,14,2,20,15,19,36,51,33,47,44,52,26,31,32,46,47,26,45,35,37,28,37,29,43,43,42,31,34,47,47,35,41,42,40,39,48,47,51,44,33,41,26,35,47,37,48,49,49,30,44,14,15,15,19,18,20,17,20,19,27,23,18,19,21,22,26,27,17,36,52,32,62,56,62,73,43,21,19,40,77,13,18,21,42,81,13,18,16,5,18,29,39,67,68,22,18,27,29,27,68,26,24,83,26,24,87,13,18,16,5,1,42,47,51,5,1,49,44,26,28,36,3,32,3,18,14,11,28,14,14,19,16,14,15,12,12,10,12,2,36,30,24,39,30,30,40,34,30,32,26,26,22,26,2,19,7,37,7,22,61,47,58,57,42,23,86,85,86,14,68,19,14,52,42,35,73,56,73,48,74,65,61,37,49,51,13,9,14,50,40,33,73,59,73,51,9,10,82,84,16,10,27,66,24,34,26,31,22,28,30,34,29,35,34,24,30,23,25,27,31,26,32,31,24,30,31,30,25,25,27,35,30,28,36,31,35,32,26,31,25,29,37,30,36,36,38,27,35,10,21,5,7,75,42,7,18,28,5,13,15,31,23,23,27,25,22,23,24,26,24,31,19,23,45,46,29,69,43,37,52,74,84,39,74,21,44,42,43,45,46,52,88,13,38,9,46,35,29,29,24,31,32,34,10,22,24,52,57,84,5,7,76,18,6,74,61,7,20,43,5,7,75,67,6,79,80,80,61,6,73,18,7,23,54,5,7,77,79,47,6,42,6,41,7,23,70,57,5,7,30,6,50,7,15,70,59,5,7,79,80,71,19,6,65,6,66,7,24,15,75,33,33,27,13,49,9,29,24,9,40,5,7,81,81,14,6,42,6,20,7,19,44,42,36,22,9,14,25,9,20,5,7,38,6,42,6,20,7,18,26,85,9,24,29,80,26,23,23,9,45,37,9,83,80,83,81,66,53,62,58,49,9,33,53,19,74,21,78,83,82,44,56,20,42,9,36,27,19,32,74,46,9,36,39,5,7,79,25,6,20,7,13,32,5,7,81,43,6,48,6,35,7,17,34,23,82,52,23,32,23,9,75,34,41,22,28,48,28,13,27,24,32,36,59,30,24,90,57,89,91,32,39,21,88,29,53,32,36,59,35,24,84,55,32,13,9,28,80,84,50,54,51,13,24,9,59,47,23,84,53,31,47,9,21,5,7,81,43,6,48,6,44,7,17,34,23,82,52,23,32,23,9,75,34,41,22,28,79,31,28,13,27,31,32,36,59,30,33,84,28,57,54,91,87,39,21,72,17,39,33,34,32,36,59,35,24,55,32,13,9,28,86,83,59,54,51,13,24,9,59,47,23,82,69,31,47,9,21,5,7,78,32,7,19,33,38,5,13,28,22,5,7,74,18,6,81,63,6,81,79,15,7,22,32,31,57,22,37,43,44,57,60,29,13,27,67,31,13,9,5,7,71,6,79,70,6,80,32,7,25,32,31,57,22,35,24,29,71,35,27,26,25,52,33,24,13,29,60,28,13,9,5,7,80,19,6,79,79,15,7,24,41,57,22,37,28,48,27,13,82,33,60,46,13,9,5,7,25,6,70,79,15,7,18,57,22,41,39,25,13,9,5,28,41,63,32,35,42,9,14,35,42,9,61,5,27,80,57,14,80,82,79,65,57,50,21,26,9,40,5,24,82,83,82,83,40,31,36,37,41,9,20,22,41,86,56,45,62,17,22,21,22,20,29,36,45,9,5,16,15,53,20,27,65,105,31,36,69,22,13,21,22,20,53,41,39,17,38,49,31,17,9,5,21,25,36,49,26,35,9,5,12,49,24,19,9,45,34,35,9,30,41,9,30,38,23,9,5,18,25,36,49,31,26,9,5,20,37,45,20,22,50,39,22,26,38,22,20,35,9,5,24,62,46,26,26,62,35,9,5,19,40,29,46,9,5,25,37,45,71,5,24,37,45,28,31,9,14,44,56,44,39,9,5,14,43,29,41,9,5,20,37,45,28,31,9,5,13,10,80,73,79,47,10,82,83,82,76,81,39,10,37,36,9,14,41,9,5,15,83,32,31,67,14,57,22,37,29,73,35,26,33,55,80,51,31,40,56,38,21,26,58,41,21,89,44,21,57,31,17,25,54,57,31,24,13,9,5,17,74,82,74,18,33,52,33,36,25,41,9,14,24,35,45,49,26,26,50,43,49,26,30,49,26,24,66,40,49,13,9,5,21,70,36,27,68,65,55,17,69,65,54,17,37,39,22,22,39,39,22,27,39,51,78,17,39,22,20,85,48,52,51,17,9,5,16,40,42,9,5,22,15,37,26,41,61,101,27,9,14,55,35,9,5,21,37,28,44,56,44,56,35,9,14,32,9,5,14,48,40,9,5,20,37,34,42,9,14,55,33,9,5,21,15,37,20,27,65,103,31,36,22,13,31,33,22,20,60,37,9,5,80,81,20,37,82,61,37,53,35,9,44,66,66,9,14,78,53,35,9,5,15,81,39,41,57,22,41,28,52,23,13,85,22,37,64,50,43,50,52,98,25,92,21,26,74,21,17,22,86,61,17,22,13,9,5,15,37,41,33,41,13,31,52,13,9,73,40,48,37,9,5,17,15,37,28,38,51,91,13,61,86,33,32,15,43,32,9,34,84,86,83,22,29,9,14,55,35,9,37,5,25,36,73,40,29,70,43,19,9,24,41,48,9,5,20,59,73,40,29,43,35,27,56,19,9,39,19,9,31,23,55,39,23,75,26,23,78,26,24,83,13,9,74,5,18,37,73,40,29,43,56,19,9,21,19,9,26,41,9,44,5,26,37,73,40,29,43,56,19,9,21,19,9,26,47,27,9,14,23,9,38,5,21,53,73,40,29,43,27,56,19,9,24,19,9,32,23,28,29,65,38,47,84,51,75,17,79,53,48,17,22,13,28,63,58,34,17,53,46,22,30,56,80,17,41,48,22,20,82,52,9,23,42,5,25,37,73,40,29,70,43,19,9,22,46,25,9,43,5,22,15,37,28,42,82,13,47,58,69,13,61,104,27,43,32,9,14,83,76,32,85,9,37,5,16,15,42,24,19,9,32,28,44,10,23,28,54,9,57,96,28,51,62,9,20,25,31,22,31,46,22,20,30,67,17,38,9,5,21,41,38,9,14,73,34,9,5,15,36,24,19,9,33,25,39,9,33,27,9,39,42,9,14,65,9,5,19,42,26,40,9,26,49,9,33,50,50,39,27,9,29,65,9,5,27,36,20,21,23,23,44,22,20,54,39,55,31,31,36,35,17,46,33,47,17,22,73,42,17,9,5,20,37,25,23,47,9,27,51,49,25,9,5,26,81,47,34,32,57,22,37,23,91,47,34,55,27,25,64,42,67,27,24,29,25,70,35,26,26,64,55,27,25,52,27,24,13,9,5,26,37,21,34,9,33,27,9,39,42,9,38,59,25,39,9,14,65,9,5,28,76,78,82,64,61,67,20,21,38,65,22,22,51,22,21,22,20,48,80,17,54,43,36,35,17,22,42,17,9,5,17,42,28,28,9,26,47,9,29,62,9,5,25,36,25,32,22,21,22,20,66,9,5,34,24,84,81,80,84,10,84,78,10,48,53,67,18,57,22,37,28,45,48,46,69,48,50,43,25,54,43,25,21,53,57,35,17,25,42,52,48,68,21,53,57,35,35,45,45,63,34,47,71,34,55,34,32,64,21,26,29,71,84,21,53,26,29,48,75,21,35,53,26,25,48,56,21,57,35,24,53,13,9,45,5,29,84,77,83,33,32,53,29,67,21,57,22,40,27,28,45,48,46,69,48,50,43,25,54,43,25,21,57,38,17,25,42,52,48,68,21,36,57,38,29,48,75,21,35,26,25,48,56,21,57,38,24,37,40,21,13,9,24,19,9,76,78,17,60,57,47,9,61,57,46,9,5,31,15,51,52,35,57,94,33,41,69,75,13,40,46,9,36,41,37,43,9,5,34,15,37,35,57,94,5,7,77,31,6,20,7,11,19,28,63,9,30,33,35,51,9,66,41,9,30,32,61,93,27,9,28,57,82,21,20,5,7,34,6,43,6,80,7,21,19,37,32,23,9,30,64,41,36,27,13,9,30,32,23,9,109,5,7,58,6,36,6,15,7,17,53,40,27,47,9,44,44,67,50,9,33,5,24,15,36,29,9,40,59,32,30,98,32,41,72,17,33,86,37,17,13,9,38,19,9,35,31,55,59,40,49,20,23,32,62,30,13,18,43,73,41,40,86,33,17,44,13,35,61,13,29,27,36,9,29,5,27,36,56,47,51,49,59,13,37,9,29,5,7,79,74,21,7,15,15,30,30,29,34,83,75,57,91,23,28,23,5,7,82,79,40,7,26,23,30,30,29,33,83,75,57,91,57,92,98,27,35,9,28,23,5,7,80,74,22,7,16,36,80,23,28,23,26,48,31,19,9,45,28,25,46,32,61,75,36,22,13,47,9,22,35,9,25,57,38,9,5,7,70,6,43,6,34,7,25,66,85,32,50,40,31,13,65,56,33,9,22,65,48,9,44,48,9,76,32,53,33,9,41,5,1,34,33],"data":{"version":3,"file":"saxes.js","sourceRoot":"","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/src/saxes.ts"],"names":[],"mappings":";;AAAA,4CAA4C;AAC5C,4CAA4C;AAC5C,gDAAgD;AAEhD,IAAO,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;AACrB,IAAO,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC;AAC7B,IAAO,eAAe,GAAG,GAAG,CAAC,eAAe,CAAC;AAC7C,IAAO,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;AACnC,IAAO,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;AAC3B,IAAO,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;AAE7B,IAAO,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC;AAE7B,IAAO,iBAAiB,GAAG,KAAK,CAAC,iBAAiB,CAAC;AACnD,IAAO,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;AACzC,IAAO,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;AAErC,MAAM,aAAa,GAAG,sCAAsC,CAAC;AAC7D,MAAM,eAAe,GAAG,+BAA+B,CAAC;AAExD,MAAM,MAAM,GAA2B;IACrC,8DAA8D;IAC9D,SAAS,EAAE,IAAW;IACtB,GAAG,EAAE,aAAa;IAClB,KAAK,EAAE,eAAe;CACvB,CAAC;AAEF,MAAM,YAAY,GAA2B;IAC3C,8DAA8D;IAC9D,SAAS,EAAE,IAAW;IACtB,GAAG,EAAE,GAAG;IACR,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,IAAI,EAAE,IAAI;IACV,IAAI,EAAE,GAAG;CACV,CAAC;AAEF,oBAAoB;AACpB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC;AACf,MAAM,OAAO,GAAG,CAAC,CAAC,CAAC;AAEnB,MAAM,OAAO,GAAG,CAAC,CAAC,CAAC,iBAAiB;AACpC,MAAM,kBAAkB,GAAG,CAAC,CAAC,CAAC,qBAAqB;AACnD,MAAM,SAAS,GAAG,CAAC,CAAC,CAAC,YAAY;AACjC,MAAM,eAAe,GAAG,CAAC,CAAC,CAAC,oBAAoB;AAC/C,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC,2BAA2B;AAC5C,MAAM,YAAY,GAAG,CAAC,CAAC,CAAC,4BAA4B;AACpD,MAAM,eAAe,GAAG,CAAC,CAAC;AAC1B,MAAM,oBAAoB,GAAG,CAAC,CAAC;AAC/B,MAAM,aAAa,GAAG,CAAC,CAAC,CAAC,OAAO;AAChC,MAAM,oBAAoB,GAAG,CAAC,CAAC,CAAC,cAAc;AAC9C,MAAM,mBAAmB,GAAG,EAAE,CAAC,CAAC,eAAe;AAC/C,MAAM,QAAQ,GAAG,EAAE,CAAC,CAAC,KAAK;AAC1B,MAAM,eAAe,GAAG,EAAE,CAAC,CAAC,iBAAiB;AAC7C,MAAM,MAAM,GAAG,EAAE,CAAC,CAAC,gBAAgB;AACnC,MAAM,QAAQ,GAAG,EAAE,CAAC,CAAC,gBAAgB;AACrC,MAAM,WAAW,GAAG,EAAE,CAAC,CAAC,IAAI;AAC5B,MAAM,gBAAgB,GAAG,EAAE,CAAC,CAAC,QAAQ;AACrC,MAAM,SAAS,GAAG,EAAE,CAAC,CAAC,OAAO;AAC7B,MAAM,gBAAgB,GAAG,EAAE,CAAC,CAAC,cAAc;AAC3C,MAAM,eAAe,GAAG,EAAE,CAAC,CAAC,eAAe;AAC3C,MAAM,OAAO,GAAG,EAAE,CAAC,CAAC,sBAAsB;AAC1C,MAAM,cAAc,GAAG,EAAE,CAAC,CAAC,IAAI;AAC/B,MAAM,gBAAgB,GAAG,EAAE,CAAC,CAAC,KAAK;AAClC,MAAM,eAAe,GAAG,EAAE,CAAC,CAAC,mBAAmB;AAC/C,MAAM,SAAS,GAAG,EAAE,CAAC,CAAC,yBAAyB;AAC/C,MAAM,SAAS,GAAG,EAAE,CAAC,CAAC,aAAa;AACnC,MAAM,WAAW,GAAG,EAAE,CAAC,CAAC,iBAAiB;AACzC,MAAM,qBAAqB,GAAG,EAAE,CAAC,CAAC,QAAQ;AAC1C,MAAM,eAAe,GAAG,EAAE,CAAC,CAAC,YAAY;AACxC,MAAM,aAAa,GAAG,EAAE,CAAC,CAAC,aAAa;AACvC,MAAM,sBAAsB,GAAG,EAAE,CAAC,CAAC,aAAa;AAChD,MAAM,gBAAgB,GAAG,EAAE,CAAC,CAAC,kBAAkB;AAC/C,MAAM,oBAAoB,GAAG,EAAE,CAAC,CAAC,kBAAkB;AACnD,MAAM,iBAAiB,GAAG,EAAE,CAAC,CAAC,cAAc;AAC5C,MAAM,UAAU,GAAG,EAAE,CAAC,CAAC,UAAU;AACjC,MAAM,gBAAgB,GAAG,EAAE,CAAC,CAAC,YAAY;AACzC,MAAM,QAAQ,GAAG,EAAE,CAAC,CAAC,KAAK;AAC1B,MAAM,aAAa,GAAG,EAAE,CAAC,CAAC,SAAS;AACnC,MAAM,uBAAuB,GAAG,EAAE,CAAC,CAAC,WAAW;AAC/C,MAAM,cAAc,GAAG,EAAE,CAAC,CAAC,UAAU;AACrC,MAAM,qBAAqB,GAAG,EAAE,CAAC,CAAC,cAAc;AAChD,MAAM,qBAAqB,GAAG,EAAE,CAAC,CAAC,eAAe;AACjD,MAAM,uBAAuB,GAAG,EAAE,CAAC,CAAC,aAAa;AACjD,MAAM,WAAW,GAAG,EAAE,CAAC,CAAC,MAAM;AAC9B,MAAM,qBAAqB,GAAG,EAAE,CAAC,CAAC,UAAU;AAE5C,MAAM,GAAG,GAAG,CAAC,CAAC;AACd,MAAM,EAAE,GAAG,GAAG,CAAC;AACf,MAAM,EAAE,GAAG,GAAG,CAAC;AACf,MAAM,KAAK,GAAG,IAAI,CAAC;AACnB,MAAM,IAAI,GAAG,IAAI,CAAC;AAClB,MAAM,MAAM,GAAG,IAAI,CAAC;AACpB,MAAM,GAAG,GAAG,IAAI,CAAC;AACjB,MAAM,MAAM,GAAG,IAAI,CAAC;AACpB,MAAM,KAAK,GAAG,IAAI,CAAC;AACnB,MAAM,aAAa,GAAG,IAAI,CAAC;AAC3B,MAAM,SAAS,GAAG,IAAI,CAAC;AACvB,MAAM,IAAI,GAAG,IAAI,CAAC;AAClB,MAAM,KAAK,GAAG,IAAI,CAAC;AACnB,MAAM,OAAO,GAAG,IAAI,CAAC;AACrB,MAAM,QAAQ,GAAG,IAAI,CAAC;AACtB,MAAM,YAAY,GAAG,IAAI,CAAC;AAC1B,MAAM,aAAa,GAAG,IAAI,CAAC;AAC3B,MAAM,GAAG,GAAG,IAAI,CAAC;AACjB,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,iBAAiB;AAEpC,MAAM,OAAO,GAAG,CAAC,CAAS,EAAW,EAAE,CAAC,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,MAAM,CAAC;AAErE,MAAM,MAAM,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAEhC,MAAM,kBAAkB,GAAG,CAAC,GAAG,MAAM,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AAC9D,MAAM,cAAc,GAAG,CAAC,GAAG,MAAM,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;AACxD,MAAM,wBAAwB,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,CAAC;AAC9D,MAAM,gCAAgC,GAAG,CAAC,GAAG,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AAEzE,SAAS,WAAW,CAAC,MAAuB,EAAE,MAAc,EACvC,GAAW;IAC9B,QAAQ,MAAM,EAAE;QACd,KAAK,KAAK;YACR,IAAI,GAAG,KAAK,aAAa,EAAE;gBACzB,MAAM,CAAC,IAAI,CAAC,+BAA+B,aAAa,GAAG,CAAC,CAAC;aAC9D;YACD,MAAM;QACR,KAAK,OAAO;YACV,IAAI,GAAG,KAAK,eAAe,EAAE;gBAC3B,MAAM,CAAC,IAAI,CAAC,iCAAiC,eAAe,GAAG,CAAC,CAAC;aAClE;YACD,MAAM;QACR,QAAQ;KACT;IAED,QAAQ,GAAG,EAAE;QACX,KAAK,eAAe;YAClB,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,EAAE,CAAC,CAAC;gBACzB,2CAA2C,GAAG,GAAG,CAAC,CAAC;gBACnD;EACN,eAAe,GAAG,CAAC,CAAC;YAChB,MAAM;QACR,KAAK,aAAa;YAChB,QAAQ,MAAM,EAAE;gBACd,KAAK,KAAK;oBACR,gDAAgD;oBAChD,MAAM;gBACR,KAAK,EAAE;oBACL,MAAM,CAAC,IAAI,CAAC,2CAA2C,GAAG,GAAG,CAAC,CAAC;oBAC/D,MAAM;gBACR;oBACE,MAAM,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;aACtE;YACD,MAAM;QACR,QAAQ;KACT;AACH,CAAC;AAGD,SAAS,cAAc,CAAC,MAAuB,EACvB,OAA+B;IACrD,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QACxC,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;KAC5C;AACH,CAAC;AAED,MAAM,QAAQ,GAAG,CAAC,IAAY,EAAW,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAElE,MAAM,MAAM,GAAG,CAAC,IAAY,EAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAE7D,MAAM,eAAe,GAAG,CAAC,CAAC;AAC1B,MAAM,iBAAiB,GAAG,CAAC,CAAC;AAC5B,MAAM,yBAAyB,GAAG,CAAC,CAAC;AAEpC;;GAEG;AACU,QAAA,MAAM,GAAG;IACpB,SAAS;IACT,MAAM;IACN,uBAAuB;IACvB,SAAS;IACT,SAAS;IACT,cAAc;IACd,WAAW;IACX,SAAS;IACT,UAAU;IACV,OAAO;IACP,OAAO;IACP,KAAK;IACL,OAAO;CACC,CAAC;AAEX,MAAM,0BAA0B,GAA8B;IAC5D,OAAO,EAAE,gBAAgB;IACzB,IAAI,EAAE,aAAa;IACnB,qBAAqB,EAAE,WAAW;IAClC,OAAO,EAAE,gBAAgB;IACzB,OAAO,EAAE,gBAAgB;IACzB,YAAY,EAAE,qBAAqB;IACnC,SAAS,EAAE,kBAAkB;IAC7B,OAAO,EAAE,gBAAgB;IACzB,QAAQ,EAAE,iBAAiB;IAC3B,KAAK,EAAE,cAAc;IACrB,KAAK,EAAE,cAAc;IACrB,GAAG,EAAE,YAAY;IACjB,KAAK,EAAE,cAAc;CACtB,CAAC;AA8WF,MAAa,WAAW;IAyGtB;;OAEG;IACH,YAAY,GAAO;QACjB,IAAI,CAAC,GAAG,GAAG,GAAG,aAAH,GAAG,cAAH,GAAG,GAAI,EAAE,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,QAAoB,CAAC;QACpD,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,KAAiB,CAAC;QAC/D,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,KAAK,CAAC;QACjD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;QAElC,IAAI,QAAQ,EAAE;YACZ,0EAA0E;YAC1E,yEAAyE;YACzE,0EAA0E;YAC1E,EAAE;YACF,wDAAwD;YACxD,OAAO;YACP,EAAE;YACF,IAAI,CAAC,cAAc,GAAG,iBAAiB,CAAC;YACxC,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC;YAC9B,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;YACvB,6DAA6D;YAC7D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAC5C,6DAA6D;YAC7D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;YAGpC,8DAA8D;YAC9D,IAAI,CAAC,EAAE,mBAAK,SAAS,EAAE,IAAW,IAAK,MAAM,CAAE,CAAC;YAChD,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC;YACjD,IAAI,UAAU,IAAI,IAAI,EAAE;gBACtB,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gBACjC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;aACpC;SACF;aACI;YACH,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;YACtC,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC;YAC5B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,6DAA6D;YAC7D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC/C,6DAA6D;YAC7D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC;SACxC;QAED,EAAE;QACF,0EAA0E;QAC1E,4EAA4E;QAC5E,QAAQ;QACR,EAAE;QACF,IAAI,CAAC,UAAU,GAAG;YAChB,sDAAsD;YACtD,IAAI,CAAC,MAAM;YACX,IAAI,CAAC,gBAAgB;YACrB,IAAI,CAAC,QAAQ;YACb,IAAI,CAAC,aAAa;YAClB,IAAI,CAAC,IAAI;YACT,IAAI,CAAC,UAAU;YACf,IAAI,CAAC,YAAY;YACjB,IAAI,CAAC,gBAAgB;YACrB,IAAI,CAAC,WAAW;YAChB,IAAI,CAAC,iBAAiB;YACtB,IAAI,CAAC,gBAAgB;YACrB,IAAI,CAAC,MAAM;YACX,IAAI,CAAC,YAAY;YACjB,IAAI,CAAC,KAAK;YACV,IAAI,CAAC,OAAO;YACZ,IAAI,CAAC,SAAS;YACd,IAAI,CAAC,aAAa;YAClB,IAAI,CAAC,QAAQ;YACb,IAAI,CAAC,cAAc;YACnB,IAAI,CAAC,aAAa;YAClB,IAAI,CAAC,MAAM;YACX,IAAI,CAAC,YAAY;YACjB,IAAI,CAAC,aAAa;YAClB,IAAI,CAAC,YAAY;YACjB,IAAI,CAAC,OAAO;YACZ,IAAI,CAAC,OAAO;YACZ,IAAI,CAAC,SAAS;YACd,IAAI,CAAC,iBAAiB;YACtB,IAAI,CAAC,YAAY;YACjB,IAAI,CAAC,UAAU;YACf,IAAI,CAAC,kBAAkB;YACvB,IAAI,CAAC,aAAa;YAClB,IAAI,CAAC,iBAAiB;YACtB,IAAI,CAAC,cAAc;YACnB,IAAI,CAAC,QAAQ;YACb,IAAI,CAAC,aAAa;YAClB,IAAI,CAAC,OAAO;YACZ,IAAI,CAAC,WAAW;YAChB,IAAI,CAAC,mBAAmB;YACxB,IAAI,CAAC,YAAY;YACjB,IAAI,CAAC,kBAAkB;YACvB,IAAI,CAAC,kBAAkB;YACvB,IAAI,CAAC,oBAAoB;YACzB,IAAI,CAAC,SAAS;YACd,IAAI,CAAC,iBAAiB;SAEvB,CAAC;QAEF,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IA3ID;;;OAGG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAuID,KAAK;;QACH,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QAEjB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;QACd,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QAErB,6DAA6D;QAC7D,mCAAmC;QAEnC,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;QAC5C,kEAAkE;QAClE,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,UAAU;YACxE,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC;QAC7B,kEAAkE;QAClE,aAAa;QACb,IAAI,CAAC,eAAe,GAAG,CAAC,WAAW,CAAC;QAEpC,IAAI,CAAC,cAAc,GAAG,CAAC,SAAS,CAAC,CAAC;QAClC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;QAEnC,IAAI,EAAE,iBAAiB,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;QACrC,IAAI,iBAAiB,KAAK,SAAS,EAAE;YACnC,IAAI,IAAI,CAAC,GAAG,CAAC,eAAe,KAAK,IAAI,EAAE;gBACrC,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;aACzE;YACD,iBAAiB,GAAG,KAAK,CAAC;SAC3B;QACD,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;QAEtC,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAE3B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QAErB,IAAI,CAAC,OAAO,GAAG;YACb,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,SAAS;YACnB,UAAU,EAAE,SAAS;SACtB,CAAC;QAEF,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAEhB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAE5C,iDAAiD;QACjD,MAAA,IAAI,CAAC,YAAY,+CAAjB,IAAI,EAAkB;IACxB,CAAC;IAED;;;;;;OAMG;IACH,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC,CAAC;IACrC,CAAC;IAED;;;;;;;;;;;OAWG;IACH,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC;IAChD,CAAC;IAED;;;;;;;;OAQG;IACH,EAAE,CAAsB,IAAO,EAAE,OAAiC;QAChE,8DAA8D;QAC7D,IAAY,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC;IAC5D,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,IAAe;QACjB,8DAA8D;QAC7D,IAAY,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC,GAAG,SAAS,CAAC;IAC9D,CAAC;IAED;;;;;;;;;OASG;IACH,SAAS,CAAC,OAAe;;QACvB,IAAI,GAAG,SAAG,IAAI,CAAC,QAAQ,mCAAI,EAAE,CAAC;QAC9B,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClB,GAAG,IAAI,GAAG,CAAC;aACZ;YACD,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;SACtC;QACD,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;YAClB,GAAG,IAAI,IAAI,CAAC;SACb;QACD,OAAO,IAAI,KAAK,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC;IAClC,CAAC;IAED;;;;;;;;OAQG;IACH,IAAI,CAAC,OAAe;QAClB,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC;QAClC,IAAI,OAAO,KAAK,SAAS,EAAE;YACzB,MAAM,GAAG,CAAC;SACX;aACI;YACH,OAAO,CAAC,GAAG,CAAC,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,KAAyB;QAC7B,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO,IAAI,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;SAC1E;QAED,IAAI,GAAG,GAAG,KAAK,CAAC;QAChB,IAAI,KAAK,KAAK,IAAI,EAAE;YAClB,oEAAoE;YACpE,cAAc;YACd,GAAG,GAAG,IAAI,CAAC;YACX,KAAK,GAAG,EAAE,CAAC;SACZ;aACI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAClC,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;SAC1B;QAED,2EAA2E;QAC3E,wEAAwE;QACxE,2EAA2E;QAC3E,yEAAyE;QACzE,0DAA0D;QAE1D,IAAI,IAAI,CAAC,mBAAmB,KAAK,SAAS,EAAE;YAC1C,kDAAkD;YAClD,KAAK,GAAG,GAAG,IAAI,CAAC,mBAAmB,GAAG,KAAK,EAAE,CAAC;YAC9C,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;SACtC;QAED,IAAI,KAAK,GAAI,KAAgB,CAAC,MAAM,CAAC;QACrC,MAAM,QAAQ,GAAI,KAAgB,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,GAAG;YACJ,8DAA8D;YAC9D,SAAS;YACT,CAAC,QAAQ,KAAK,EAAE,IAAI,CAAC,QAAQ,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM,CAAC,CAAC,EAAE;YACnE,uEAAuE;YACvE,sEAAsE;YACtE,gCAAgC;YAChC,IAAI,CAAC,mBAAmB,GAAI,KAAgB,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACxD,KAAK,EAAE,CAAC;YACR,KAAK,GAAI,KAAgB,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;SAC3C;QAED,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,KAAe,CAAC;QAC7B,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,OAAO,IAAI,CAAC,CAAC,GAAG,KAAK,EAAE;YACrB,8DAA8D;YAC9D,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAW,CAAC,CAAC;SAC1C;QACD,IAAI,CAAC,aAAa,IAAI,KAAK,CAAC;QAE5B,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACjC,CAAC;IAED;;;;;OAKG;IACH,KAAK;QACH,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED;;;;;;;OAOG;IACK,SAAS;QACf,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,0EAA0E;QAC1E,4CAA4C;QAC5C,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEf,IAAI,CAAC,IAAI,KAAK,CAAC,MAAM,EAAE;YACrB,OAAO,GAAG,CAAC;SACZ;QAED,mEAAmE;QACnE,0BAA0B;QAC1B,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAEjC,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,IAAI,GAAG,MAAM,EAAE;YACjB,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,GAAG,EAAE;gBACjC,OAAO,IAAI,CAAC;aACb;YAED,QAAQ,IAAI,EAAE;gBACZ,KAAK,EAAE;oBACL,IAAI,CAAC,IAAI,EAAE,CAAC;oBACZ,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;oBAChB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACvC,OAAO,EAAE,CAAC;gBACZ,KAAK,EAAE;oBACL,sEAAsE;oBACtE,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;wBAClC,iEAAiE;wBACjE,mEAAmE;wBACnE,QAAQ;wBACR,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;qBAChB;oBACD,oEAAoE;oBACpE,SAAS;oBAET,iCAAiC;oBACjC,IAAI,CAAC,IAAI,EAAE,CAAC;oBACZ,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;oBAChB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACvC,OAAO,OAAO,CAAC;gBACjB;oBACE,gEAAgE;oBAChE,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;oBACnC,OAAO,IAAI,CAAC;aACf;SACF;QAED,IAAI,IAAI,GAAG,MAAM,EAAE;YACjB,oEAAoE;YACpE,wEAAwE;YACxE,sCAAsC;YACtC,IAAI,CAAC,CAAC,IAAI,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,EAAE;gBACvC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;aACpC;YAED,OAAO,IAAI,CAAC;SACb;QAED,MAAM,KAAK,GAAG,OAAO,GAAG,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,KAAK,CAAC;YAC/C,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;QACrC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEf,4EAA4E;QAC5E,6CAA6C;QAC7C,IAAI,KAAK,GAAG,QAAQ,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;SACpC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAGD;;;;;;;OAOG;IACK,SAAS;QACf,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,0EAA0E;QAC1E,4CAA4C;QAC5C,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEf,IAAI,CAAC,IAAI,KAAK,CAAC,MAAM,EAAE;YACrB,OAAO,GAAG,CAAC;SACZ;QAED,mEAAmE;QACnE,0BAA0B;QAC1B,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAEjC,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,IAAI,GAAG,MAAM,EAAE;YACjB,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,KAAK,EAAE,CAAC;gBAC5D,IAAI,KAAK,GAAG,EAAE;gBAChB,OAAO,IAAI,CAAC;aACb;YAED,QAAQ,IAAI,EAAE;gBACZ,KAAK,EAAE,EAAE,MAAM;oBACb,IAAI,CAAC,IAAI,EAAE,CAAC;oBACZ,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;oBAChB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACvC,OAAO,EAAE,CAAC;gBACZ,KAAK,EAAE,CAAC,CAAC,EAAE,MAAM;oBACf,gEAAgE;oBAChE,QAAQ;oBACR,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACrC,IAAI,IAAI,KAAK,EAAE,IAAI,IAAI,KAAK,GAAG,EAAE;wBAC/B,mEAAmE;wBACnE,+DAA+D;wBAC/D,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;qBAChB;oBACD,oDAAoD;iBACrD;gBACD,uBAAuB;gBACvB,KAAK,GAAG,CAAC,CAAC,OAAO;gBACjB,KAAK,EAAE,EAAE,SAAS;oBAChB,IAAI,CAAC,IAAI,EAAE,CAAC;oBACZ,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;oBAChB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACvC,OAAO,OAAO,CAAC;gBACjB;oBACE,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;oBACnC,OAAO,IAAI,CAAC;aACf;SACF;QAED,IAAI,IAAI,GAAG,MAAM,EAAE;YACjB,0EAA0E;YAC1E,uEAAuE;YACvE,+CAA+C;YAC/C,IAAI,CAAC,CAAC,IAAI,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,EAAE;gBACvC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;aACpC;YAED,OAAO,IAAI,CAAC;SACb;QAED,MAAM,KAAK,GAAG,OAAO,GAAG,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,KAAK,CAAC;YAC/C,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;QACrC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEf,0EAA0E;QAC1E,6DAA6D;QAC7D,IAAI,KAAK,GAAG,QAAQ,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;SACpC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;OAGG;IACK,WAAW;QACjB,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QACzB,OAAO,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC;IAEO,KAAK;QACX,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;;;;;;;;;OAUG;IACK,SAAS,CAAC,KAAe;QAC/B,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACxB,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACvB,iDAAiD;QACjD,OAAO,IAAI,EAAE;YACX,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YACzB,MAAM,QAAQ,GAAG,CAAC,KAAK,OAAO,CAAC;YAC/B,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,KAAK,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBAC1C,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC5C,OAAO,KAAK,CAAC;aACd;YAED,IAAI,QAAQ,EAAE;gBACZ,IAAI,CAAC,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBACnD,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;aAChB;SACF;IACH,CAAC;IAED;;;;;;;;OAQG;IACK,aAAa,CAAC,IAAY;QAChC,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACxB,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACvB,iDAAiD;QACjD,OAAO,IAAI,EAAE;YACX,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YACvB,QAAQ,CAAC,EAAE;gBACT,KAAK,OAAO;oBACV,IAAI,CAAC,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;oBACnD,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;oBACf,CAAC,GAAG,EAAE,CAAC;oBACP,MAAM;gBACR,KAAK,GAAG;oBACN,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBAChC,OAAO,KAAK,CAAC;gBACf,QAAQ;aACT;YAED,IAAI,CAAC,KAAK,IAAI,EAAE;gBACd,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC5C,OAAO,IAAI,CAAC;aACb;SACF;IACH,CAAC;IAED;;;;;;;OAOG;IACK,gBAAgB;QACtB,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACjC,iDAAiD;QACjD,OAAO,IAAI,EAAE;YACX,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YACzB,IAAI,CAAC,KAAK,GAAG,EAAE;gBACb,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAChC,OAAO,GAAG,CAAC;aACZ;YAED,sEAAsE;YACtE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;gBAClB,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC5C,OAAO,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;aAC/B;SACF;IACH,CAAC;IAED;;;;;;OAMG;IACK,UAAU;QAChB,iDAAiD;QACjD,OAAO,IAAI,EAAE;YACX,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBACxB,OAAO,CAAC,CAAC;aACV;SACF;IACH,CAAC;IAEO,aAAa,CAAC,OAAe;QACnC,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;QACjC,uDAAuD;QACvD,IAAI,OAAO,KAAK,KAAK,EAAE;YACrB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;SAC/B;aACI;YACH,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;SAC/B;QACD,qDAAqD;IACvD,CAAC;IAED,uBAAuB;IAEvB,4EAA4E;IAC5E,qDAAqD;IAC7C,MAAM;QACZ,wEAAwE;QACxE,0EAA0E;QAC1E,uEAAuE;QACvE,yDAAyD;QAEzD,iDAAiD;QACjD,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;YACvC,IAAI,CAAC,CAAC,EAAE,CAAC;YACT,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;QAED,IAAI,CAAC,KAAK,GAAG,kBAAkB,CAAC;IAClC,CAAC;IAEO,gBAAgB;QACtB,0EAA0E;QAC1E,2EAA2E;QAC3E,0EAA0E;QAC1E,2EAA2E;QAC3E,gCAAgC;QAChC,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC;QACvB,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAC5B,IAAI,IAAI,CAAC,KAAK,KAAK,OAAO,EAAE;YAC1B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;SAC9B;QAED,QAAQ,CAAC,EAAE;YACT,KAAK,IAAI;gBACP,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;gBACzB,sEAAsE;gBACtE,wCAAwC;gBACxC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC1B,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;iBAC3C;gBACD,MAAM;YACR,KAAK,GAAG;gBACN,MAAM;YACR;gBACE,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;gBACpB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;SAChC;IACH,CAAC;IAEO,QAAQ;;QACd,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;QAC7C,QAAQ,CAAC,EAAE;YACT,KAAK,OAAO,CAAC,CAAC;gBACZ,iDAAiD;gBACjD,MAAA,IAAI,CAAC,cAAc,+CAAnB,IAAI,EAAkB,IAAI,CAAC,IAAI,EAAE;gBACjC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;gBACf,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;gBACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,gCAAgC;gBACrD,MAAM;aACP;YACD,KAAK,GAAG;gBACN,MAAM;YACR;gBACE,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBACrC,IAAI,CAAC,KAAK,YAAY,EAAE;oBACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;iBACpB;qBACI,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;oBACnB,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC;oBAC7B,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;iBACZ;SACJ;IACH,CAAC;IAEO,aAAa;QACnB,MAAM,CAAC,GAAG,IAAI,CAAC,CAAE,CAAC;QAClB,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE;YACzB,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;YACd,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;SACxB;IACH,CAAC;IAEO,IAAI;QACV,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QACzC,IAAI,CAAC,KAAK,GAAG,EAAE;YACb,OAAO;SACR;QAED,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,aAAa,EAAE;YACvB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;SACxB;aACI,IAAI,CAAC,KAAK,IAAI,EAAE;YACnB,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC;SAC9B;aACI,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;YACnB,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC;YAC1B,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;SACZ;IACH,CAAC;IAEO,UAAU;QAChB,MAAM,CAAC,GAAG,IAAI,CAAC,CAAE,CAAC;QAClB,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE;YACzB,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;SACf;IACH,CAAC;IAEO,YAAY;QAClB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACrC,QAAQ,CAAC,EAAE;YACT,KAAK,IAAI;gBACP,IAAI,CAAC,KAAK,GAAG,oBAAoB,CAAC;gBAClC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;gBACvB,MAAM;YACR,KAAK,QAAQ;gBACX,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;gBACtB,MAAM;YACR;gBACE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACtB;IACH,CAAC;IAEO,gBAAgB;QACtB,MAAM,IAAI,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QACtD,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC;QACtC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC;QAClB,IAAI,GAAG,KAAK,GAAG,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC;YAClD,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;SACxB;IACH,CAAC;IAEO,WAAW;QACjB,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;YAC7B,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC;YACjB,IAAI,CAAC,KAAK,GAAG,oBAAoB,CAAC;SACnC;IACH,CAAC;IAEO,iBAAiB;QACvB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,aAAa,CAAC;IACjE,CAAC;IAEO,gBAAgB;QACtB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,OAAO,EAAE;YACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACpB;aACI;YACH,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAChC,4CAA4C;YAC5C,gCAAgC;YAChC,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;SAC5B;IACH,CAAC;IAEO,MAAM;QACZ,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YAChC,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC;YACjB,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC;SAC9B;IACH,CAAC;IAEO,YAAY;QAClB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,OAAO,EAAE;YACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACpB;IACH,CAAC;IAEO,KAAK;QACX,EAAE;QACF,wEAAwE;QACxE,iEAAiE;QACjE,uEAAuE;QACvE,uCAAuC;QACvC,EAAE;QACF,0EAA0E;QAC1E,2EAA2E;QAC3E,0EAA0E;QAC1E,oEAAoE;QACpE,yEAAyE;QACzE,+BAA+B;QAC/B,EAAE;QACF,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB;aACI;YACH,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC9B;IACH,CAAC;IAEO,OAAO;QACb,2EAA2E;QAC3E,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACxB,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACvB,2DAA2D;QAC3D,IAAI;QACJ,iDAAiD;QACjD,OAAO,IAAI,EAAE;YACX,QAAQ,IAAI,CAAC,OAAO,EAAE,EAAE;gBACtB,KAAK,OAAO;oBACV,IAAI,CAAC,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;oBACrD,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;oBACf,MAAM;gBACR,KAAK,SAAS,CAAC,CAAC;oBACd,MAAM,EAAE,iBAAiB,EAAE,GAAG,IAAI,CAAC;oBACnC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC5D,IAAI,CAAC,KAAK,GAAG,iBAAkB,CAAC;oBAChC,IAAI,MAAc,CAAC;oBACnB,IAAI,MAAM,KAAK,EAAE,EAAE;wBACjB,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;wBAChC,MAAM,GAAG,IAAI,CAAC;qBACf;yBACI;wBACH,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;wBAClC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;qBAClB;oBAED,IAAI,iBAAiB,KAAK,MAAM,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE;wBAClE,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC;qBACrB;oBACD,qCAAqC;oBACrC,MAAM,IAAI,CAAC;iBACZ;gBACD,KAAK,GAAG;oBACN,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBAClC,qCAAqC;oBACrC,MAAM,IAAI,CAAC;gBACb,QAAQ;aACT;SACF;IACH,CAAC;IAEO,SAAS;QACf,kEAAkE;QAClE,0EAA0E;QAC1E,kEAAkE;QAClE,UAAU;QACV,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QACzB,4CAA4C;QAC5C,IAAI,eAAe,CAAC,CAAC,CAAC,EAAE;YACtB,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;YACxB,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;SAC9B;aACI;YACH,QAAQ,CAAC,EAAE;gBACT,KAAK,aAAa;oBAChB,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;oBACzB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;oBAC7B,MAAM;gBACR,KAAK,IAAI;oBACP,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC;oBAC9B,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;oBACvB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;oBAC7B,MAAM;gBACR,KAAK,QAAQ;oBACX,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC;oBAC7B,MAAM;gBACR;oBACE,IAAI,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;oBAC9C,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;oBACpB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;aAChC;SACF;IACH,CAAC;IAEO,aAAa;QACnB,IAAI,CAAC,YAAY,IAAI,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QAC9D,QAAQ,IAAI,CAAC,YAAY,EAAE;YACzB,KAAK,SAAS;gBACZ,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;oBACjD,IAAI,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;oBAC7C,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;iBACpC;gBAED,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;oBAClD,IAAI,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;oBAC7C,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;iBACnC;gBACD,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;gBACrB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;gBACvB,MAAM;YACR,KAAK,IAAI;gBACP,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;gBACvB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;gBACvB,MAAM;YACR,KAAK,SAAS;gBACZ,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;gBACvB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;oBAChC,IAAI,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;iBAC3D;gBACD,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;gBACvB,MAAM;YACR;gBACE,qEAAqE;gBACrE,gCAAgC;gBAChC,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,IAAI,CAAC,EAAE;oBACjC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;iBAChC;SACJ;IACH,CAAC;IAEO,QAAQ;QACd,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;YAC7B,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC;SAC/B;IACH,CAAC;IAEO,cAAc;;QACpB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,CAAC,KAAK,KAAK,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC;YAC7B,iDAAiD;YACjD,MAAA,IAAI,CAAC,cAAc,+CAAnB,IAAI,EAAkB,IAAI,CAAC,IAAI,EAAE;YACjC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;SAChB;aACI;YACH,IAAI,CAAC,IAAI,IAAI,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;YAC3C,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;SACxB;IACH,CAAC;IAEO,aAAa;QACnB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,CAAC,KAAK,OAAO,EAAE;YACjB,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAChC,4CAA4C;YAC5C,gCAAgC;YAChC,IAAI,CAAC,IAAI,IAAI,KAAK,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;YAC5C,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;SACxB;aACI;YACH,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;SACrB;IACH,CAAC;IAEO,MAAM;QACZ,IAAI,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,EAAE;YACrC,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC;SAC7B;IACH,CAAC;IAEO,YAAY;QAClB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,CAAC,KAAK,aAAa,EAAE;YACvB,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC;SAC/B;aACI;YACH,IAAI,CAAC,IAAI,IAAI,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;YAC3C,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;SACtB;IACH,CAAC;IAEO,aAAa;;QACnB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,QAAQ,CAAC,EAAE;YACT,KAAK,OAAO,CAAC,CAAC;gBACZ,iDAAiD;gBACjD,MAAA,IAAI,CAAC,YAAY,+CAAjB,IAAI,EAAgB,IAAI,CAAC,IAAI,EAAE;gBAC/B,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;gBACf,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;gBACpB,MAAM;aACP;YACD,KAAK,aAAa;gBAChB,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC;gBACjB,MAAM;YACR;gBACE,IAAI,CAAC,IAAI,IAAI,KAAK,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC5C,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;SACxB;IACH,CAAC;IAED,4EAA4E;IAC5E,6EAA6E;IACrE,YAAY;QAClB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,0EAA0E;QAC1E,qDAAqD;QACrD,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;YAC1B,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;SACxB;aACI,IAAI,CAAC,KAAK,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;YACtD,IAAI,CAAC,KAAK,GAAG,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;SACvD;aACI;YACH,IAAI,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;YAClE,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;SACxB;IACH,CAAC;IAEO,OAAO;QACb,yEAAyE;QACzE,+BAA+B;QAC/B,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACjC,iDAAiD;QACjD,OAAO,IAAI,EAAE;YACX,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,EAAE;gBACb,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACpC,OAAO;aACR;YAED,yEAAyE;YACzE,UAAU;YACV,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;gBACtB,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChD,MAAM,UAAU,GAAG,CAAC,KAAK,QAAQ,CAAC;gBAClC,IAAI,UAAU,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE;oBACxB,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,EAAE;wBAC3B,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;4BACzB,IAAI,CAAC,IAAI,CACP,0DAA0D,CAAC,CAAC;yBAC/D;wBAED,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,qBAAqB,CAAC;qBACrE;yBACI;wBACH,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;qBACnD;iBACF;qBACI;oBACH,IAAI,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;oBAClE,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;iBAC1C;gBACD,MAAM;aACP;SACF;IACH,CAAC;IAEO,OAAO;QACb,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAC7B,IAAI,CAAC,KAAK,QAAQ,EAAE;gBAClB,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;aAC1B;iBACI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBAChB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;aACrC;SACF;QACD,iEAAiE;QACjE,gCAAgC;aAC3B,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YACrC,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;SAC1B;IACH,CAAC;IAEO,SAAS;;QACf,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,CAAC,KAAK,OAAO,EAAE;YACjB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;YAC1B,IAAI,QAAQ,CAAC,WAAW,EAAE,KAAK,KAAK,EAAE;gBACpC,IAAI,CAAC,IAAI,CACP,+DAA+D,CAAC,CAAC;aACpE;YACD,iDAAiD;YACjD,MAAA,IAAI,CAAC,SAAS,+CAAd,IAAI,EAAa;gBACf,MAAM,EAAE,QAAQ;gBAChB,IAAI,EAAE,IAAI,CAAC,IAAI;aAChB,EAAE;YACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;YAC/B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;SACrB;aACI,IAAI,CAAC,KAAK,QAAQ,EAAE;YACvB,wEAAwE;YACxE,0EAA0E;YAC1E,uEAAuE;YACvE,UAAU;YACV,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC;SAClB;aACI;YACH,IAAI,CAAC,IAAI,IAAI,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;YAC3C,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;SACxB;QACD,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IAC/B,CAAC;IAEO,iBAAiB;QACvB,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAE5B,iEAAiE;QACjE,gCAAgC;QAChC,IAAI,CAAC,KAAK,QAAQ,EAAE;YAClB,0DAA0D;YAC1D,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC;YAC/B,OAAO;SACR;QAED,IAAI,CAAC,KAAK,GAAG,EAAE;YACb,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC;YAC7B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;SACrC;IACH,CAAC;IAEO,YAAY;QAClB,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;QACnD,iEAAiE;QACjE,gCAAgC;QAChC,IAAI,CAAC,KAAK,QAAQ,EAAE;YAClB,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC;YAC/B,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC;YACvB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;YACf,IAAI,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAC5C,OAAO;SACR;QAED,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;YAC5B,OAAO;SACR;QAED,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAC5C,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBACxB,KAAK,CAAC;oBACJ,IAAI,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;oBACvD,MAAM;gBACR,KAAK,CAAC;oBACJ,IAAI,CAAC,IAAI,CAAC,qBAAqB,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;oBAC1D,MAAM;gBACR;oBACE,IAAI,CAAC,IAAI,CAAC,mBAAmB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aAClE;SACF;QAED,IAAI,CAAC,KAAK,GAAG,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,aAAa,CAAC;IACpE,CAAC;IAEO,UAAU;QAChB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,iEAAiE;QACjE,gCAAgC;QAChC,IAAI,CAAC,KAAK,QAAQ,EAAE;YAClB,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAC5C,OAAO;SACR;QAED,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE;YACV,OAAO;SACR;QAED,IAAI,CAAC,KAAK,KAAK,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAC9B;QAED,IAAI,CAAC,KAAK,GAAG,sBAAsB,CAAC;IACtC,CAAC;IAEO,kBAAkB;QACxB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,iEAAiE;QACjE,gCAAgC;QAChC,IAAI,CAAC,KAAK,QAAQ,EAAE;YAClB,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAC5C,OAAO;SACR;QAED,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE;YACV,OAAO;SACR;QAED,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YACnC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;SAChB;aACI;YACH,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;SACZ;QAED,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC;IAChC,CAAC;IAEO,aAAa;QACnB,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;QAE9C,iEAAiE;QACjE,gCAAgC;QAChC,IAAI,CAAC,KAAK,QAAQ,EAAE;YAClB,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC;YAC/B,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;YACf,IAAI,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAC5C,OAAO;SACR;QAED,IAAI,CAAC,KAAK,GAAG,EAAE;YACb,OAAO;SACR;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,QAAQ,IAAI,CAAC,IAAI,EAAE;YACjB,KAAK,SAAS,CAAC,CAAC;gBACd,IAAI,CAAC,cAAc,GAAG,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;gBACjD,MAAM,OAAO,GAAG,KAAK,CAAC;gBACtB,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;gBAC/B,oEAAoE;gBACpE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;oBAChC,IAAI,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;iBACxD;gBACD,+DAA+D;qBAC1D,IAAI,CAAE,IAAI,CAAC,GAAG,CAAC,eAA2B,EAAE;oBAC/C,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;iBAC7B;gBACD,MAAM;aACP;YACD,KAAK,UAAU;gBACb,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;oBAC5C,IAAI,CAAC,IAAI,CAAC;gCACY,CAAC,CAAC;iBACzB;gBACD,IAAI,CAAC,cAAc,GAAG,CAAC,YAAY,CAAC,CAAC;gBACrC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;gBAC9B,MAAM;YACR,KAAK,YAAY;gBACf,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,EAAE;oBACrC,IAAI,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;iBAC7D;gBACD,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;gBACzB,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC;gBAChC,MAAM;YACR,QAAQ;YACN,sEAAsE;YACtE,wCAAwC;SAC3C;QACD,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,oBAAoB,CAAC;IACpC,CAAC;IAEO,iBAAiB;QACvB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAE7B,iEAAiE;QACjE,gCAAgC;QAChC,IAAI,CAAC,KAAK,QAAQ,EAAE;YAClB,0DAA0D;YAC1D,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC;YAC/B,OAAO;SACR;QAED,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YACX,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YAClC,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;QAED,IAAI,CAAC,KAAK,GAAG,qBAAqB,CAAC;IACrC,CAAC;IAEO,cAAc;;QACpB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,CAAC,KAAK,OAAO,EAAE;YACjB,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,EAAE;gBAC3B,IAAI,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;aACnE;iBACI,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;gBACvB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;gBAChD,IAAI,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;aACtD;YACD,iDAAiD;YACjD,MAAA,IAAI,CAAC,cAAc,+CAAnB,IAAI,EAAkB,IAAI,CAAC,OAAO,EAAE;YACpC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;YAC/B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;SACrB;aACI;YACH,uEAAuE;YACvE,gEAAgE;YAChE,oBAAoB;YACpB,IAAI,CAAC,IAAI,CACP,6DAA6D,CAAC,CAAC;SAClE;QACD,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IAC/B,CAAC;IAEO,QAAQ;;QACd,MAAM,CAAC,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,EAAE;YACb,OAAO;SACR;QAED,MAAM,GAAG,GAAuB,IAAI,CAAC,GAAG,GAAG;YACzC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,UAAU,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAA2B;SAC1D,CAAC;QACF,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QAEf,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC3C;QAED,iDAAiD;QACjD,MAAA,IAAI,CAAC,mBAAmB,+CAAxB,IAAI,EAAuB,GAA4B,EAAE;QACzD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;SACnD;QAED,QAAQ,CAAC,EAAE;YACT,KAAK,OAAO;gBACV,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,MAAM;YACR,KAAK,aAAa;gBAChB,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC;gBAC9B,MAAM;YACR;gBACE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;oBACX,IAAI,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;iBAChD;gBACD,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;SACzB;IACH,CAAC;IAEO,aAAa;QACnB,IAAI,IAAI,CAAC,OAAO,EAAE,KAAK,OAAO,EAAE;YAC9B,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B;aACI;YACH,IAAI,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;YAC7D,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;SACvB;IACH,CAAC;IAEO,OAAO;QACb,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,EAAE;YACb,OAAO;SACR;QACD,IAAI,eAAe,CAAC,CAAC,CAAC,EAAE;YACtB,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;SAC5B;aACI,IAAI,CAAC,KAAK,OAAO,EAAE;YACtB,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;aACI,IAAI,CAAC,KAAK,aAAa,EAAE;YAC5B,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC;SAC/B;aACI;YACH,IAAI,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;SACtD;IACH,CAAC;IAEO,WAAW;QACjB,MAAM,CAAC,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAClC,IAAI,CAAC,KAAK,KAAK,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC;SAC7B;aACI,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,uBAAuB,CAAC;SACtC;aACI,IAAI,CAAC,KAAK,OAAO,EAAE;YACtB,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;YACtC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;YAC3B,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;aACI,IAAI,CAAC,KAAK,GAAG,EAAE;YAClB,IAAI,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;SACtD;IACH,CAAC;IAEO,mBAAmB;QACzB,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAC5B,QAAQ,CAAC,EAAE;YACT,KAAK,GAAG;gBACN,OAAO;YACT,KAAK,KAAK;gBACR,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC;gBAC5B,MAAM;YACR;gBACE,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;gBACtC,uBAAuB;gBACvB,uCAAuC;gBACvC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;gBACf,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;gBACf,IAAI,CAAC,KAAK,OAAO,EAAE;oBACjB,IAAI,CAAC,OAAO,EAAE,CAAC;iBAChB;qBACI,IAAI,eAAe,CAAC,CAAC,CAAC,EAAE;oBAC3B,IAAI,CAAC,KAAK,EAAE,CAAC;oBACb,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;iBAC5B;qBACI;oBACH,IAAI,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;oBACrD,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;iBACvB;SACJ;IACH,CAAC;IAEO,YAAY;QAClB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;YACd,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YACX,IAAI,CAAC,KAAK,GAAG,qBAAqB,CAAC;SACpC;aACI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;YACvC,IAAI,CAAC,KAAK,GAAG,uBAAuB,CAAC;YACrC,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;IACH,CAAC;IAEO,kBAAkB;QACxB,yEAAyE;QACzE,uCAAuC;QACvC,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QAC1B,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACxB,iDAAiD;QACjD,OAAO,IAAI,EAAE;YACX,QAAQ,IAAI,CAAC,OAAO,EAAE,EAAE;gBACtB,KAAK,CAAC;oBACJ,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC5D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;oBAC3B,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;oBACd,IAAI,CAAC,KAAK,GAAG,qBAAqB,CAAC;oBACnC,OAAO;gBACT,KAAK,GAAG;oBACN,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC5C,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;oBACtB,IAAI,CAAC,iBAAiB,GAAG,qBAAqB,CAAC;oBAC/C,OAAO;gBACT,KAAK,EAAE,CAAC;gBACR,KAAK,OAAO,CAAC;gBACb,KAAK,GAAG;oBACN,IAAI,CAAC,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;oBAClD,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;oBACf,MAAM;gBACR,KAAK,IAAI;oBACP,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC5C,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;oBACnC,OAAO;gBACT,KAAK,GAAG;oBACN,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBAChC,OAAO;gBACT,QAAQ;aACT;SACF;IACH,CAAC;IAEO,kBAAkB;QACxB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE;YACV,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;SACvB;aACI,IAAI,CAAC,KAAK,OAAO,EAAE;YACtB,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;aACI,IAAI,CAAC,KAAK,aAAa,EAAE;YAC5B,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC;SAC/B;aACI,IAAI,eAAe,CAAC,CAAC,CAAC,EAAE;YAC3B,IAAI,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;YAC/C,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;SAC5B;aACI;YACH,IAAI,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;SACtD;IACH,CAAC;IAEO,oBAAoB;QAC1B,oEAAoE;QACpE,sEAAsE;QACtE,0EAA0E;QAC1E,wDAAwD;QACxD,qDAAqD;QACrD,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,gCAAgC,CAAC,CAAC;QAC3D,QAAQ,CAAC,EAAE;YACT,KAAK,GAAG;gBACN,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;gBACtB,IAAI,CAAC,iBAAiB,GAAG,uBAAuB,CAAC;gBACjD,MAAM;YACR,KAAK,IAAI;gBACP,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;gBACnC,MAAM;YACR,KAAK,GAAG;gBACN,MAAM;YACR;gBACE,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;oBAC7B,IAAI,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;iBAC7D;gBACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBACtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;gBAC3B,IAAI,CAAC,KAAK,OAAO,EAAE;oBACjB,IAAI,CAAC,OAAO,EAAE,CAAC;iBAChB;qBACI;oBACH,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;iBACvB;SACJ;IACH,CAAC;IAEO,SAAS;QACf,MAAM,CAAC,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAClC,IAAI,CAAC,KAAK,OAAO,EAAE;YACjB,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB;aACI,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,qBAAqB,CAAC;SACpC;aACI,IAAI,CAAC,KAAK,GAAG,EAAE;YAClB,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;SACnD;IACH,CAAC;IAEO,iBAAiB;QACvB,QAAQ,IAAI,CAAC,UAAU,EAAE,EAAE;YACzB,KAAK,OAAO;gBACV,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAChB,MAAM;YACR,KAAK,GAAG;gBACN,MAAM;YACR;gBACE,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;SACrD;IACH,CAAC;IAED,8BAA8B;IAEtB,gBAAgB;QACtB,4EAA4E;QAC5E,yEAAyE;QACzE,wEAAwE;QACxE,4EAA4E;QAC5E,EAAE;QACF,4EAA4E;QAC5E,sEAAsE;QACtE,EAAE;QACF,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC;QACxC,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAC7C,2DAA2D;QAC3D,QAAQ;QACR,iDAAiD;QACjD,OAAO,IAAI,EAAE;YACX,QAAQ,IAAI,CAAC,OAAO,EAAE,EAAE;gBACtB,KAAK,IAAI,CAAC,CAAC;oBACT,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;oBACzB,IAAI,OAAO,KAAK,SAAS,EAAE;wBACzB,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;wBACtB,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;wBAC7C,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;4BACrB,OAAO,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;4BACtB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;yBAChB;6BACI,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;4BAC3B,OAAO,CAAC,KAAK,CAAC,CAAC;yBAChB;qBACF;oBACD,cAAc,GAAG,eAAe,CAAC;oBACjC,qCAAqC;oBACrC,MAAM,QAAQ,CAAC;iBAChB;gBACD,KAAK,GAAG;oBACN,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;oBACtB,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;oBAChC,IAAI,OAAO,KAAK,SAAS,EAAE;wBACzB,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;qBAC7C;oBACD,cAAc,GAAG,eAAe,CAAC;oBACjC,qCAAqC;oBACrC,MAAM,QAAQ,CAAC;gBACjB,KAAK,aAAa;oBAChB,QAAQ,cAAc,EAAE;wBACtB,KAAK,eAAe;4BAClB,cAAc,GAAG,iBAAiB,CAAC;4BACnC,MAAM;wBACR,KAAK,iBAAiB;4BACpB,cAAc,GAAG,yBAAyB,CAAC;4BAC3C,MAAM;wBACR,KAAK,yBAAyB;4BAC5B,MAAM;wBACR;4BACE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;qBACvC;oBACD,MAAM;gBACR,KAAK,OAAO;oBACV,IAAI,cAAc,KAAK,yBAAyB,EAAE;wBAChD,IAAI,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;qBAC7D;oBACD,cAAc,GAAG,eAAe,CAAC;oBACjC,MAAM;gBACR,KAAK,OAAO;oBACV,IAAI,OAAO,KAAK,SAAS,EAAE;wBACzB,IAAI,CAAC,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;qBACpD;oBACD,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;oBACf,cAAc,GAAG,eAAe,CAAC;oBACjC,MAAM;gBACR,KAAK,GAAG;oBACN,IAAI,OAAO,KAAK,SAAS,EAAE;wBACzB,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;qBACjC;oBACD,qCAAqC;oBACrC,MAAM,QAAQ,CAAC;gBACjB;oBACE,cAAc,GAAG,eAAe,CAAC;aACpC;SACF;QACD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEO,qBAAqB;QAC3B,4EAA4E;QAC5E,qEAAqE;QACrE,2EAA2E;QAC3E,yBAAyB;QACzB,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACxB,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAC7C,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,2DAA2D;QAC3D,WAAW;QACX,iDAAiD;QACjD,OAAO,IAAI,EAAE;YACX,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAC5B,QAAQ,IAAI,EAAE;gBACZ,KAAK,IAAI,CAAC,CAAC;oBACT,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;oBACzB,IAAI,OAAO,KAAK,SAAS,EAAE;wBACzB,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;wBACtB,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;wBAC7C,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;4BACrB,OAAO,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;4BACtB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;yBAChB;6BACI,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;4BAC3B,OAAO,CAAC,KAAK,CAAC,CAAC;yBAChB;qBACF;oBACD,qCAAqC;oBACrC,MAAM,WAAW,CAAC;iBACnB;gBACD,KAAK,GAAG;oBACN,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;oBACtB,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;oBAChC,IAAI,OAAO,KAAK,SAAS,EAAE;wBACzB,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;qBAC7C;oBACD,QAAQ,GAAG,IAAI,CAAC;oBAChB,qCAAqC;oBACrC,MAAM,WAAW,CAAC;gBACpB,KAAK,OAAO;oBACV,IAAI,OAAO,KAAK,SAAS,EAAE;wBACzB,IAAI,CAAC,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;qBACpD;oBACD,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;oBACf,MAAM;gBACR,KAAK,GAAG;oBACN,IAAI,OAAO,KAAK,SAAS,EAAE;wBACzB,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;qBACjC;oBACD,qCAAqC;oBACrC,MAAM,WAAW,CAAC;gBACpB;oBACE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;wBACd,QAAQ,GAAG,IAAI,CAAC;qBACjB;aACJ;SACF;QAED,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;SACR;QAED,oEAAoE;QACpE,sEAAsE;QACtE,SAAS;QACT,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;YACjD,IAAI,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;YAC7C,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;SACpC;QAED,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;YAClD,IAAI,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;YAC7C,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;SACnC;IACH,CAAC;IAEO,YAAY,CAAC,IAAY,EAAE,KAAa;;QAC9C,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3C,MAAM,IAAI,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QAC5C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,iDAAiD;QACjD,MAAA,IAAI,CAAC,gBAAgB,+CAArB,IAAI,EAAoB,IAAmC,EAAE;QAC7D,IAAI,MAAM,KAAK,OAAO,EAAE;YACtB,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YAC7B,IAAI,IAAI,CAAC,iBAAiB,KAAK,KAAK,IAAI,OAAO,KAAK,EAAE,EAAE;gBACtD,IAAI,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;aAC5D;YACD,IAAI,CAAC,KAAM,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;YAC7B,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;SACnC;aACI,IAAI,IAAI,KAAK,OAAO,EAAE;YACzB,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YAC7B,IAAI,CAAC,KAAM,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC;YAC1B,WAAW,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;SAChC;IACH,CAAC;IAEO,eAAe,CAAC,IAAY,EAAE,KAAa;;QACjD,MAAM,IAAI,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;QAC7B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,iDAAiD;QACjD,MAAA,IAAI,CAAC,gBAAgB,+CAArB,IAAI,EAAoB,IAAmC,EAAE;IAC/D,CAAC;IAED;;;;;OAKG;IACK,GAAG;;QACT,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;SACpD;QACD,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACtB,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAG,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC,iBAAiB,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;SACxC;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,MAAM,CAAC,EAAE;YACvD,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAC9B;QACD,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACtB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,iDAAiD;YACjD,MAAA,IAAI,CAAC,WAAW,+CAAhB,IAAI,EAAe,IAAI,EAAE;YACzB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;SAChB;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,iDAAiD;QACjD,MAAA,IAAI,CAAC,UAAU,+CAAf,IAAI,EAAgB;QACpB,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACH,OAAO,CAAC,MAAc;;QACpB,IAAI,GAAG,GAAG,IAAI,CAAC,KAAM,CAAC,MAAM,CAAC,CAAC;QAC9B,IAAI,GAAG,KAAK,SAAS,EAAE;YACrB,OAAO,GAAG,CAAC;SACZ;QAED,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACtB,KAAK,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE;YACrD,GAAG,GAAG,IAAI,CAAC,KAAK,CAAE,CAAC,EAAG,CAAC,MAAM,CAAC,CAAC;YAC/B,IAAI,GAAG,KAAK,SAAS,EAAE;gBACrB,OAAO,GAAG,CAAC;aACZ;SACF;QAED,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;QACtB,IAAI,GAAG,KAAK,SAAS,EAAE;YACrB,OAAO,GAAG,CAAC;SACZ;QAED,aAAO,MAAA,IAAI,CAAC,GAAG,EAAC,aAAa,mDAAG,MAAM,EAAE;IAC1C,CAAC;IAED;;;;;;OAMG;IACK,KAAK,CAAC,IAAY;QACxB,6CAA6C;QAC7C,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;YAChB,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;SACpC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QACpC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACpC,IAAI,MAAM,KAAK,EAAE,IAAI,KAAK,KAAK,EAAE,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACxD,IAAI,CAAC,IAAI,CAAC,mBAAmB,IAAI,GAAG,CAAC,CAAC;SACvC;QAED,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;IAC3B,CAAC;IAEO,gBAAgB;;QACtB,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;QAC5B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAI,CAAC;QAEtB;YACE,4BAA4B;YAC5B,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC/C,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;YACpB,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;YAClB,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,SAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,mCAAI,EAAE,CAAC;YAEjD,IAAI,MAAM,KAAK,EAAE,EAAE;gBACjB,IAAI,MAAM,KAAK,OAAO,EAAE;oBACtB,IAAI,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;iBACrD;gBAED,IAAI,GAAG,KAAK,EAAE,EAAE;oBACd,IAAI,CAAC,IAAI,CAAC,6BAA6B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAClE,GAAG,CAAC,GAAG,GAAG,MAAM,CAAC;iBAClB;aACF;SACF;QAED,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3B,OAAO;SACR;QAED,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC;QAC3B,MAAM,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC;QACvB,+CAA+C;QAC/C,mDAAmD;QACnD,KAAK,MAAM,IAAI,IAAI,UAA0C,EAAE;YAC7D,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;YACrC,IAAI,GAAG,CAAC;YACR,IAAI,MAAM,CAAC;YACX,IAAI,MAAM,KAAK,EAAE,EAAE;gBACjB,GAAG,GAAG,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC9C,MAAM,GAAG,IAAI,CAAC;aACf;iBACI;gBACH,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAC3B,yDAAyD;gBACzD,yBAAyB;gBACzB,IAAI,GAAG,KAAK,SAAS,EAAE;oBACrB,IAAI,CAAC,IAAI,CAAC,6BAA6B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAClE,GAAG,GAAG,MAAM,CAAC;iBACd;gBACD,MAAM,GAAG,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC;aAC7B;YAED,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACpB,IAAI,CAAC,IAAI,CAAC,wBAAwB,MAAM,GAAG,CAAC,CAAC;aAC9C;YACD,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAEjB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;SACzB;QAED,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,CAAC;IAEO,mBAAmB;QACzB,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;QAC5B,gDAAgD;QAChD,MAAM,UAAU,GAAG,IAAI,CAAC,GAAI,CAAC,UAAU,CAAC;QACxC,KAAK,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,UAAU,EAAE;YACxC,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;gBAClC,IAAI,CAAC,IAAI,CAAC,wBAAwB,IAAI,GAAG,CAAC,CAAC;aAC5C;YACD,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;SAC1B;QAED,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACK,OAAO;;QACb,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACtB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAe,CAAC;QACjC,GAAG,CAAC,aAAa,GAAG,KAAK,CAAC;QAE1B,2EAA2E;QAC3E,mEAAmE;QACnE,iDAAiD;QACjD,MAAA,IAAI,CAAC,cAAc,+CAAnB,IAAI,EAAkB,GAAuB,EAAE;QAC/C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACK,kBAAkB;;QACxB,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACtB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAe,CAAC;QACjC,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC;QAEzB,2EAA2E;QAC3E,mEAAmE;QACnE,iDAAiD;QACjD,MAAA,IAAI,CAAC,cAAc,+CAAnB,IAAI,EAAkB,GAAuB,EAAE;QAC/C,iDAAiD;QACjD,MAAA,IAAI,CAAC,eAAe,+CAApB,IAAI,EAAmB,GAAuB,EAAE;QAChD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,SAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,mCAAI,IAAI,CAAC;QACrD,IAAI,GAAG,KAAK,IAAI,EAAE;YAChB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SACxB;QACD,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACK,QAAQ;QACd,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QAE5B,wEAAwE;QACxE,eAAe;QACf,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QAEf,IAAI,IAAI,KAAK,EAAE,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;YACpC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC;YACnB,OAAO;SACR;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC;QACrC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QACpB,OAAO,CAAC,EAAE,GAAG,CAAC,EAAE;YACd,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,EAAc,CAAC;YAC9C,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,EAAG,CAAC;YACrB,iDAAiD;YACjD,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,GAAuB,EAAE;YACnC,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,EAAE;gBACrB,MAAM;aACP;YACD,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;SACpC;QAED,IAAI,CAAC,KAAK,CAAC,EAAE;YACX,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SACxB;aACI,IAAI,CAAC,GAAG,CAAC,EAAE;YACd,IAAI,CAAC,IAAI,CAAC,0BAA0B,IAAI,GAAG,CAAC,CAAC;YAC7C,IAAI,CAAC,IAAI,IAAI,KAAK,IAAI,GAAG,CAAC;SAC3B;IACH,CAAC;IAED;;;;;;OAMG;IACK,WAAW,CAAC,MAAc;QAChC,0DAA0D;QAC1D,6EAA6E;QAC7E,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACrB,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACtC,IAAI,OAAO,KAAK,SAAS,EAAE;gBACzB,OAAO,OAAO,CAAC;aAChB;YAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC;gBACnD,sCAAsC,CAAC,CAAC;YAC1C,OAAO,IAAI,MAAM,GAAG,CAAC;SACtB;QAED,IAAI,GAAG,GAAG,GAAG,CAAC;QACd,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACtD,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;SACrC;aACI,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACjC,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;SACrC;QAED,oEAAoE;QACpE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YACrB,IAAI,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;YACzC,OAAO,IAAI,MAAM,GAAG,CAAC;SACtB;QAED,OAAO,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;CACF;AAjmED,kCAimEC"},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/xmlchars/xml/1.0/ed5.js":{"lineLengths":[13,3,77,2,33,15,36,3,62,2,13,2,70,22,43,204,91,2,23,2,62,57,84,72,101,71,12,13,13,17,2,9,2,46,38,3,66,2,27,2,55,3,20,41,44,39,40,1,24,3,71,2,27,2,52,3,17,60,1,18,3,77,2,27,2,66,3,29,39,35,21,21,23,23,35,35,39,39,39,39,39,39,39,39,40,1,42,3,71,2,27,2,60,3,24,32,35,21,21,21,39,37,1,32,31],"data":{"version":3,"file":"ed5.js","sourceRoot":"","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/src/xml/1.0/ed5.ts"],"names":[],"mappings":"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"},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/xmlchars/xml/1.1/ed2.js":{"lineLengths":[13,3,77,2,33,15,36,3,62,2,13,2,69,93,22,43,204,91,2,23,2,62,84,57,84,72,101,71,12,13,13,17,2,9,2,46,38,3,66,2,27,2,55,3,20,42,39,40,1,24,3,77,2,27,2,66,3,30,36,20,20,34,35,33,1,44,3,78,77,79,40,2,27,2,73,23,3,36,25,22,22,33,23,36,39,40,1,56,3,71,2,27,2,52,3,17,60,1,18,3,77,2,27,2,66,3,49,29,39,35,21,21,23,23,35,35,39,39,39,39,39,39,39,39,40,1,42,3,71,2,27,2,60,3,24,32,35,21,21,21,39,37,1,32,31],"data":{"version":3,"file":"ed2.js","sourceRoot":"","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/src/xml/1.1/ed2.ts"],"names":[],"mappings":"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"},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/xmlchars/xmlns/1.0/ed3.js":{"lineLengths":[13,3,54,2,33,15,36,3,62,2,13,2,43,207,97,2,23,2,90,78,110,3,65,2,27,2,46,3,49,31,39,21,35,35,35,39,39,39,39,39,39,39,39,39,40,1,46,3,59,2,27,2,46,3,26,34,22,25,39,27,43,42,1,36,31],"data":{"version":3,"file":"ed3.js","sourceRoot":"","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/src/xmlns/1.0/ed3.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,EAAE;AACF,aAAa;AACb,EAAE;AAEF,2CAA2C;AAC9B,QAAA,kBAAkB,GAAG,iLAA2K,CAAC;AAEjM,QAAA,YAAY,GACvB,MAAI,0BAAkB,yCAAsC,CAAC;AAE/D,EAAE;AACF,uBAAuB;AACvB,EAAE;AAEW,QAAA,qBAAqB,GAChC,IAAI,MAAM,CAAC,OAAK,0BAAkB,OAAI,EAAE,GAAG,CAAC,CAAC;AAElC,QAAA,eAAe,GAAG,IAAI,MAAM,CAAC,OAAK,oBAAY,OAAI,EAAE,GAAG,CAAC,CAAC;AAEzD,QAAA,UAAU,GACrB,IAAI,MAAM,CAAC,OAAK,0BAAkB,UAAK,oBAAY,QAAK,EAAE,GAAG,CAAC,CAAC;AAEjE;;;;;;GAMG;AACH,iDAAiD;AACjD,SAAgB,iBAAiB,CAAC,CAAS;IACzC,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;QACxB,CAAC,KAAK,IAAI;QACV,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;QACxB,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;QACxB,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;QACxB,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;QAC5B,CAAC,CAAC,IAAI,OAAO,IAAI,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC;AAC1C,CAAC;AAhBD,8CAgBC;AAED;;;;;;GAMG;AACH,SAAgB,YAAY,CAAC,CAAS;IACpC,OAAO,iBAAiB,CAAC,CAAC,CAAC;QACzB,CAAC,CAAC,KAAK,IAAI;YACV,CAAC,KAAK,IAAI;YACV,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;YACxB,CAAC,KAAK,MAAM;YACZ,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC;YAC5B,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC;AACnC,CAAC;AARD,oCAQC"},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/node_modules/http-proxy-agent/dist/index.js":{"lineLengths":[13,72,62,2,52,37,37,1,34,58,63,56,38,33],"data":{"version":3,"file":"index.js","sourceRoot":"","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/node_modules/http-proxy-agent/src/index.ts"],"names":[],"mappings":";;;;AAIA,oDAAsC;AAEtC,SAAS,oBAAoB,CAC5B,IAAyD;IAEzD,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;AAClC,CAAC;AAED,WAAU,oBAAoB;IAmBhB,mCAAc,GAAG,eAAe,CAAC;IAE9C,oBAAoB,CAAC,SAAS,GAAG,eAAe,CAAC,SAAS,CAAC;AAC5D,CAAC,EAtBS,oBAAoB,KAApB,oBAAoB,QAsB7B;AAED,iBAAS,oBAAoB,CAAC"},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/node_modules/http-proxy-agent/dist/agent.js":{"lineLengths":[13,90,112,64,99,102,118,78,7,2,72,62,2,62,46,46,46,50,61,43,50,28,78,1,3,71,72,2,14,3,49,24,17,40,46,9,14,25,9,20,92,9,64,20,46,64,31,71,71,50,45,50,9,40,53,9,39,78,74,77,42,30,34,9,27,5,7,66,24,6,21,7,25,61,48,57,35,42,13,35,69,13,58,48,13,39,73,59,35,13,70,70,52,68,29,108,13,62,23,30,58,54,13,18,58,54,13,79,79,78,30,26,33,76,35,38,58,32,91,42,65,80,59,17,71,33,91,51,65,44,68,71,17,13,79,79,81,65,52,26,11,5,1,33,33],"data":{"version":3,"file":"agent.js","sourceRoot":"","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/node_modules/http-proxy-agent/src/agent.ts"],"names":[],"mappings":"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"},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/node_modules/@tootallnate/once/dist/index.js":{"lineLengths":[13,19,30,41,40,24,13,1,18,36,21,52,31,54,57,32,13,39,25,30,13,35,25,28,13,23,38,41,11,17,69,9,21,17,5,25,24,22,33],"data":{"version":3,"file":"index.js","sourceRoot":"","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/jsdom/node_modules/@tootallnate/once/src/index.ts"],"names":[],"mappings":";AAEA,SAAS,IAAI,KAAI,CAAC;AAElB,SAAS,IAAI,CACZ,OAAqB,EACrB,IAAY;IAEZ,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAM,OAAO,EAAE,IAAI,CAAC,CAAC;IAC1C,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAA8B,CAAC;IACtE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;IACpB,OAAO,CAAC,CAAC;AACV,CAAC;AAED,WAAU,IAAI;IAWb,SAAgB,MAAM,CACrB,OAAqB,EACrB,IAAY;QAEZ,IAAI,CAAC,GAA+B,IAAI,CAAC;QACzC,MAAM,CAAC,GAAG,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC5C,SAAS,MAAM;gBACd,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACtC,OAAO,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBACzC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;YACjB,CAAC;YACD,SAAS,OAAO,CAAC,GAAG,IAAW;gBAC9B,MAAM,EAAE,CAAC;gBACT,OAAO,CAAC,IAAS,CAAC,CAAC;YACpB,CAAC;YACD,SAAS,OAAO,CAAC,GAAU;gBAC1B,MAAM,EAAE,CAAC;gBACT,MAAM,CAAC,GAAG,CAAC,CAAC;YACb,CAAC;YACD,CAAC,GAAG,MAAM,CAAC;YACX,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC1B,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC9B,CAAC,CAA8B,CAAC;QAChC,IAAI,CAAC,CAAC,EAAE;YACP,MAAM,IAAI,SAAS,CAAC,mCAAmC,CAAC,CAAC;SACzD;QACD,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QACb,OAAO,CAAC,CAAC;IACV,CAAC;IA5Be,WAAM,SA4BrB,CAAA;AACF,CAAC,EAxCS,IAAI,KAAJ,IAAI,QAwCb;AAED,iBAAS,IAAI,CAAC"},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/agent-base/dist/src/index.js":{"lineLengths":[13,72,62,2,35,50,60,44,21,60,1,29,34,34,21,106,1,38,49,1,25,7,40,55,6,33,18,7,47,38,20,29,49,41,13,32,32,13,70,32,59,44,13,75,70,36,32,44,30,34,31,30,9,27,63,48,13,49,9,28,41,9,24,60,45,13,59,9,25,38,9,33,119,9,11,71,55,10,22,11,32,50,59,57,13,36,40,13,36,59,13,40,73,13,41,75,74,76,62,33,13,30,33,38,36,41,46,55,29,40,33,33,59,38,34,27,39,73,81,37,14,37,33,32,107,38,29,14,44,29,27,41,44,37,17,29,14,42,29,27,40,44,37,17,38,72,76,35,98,49,27,17,29,47,54,23,41,27,17,119,29,14,54,64,23,13,44,48,76,82,17,22,61,17,13,65,61,13,66,46,13,17,105,99,13,25,57,13,9,34,73,29,9,19,64,9,5,30,43,56,38,29,33],"data":{"version":3,"file":"index.js","sourceRoot":"","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/agent-base/src/index.ts"],"names":[],"mappings":"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"},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/agent-base/dist/src/promisify.js":{"lineLengths":[13,62,24,33,49,52,26,32,17,22,33,17,15,11,6,1,28,37],"data":{"version":3,"file":"promisify.js","sourceRoot":"","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/agent-base/src/promisify.ts"],"names":[],"mappings":";;AAeA,SAAwB,SAAS,CAAC,EAAkB;IACnD,OAAO,UAAsB,GAAkB,EAAE,IAAoB;QACpE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,EAAE,CAAC,IAAI,CACN,IAAI,EACJ,GAAG,EACH,IAAI,EACJ,CAAC,GAA6B,EAAE,GAAyB,EAAE,EAAE;gBAC5D,IAAI,GAAG,EAAE;oBACR,MAAM,CAAC,GAAG,CAAC,CAAC;iBACZ;qBAAM;oBACN,OAAO,CAAC,GAAG,CAAC,CAAC;iBACb;YACF,CAAC,CACD,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC;AACH,CAAC;AAjBD,4BAiBC"},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/https-proxy-agent/dist/index.js":{"lineLengths":[13,72,62,2,52,38,37,1,35,60,64,58,39,33],"data":{"version":3,"file":"index.js","sourceRoot":"","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/https-proxy-agent/src/index.ts"],"names":[],"mappings":";;;;AAKA,oDAAuC;AAEvC,SAAS,qBAAqB,CAC7B,IAA2D;IAE3D,OAAO,IAAI,eAAgB,CAAC,IAAI,CAAC,CAAC;AACnC,CAAC;AAED,WAAU,qBAAqB;IAoBjB,qCAAe,GAAG,eAAgB,CAAC;IAEhD,qBAAqB,CAAC,SAAS,GAAG,eAAgB,CAAC,SAAS,CAAC;AAC9D,CAAC,EAvBS,qBAAqB,KAArB,qBAAqB,QAuB9B;AAED,iBAAS,qBAAqB,CAAC"},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/https-proxy-agent/dist/agent.js":{"lineLengths":[13,90,112,64,99,102,118,78,7,2,72,62,2,62,46,46,46,52,50,43,82,57,3,75,73,2,79,79,78,38,2,70,59,2,14,3,50,24,17,40,46,9,14,25,9,20,92,9,65,20,46,64,31,71,71,50,45,50,9,40,53,9,46,78,62,47,9,39,78,74,77,42,30,34,9,27,5,7,66,24,6,21,7,25,61,48,62,23,30,58,54,13,18,58,54,13,61,57,61,68,29,103,13,61,54,54,55,35,13,32,41,54,59,13,80,43,72,37,43,42,74,66,64,68,139,39,17,30,13,80,78,77,33,77,70,80,31,14,56,29,77,39,80,39,67,62,80,78,28,33,29,15,30,11,5,1,34,25,20,1,38,73,1,28,78,1,29,19,12,22,34,32,9,5,15,1,33],"data":{"version":3,"file":"agent.js","sourceRoot":"","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/https-proxy-agent/src/agent.ts"],"names":[],"mappings":"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"},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/https-proxy-agent/dist/parse-proxy-response.js":{"lineLengths":[13,72,62,2,62,50,72,37,45,87,88,86,38,30,27,25,36,18,26,16,46,9,28,48,52,52,52,9,31,47,9,26,27,9,31,22,37,24,9,28,28,38,67,62,38,33,70,23,23,13,86,56,62,21,27,24,15,9,36,36,32,15,7,1,37,48],"data":{"version":3,"file":"parse-proxy-response.js","sourceRoot":"","sources":["file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/https-proxy-agent/src/parse-proxy-response.ts"],"names":[],"mappings":";;;;;AAAA,kDAAgC;AAGhC,MAAM,KAAK,GAAG,eAAW,CAAC,wCAAwC,CAAC,CAAC;AAOpE,SAAwB,kBAAkB,CACzC,MAAgB;IAEhB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACtC,+EAA+E;QAC/E,gFAAgF;QAChF,8EAA8E;QAC9E,8BAA8B;QAC9B,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,MAAM,OAAO,GAAa,EAAE,CAAC;QAE7B,SAAS,IAAI;YACZ,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC;gBAAE,MAAM,CAAC,CAAC,CAAC,CAAC;;gBACZ,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACpC,CAAC;QAED,SAAS,OAAO;YACf,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACpC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACxC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACxC,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC;QAED,SAAS,OAAO,CAAC,GAAW;YAC3B,KAAK,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC;QACpC,CAAC;QAED,SAAS,KAAK;YACb,KAAK,CAAC,OAAO,CAAC,CAAC;QAChB,CAAC;QAED,SAAS,OAAO,CAAC,GAAU;YAC1B,OAAO,EAAE,CAAC;YACV,KAAK,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YACzB,MAAM,CAAC,GAAG,CAAC,CAAC;QACb,CAAC;QAED,SAAS,MAAM,CAAC,CAAS;YACxB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChB,aAAa,IAAI,CAAC,CAAC,MAAM,CAAC;YAE1B,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;YACvD,MAAM,YAAY,GAAG,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAElD,IAAI,YAAY,KAAK,CAAC,CAAC,EAAE;gBACxB,iBAAiB;gBACjB,KAAK,CAAC,8CAA8C,CAAC,CAAC;gBACtD,IAAI,EAAE,CAAC;gBACP,OAAO;aACP;YAED,MAAM,SAAS,GAAG,QAAQ,CAAC,QAAQ,CAClC,OAAO,EACP,CAAC,EACD,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CACxB,CAAC;YACF,MAAM,UAAU,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,KAAK,CAAC,+BAA+B,EAAE,SAAS,CAAC,CAAC;YAClD,OAAO,CAAC;gBACP,UAAU;gBACV,QAAQ;aACR,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5B,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAExB,IAAI,EAAE,CAAC;IACR,CAAC,CAAC,CAAC;AACJ,CAAC;AAvED,qCAuEC"},"url":null},"file:///Users/steven/Projects/srclaunch/packages/themes/node_modules/typescript/lib/typescript.js":{"lineLengths":[81,57,79,77,53,0,82,73,68,35,0,78,34,80,0,13,79,90,33,65,28,9,5,61,2,55,45,62,29,76,28,9,17,6,43,2,90,115,18,2,74,117,157,70,23,70,23,169,52,28,46,72,65,65,24,128,106,89,87,42,43,13,39,66,89,5,2,55,15,88,20,72,81,91,34,9,13,2,58,41,48,91,110,35,6,28,50,102,28,47,93,6,5,15,7,16,30,26,33,59,5,41,76,5,34,42,45,5,29,30,67,94,36,45,20,5,29,23,84,79,64,39,31,27,25,13,25,9,5,34,78,85,82,48,29,13,9,5,49,43,23,35,19,9,47,31,31,26,20,21,5,37,78,85,82,67,41,49,48,33,49,17,22,87,44,57,43,17,45,40,39,28,29,13,9,5,33,29,36,37,34,34,24,9,35,30,22,5,41,30,23,35,24,47,13,9,5,49,23,82,35,13,9,5,49,58,5,33,38,45,27,95,9,14,52,9,5,19,24,33,45,58,54,68,17,94,35,17,47,40,37,52,75,55,53,23,17,62,68,38,38,19,153,120,94,100,83,132,136,143,99,27,17,9,54,45,58,54,68,17,94,35,17,47,40,37,52,107,17,62,68,38,38,19,117,98,104,83,132,136,143,99,27,17,9,54,74,20,7,16,92,87,33,81,57,70,25,19,19,28,61,58,66,59,19,26,35,70,52,52,30,11,109,11,36,82,85,54,130,9,60,11,109,11,36,82,85,54,125,9,60,54,19,84,19,84,19,76,15,121,221,24,31,130,5,20,15,7,16,36,23,34,47,43,42,43,41,56,9,5,33,23,31,31,28,40,5,23,7,110,55,109,7,39,20,52,51,29,34,17,13,9,25,5,25,7,53,7,44,20,57,51,29,34,17,13,9,25,5,35,94,44,34,29,9,48,47,39,30,13,9,25,5,35,51,22,41,34,33,13,52,39,30,13,9,5,51,55,29,23,98,52,13,9,22,5,47,48,24,59,49,59,9,22,5,25,44,59,18,16,31,42,60,17,20,78,13,10,5,37,37,55,31,47,40,9,19,5,27,7,89,87,7,42,32,25,9,24,55,18,37,34,9,22,5,33,7,110,50,106,7,37,20,52,45,33,17,13,9,20,5,21,37,48,33,38,29,13,9,25,5,19,41,53,33,38,29,13,9,25,5,27,112,54,62,41,25,13,9,18,5,29,58,93,41,25,13,9,18,5,37,7,68,59,7,39,48,47,25,30,13,9,31,5,25,55,77,20,74,36,49,32,17,13,9,21,5,27,50,77,103,5,33,57,56,58,25,13,9,18,5,47,43,22,20,52,33,38,28,17,13,9,21,5,31,31,20,35,22,42,20,26,47,20,33,40,34,42,21,24,17,30,13,9,21,5,23,37,25,48,40,43,27,13,9,32,5,35,27,25,5,21,28,19,20,24,52,44,13,9,22,5,17,39,16,31,42,93,13,10,5,33,32,20,52,36,40,38,51,40,54,52,21,34,17,13,9,21,5,25,7,73,6,41,7,29,24,70,32,20,33,40,17,22,35,17,13,9,22,5,25,7,84,6,37,80,7,36,19,20,52,43,24,37,53,21,26,51,21,17,13,9,39,5,25,45,24,20,52,43,24,37,44,21,26,39,21,17,13,9,22,5,43,43,32,25,36,9,51,16,31,30,56,43,42,21,46,39,39,21,61,17,14,10,33,31,98,9,5,41,40,19,20,52,36,44,67,34,51,21,42,49,21,26,44,21,17,13,9,31,5,33,41,24,48,44,39,33,13,32,9,22,5,35,39,24,20,52,48,43,40,17,13,9,22,5,31,46,16,31,30,42,35,35,21,49,46,61,21,17,13,10,5,47,40,19,29,9,34,43,38,38,59,69,49,17,13,11,22,5,45,39,18,40,42,40,45,43,17,15,28,9,5,43,46,27,32,9,31,28,21,5,33,38,30,27,24,9,21,5,33,92,36,25,16,31,35,28,98,13,10,5,39,43,19,20,24,35,37,29,26,24,33,35,43,44,36,42,21,51,30,21,26,17,34,84,28,39,21,32,17,34,22,13,9,22,5,25,33,19,29,9,34,43,69,41,11,22,5,31,37,20,28,78,40,39,36,21,17,13,18,40,13,9,21,5,19,101,44,18,46,31,56,13,18,42,33,38,17,13,9,32,34,5,39,42,26,26,26,26,76,5,33,32,17,5,31,38,5,29,71,88,60,39,52,37,40,50,35,36,48,41,28,13,9,33,28,67,5,59,24,70,35,57,9,22,5,7,38,100,96,59,7,61,40,48,85,65,5,33,7,58,7,49,31,33,28,34,48,32,43,38,26,40,32,37,29,39,89,63,13,43,9,28,5,34,36,5,45,68,33,31,19,9,73,30,50,9,35,49,9,5,35,68,117,5,47,45,29,24,35,69,33,73,29,13,34,9,20,5,37,63,77,33,37,9,46,25,9,49,61,29,13,9,20,5,39,29,19,20,52,33,35,34,51,21,28,39,21,17,13,9,31,5,25,7,101,94,38,7,59,77,26,24,87,30,54,115,13,83,39,96,71,119,17,69,43,99,99,37,53,39,41,94,97,37,39,45,99,66,39,17,13,9,22,5,47,31,23,70,32,30,9,22,5,17,32,32,22,29,27,23,18,5,23,30,29,22,29,22,24,70,24,34,24,5,25,7,94,49,7,38,59,5,45,52,22,29,42,64,68,62,40,33,13,9,18,5,27,7,43,7,59,55,25,9,14,30,24,9,5,35,7,93,7,61,20,57,25,9,14,27,9,5,39,58,46,102,5,7,34,7,36,75,5,19,35,18,36,41,60,17,22,24,64,17,16,5,37,42,29,16,31,30,60,17,22,24,60,17,13,10,5,51,7,107,7,42,39,52,62,5,31,52,27,46,29,13,18,9,20,5,33,7,96,93,7,39,20,45,40,37,13,9,25,5,29,7,81,7,38,57,5,43,27,44,24,5,21,7,80,7,37,72,5,41,26,44,39,5,19,7,99,7,39,42,22,24,5,45,34,42,22,20,5,35,50,36,30,22,5,39,7,86,84,38,84,62,99,15,80,73,7,75,92,5,35,7,99,84,36,84,58,96,80,73,7,76,27,22,9,30,36,29,51,60,47,39,37,26,37,34,41,38,26,13,9,20,5,41,58,40,36,27,71,97,36,44,40,26,17,22,37,17,36,56,26,17,30,13,9,23,5,31,57,7,84,6,29,33,7,36,45,5,33,7,57,6,29,33,7,36,68,5,33,7,62,7,30,22,30,48,31,13,9,20,5,31,30,24,12,56,74,39,43,13,51,22,5,31,39,24,37,55,45,13,9,22,5,35,54,35,40,47,48,9,22,7,30,40,5,31,32,38,41,29,9,22,5,25,39,24,96,72,9,22,5,29,24,22,55,41,9,67,33,34,25,32,42,34,17,13,9,17,5,23,7,79,6,66,67,7,64,77,27,24,28,25,31,49,53,33,61,33,13,9,32,50,52,33,13,9,20,5,47,52,59,34,70,36,37,34,50,9,22,5,31,59,59,24,70,36,54,9,22,5,45,58,59,38,73,37,57,9,22,5,41,56,69,87,5,21,28,24,32,50,40,13,9,22,5,21,7,105,6,119,7,36,24,32,50,40,13,9,31,49,39,13,9,22,5,23,44,32,50,39,13,9,5,39,33,45,5,29,31,31,30,36,19,5,39,38,35,21,31,9,14,44,9,22,5,41,35,21,47,33,33,13,9,5,48,32,5,73,7,41,7,29,77,5,25,29,48,5,25,7,38,7,29,40,5,27,26,37,5,27,35,70,5,25,32,47,25,153,5,19,24,24,19,38,28,21,5,33,37,27,20,5,31,42,32,25,5,41,32,26,17,5,27,36,29,31,5,33,99,101,82,70,6,109,109,109,109,109,109,109,109,109,6,77,48,73,86,6,83,53,76,7,142,96,123,163,82,165,89,173,181,7,37,48,61,14,5,49,65,31,43,5,39,32,18,28,27,35,37,13,25,10,5,25,75,35,31,31,61,37,55,38,36,13,25,10,5,31,37,18,28,56,41,13,100,9,21,58,9,21,55,9,21,52,9,21,49,9,14,46,9,5,25,23,32,60,64,72,80,71,33,23,5,35,7,85,6,97,95,96,56,7,49,22,30,34,55,5,67,7,85,6,89,40,7,47,34,5,63,44,42,49,55,47,44,5,7,73,69,7,34,45,5,37,7,65,7,37,236,5,43,33,59,5,17,7,71,6,94,96,73,6,99,95,96,56,7,50,20,35,28,37,28,39,28,28,89,5,69,7,69,6,94,96,73,6,97,32,7,48,45,5,65,44,88,5,45,7,73,7,47,28,25,63,36,54,24,39,32,41,32,43,39,101,9,59,84,98,104,83,9,60,96,37,54,89,43,42,13,9,49,95,82,78,14,83,87,69,97,51,96,13,43,97,13,9,45,93,82,56,13,80,90,71,75,45,57,13,58,48,9,47,102,21,39,92,13,42,86,13,18,53,13,9,9,32,17,28,24,5,33,33,33,29,48,9,5,33,7,88,6,93,93,27,6,84,51,7,50,111,30,5,69,53,42,49,55,45,5,45,38,36,51,5,41,7,140,73,6,65,32,26,100,83,78,56,7,63,82,117,26,85,45,51,121,45,29,17,97,112,101,29,17,91,45,29,17,110,40,42,13,9,29,5,53,46,48,47,84,29,46,28,9,46,42,56,77,27,66,27,44,33,13,48,89,94,45,44,54,37,127,34,48,13,57,33,13,31,107,33,13,32,31,27,9,38,43,5,36,53,84,5,27,40,86,5,35,43,92,5,41,45,45,5,39,7,66,7,51,98,112,79,34,49,46,57,38,20,26,50,76,13,76,45,42,22,46,62,26,17,22,46,62,26,17,22,46,13,18,70,22,13,63,22,13,22,9,83,75,5,63,87,45,48,36,46,28,13,9,21,5,45,96,48,99,56,36,9,20,5,49,50,46,47,20,5,53,66,47,101,5,49,61,62,48,38,48,28,13,9,21,5,68,74,5,63,30,51,53,5,33,7,79,75,7,46,60,100,5,33,84,66,25,54,42,73,33,40,105,65,33,13,9,28,5,51,38,48,5,31,40,73,5,35,65,81,126,5,41,44,51,67,44,40,5,24,59,5,17,19,20,55,35,9,28,26,59,41,13,65,33,44,32,17,13,25,10,5,15,22,28,26,59,41,13,43,10,5,17,30,31,36,49,5,47,101,38,25,25,37,37,31,56,45,45,59,54,34,27,34,13,61,33,27,34,13,18,44,27,27,13,9,35,43,30,9,35,42,30,9,26,5,63,31,35,42,30,9,22,5,19,39,24,71,22,5,43,67,68,33,31,24,38,36,13,18,34,13,46,35,13,18,73,13,9,5,7,89,6,30,101,66,7,44,54,80,5,25,7,81,6,30,101,66,7,45,54,80,5,27,42,31,22,56,20,9,37,5,29,7,97,7,149,7,55,7,105,7,54,7,147,7,38,58,86,71,7,29,31,26,56,22,18,9,35,5,20,15,7,16,17,26,46,50,54,48,54,53,14,23,30,41,49,49,34,41,149,9,58,35,50,9,36,39,56,48,13,9,25,41,9,24,27,31,46,13,32,30,48,13,30,29,45,13,28,31,48,13,32,48,32,38,41,9,52,43,59,42,45,108,92,37,57,119,48,56,21,17,13,9,52,38,50,9,42,11,125,114,61,66,11,52,39,80,38,29,13,24,9,48,21,94,42,67,13,20,9,26,67,172,9,52,80,30,95,39,146,17,56,13,9,30,63,26,87,116,13,9,40,60,25,119,13,9,46,62,24,103,13,9,60,65,24,106,13,9,66,66,55,56,65,13,9,48,63,76,25,9,42,70,74,36,83,13,9,56,67,84,25,9,50,63,67,213,95,9,40,71,73,227,13,9,46,66,69,315,13,9,38,69,72,283,13,9,44,74,77,321,13,9,54,75,78,329,13,9,56,67,76,201,13,9,52,33,26,40,45,26,13,51,33,13,18,66,68,45,13,9,48,39,260,9,42,11,80,11,57,48,53,30,87,13,26,32,43,84,80,44,30,21,63,94,53,21,17,43,34,17,13,18,84,80,46,40,21,17,13,36,9,38,45,28,42,45,48,47,17,13,99,9,41,70,9,50,42,71,9,52,41,69,9,48,45,73,9,56,46,74,9,58,41,69,9,48,43,71,9,52,41,69,9,48,46,74,9,58,43,71,9,52,41,69,9,48,39,32,34,30,39,74,13,39,9,50,65,9,60,51,68,9,62,26,58,90,51,99,42,44,87,86,86,93,103,109,110,116,102,121,122,86,91,137,25,22,126,100,19,13,9,52,37,66,97,73,41,72,69,21,67,17,22,88,60,17,13,9,64,27,56,90,48,42,56,116,120,48,114,111,112,106,69,25,21,19,13,9,50,37,66,98,73,42,72,71,21,65,17,22,88,58,17,13,9,66,11,64,11,36,35,23,32,32,32,43,52,54,56,17,39,13,43,52,54,56,17,39,13,80,90,95,38,40,102,37,90,188,21,18,92,15,88,95,38,40,93,126,163,99,81,129,96,114,104,124,125,131,131,110,143,140,136,149,147,167,170,122,87,140,219,21,18,91,145,38,40,44,55,91,49,67,90,25,36,21,18,15,93,96,168,15,36,56,62,57,61,14,107,50,68,61,103,46,48,105,105,123,177,113,120,122,107,126,130,134,142,156,152,140,144,146,156,148,156,156,160,170,166,172,190,192,184,204,190,202,216,206,212,218,218,204,133,29,26,98,103,142,122,106,114,41,61,63,46,52,63,99,57,78,100,136,98,33,44,29,25,23,17,13,61,17,47,102,78,40,47,60,21,17,13,24,29,13,38,9,48,84,91,57,104,157,105,38,9,75,112,32,56,14,9,77,46,32,45,106,49,17,14,9,51,23,53,207,126,122,156,90,71,93,91,28,9,50,32,30,51,14,9,43,80,51,9,36,44,20,15,7,16,38,92,94,85,6,93,20,120,38,97,98,98,41,102,39,93,93,98,55,38,61,51,7,70,7,46,66,48,48,59,49,44,97,137,13,67,67,67,110,90,31,31,31,81,66,9,44,50,24,33,135,71,10,56,47,94,96,45,14,47,102,103,44,14,47,63,31,39,36,43,60,60,60,83,10,56,28,71,80,89,60,13,10,50,95,41,64,36,59,26,10,44,23,9,25,39,45,19,29,228,61,29,46,29,16,39,39,39,35,24,10,5,56,43,95,35,27,35,30,78,31,37,43,98,99,40,57,42,41,43,51,25,77,79,50,51,99,53,83,51,83,81,27,34,13,18,51,100,93,27,34,13,9,43,98,52,59,5,7,88,7,51,37,119,9,49,40,23,49,43,29,13,29,10,58,44,47,64,10,55,57,10,28,9,35,55,6,52,61,48,34,34,55,6,62,44,55,51,29,29,43,42,134,55,6,45,72,55,6,59,65,35,35,65,31,30,97,31,23,25,33,41,49,24,66,37,13,18,92,40,74,90,41,17,13,43,9,28,5,33,45,19,29,168,251,78,5,52,44,24,25,46,25,25,44,73,9,45,124,111,65,9,20,5,59,40,20,25,103,33,31,25,70,106,35,26,25,70,127,74,39,26,25,26,74,26,26,25,135,122,65,26,25,31,65,74,122,21,26,73,21,26,24,35,33,13,9,56,66,9,20,5,31,60,5,50,56,5,53,64,38,24,91,49,54,28,9,21,5,52,88,47,82,29,9,20,5,57,45,27,37,39,37,39,39,59,9,5,46,75,5,45,63,5,43,73,5,20,13,7,16,112,35,68,63,49,57,53,56,52,54,5,42,46,56,63,20,104,99,61,46,41,56,14,9,5,43,148,17,34,131,79,54,106,103,86,90,74,77,48,41,86,81,91,66,78,56,72,64,33,76,76,96,33,29,26,21,28,119,55,51,66,22,17,13,24,32,13,9,5,100,54,93,143,45,38,5,67,57,88,29,50,20,13,49,7,16,20,29,22,90,72,28,84,108,9,50,71,31,20,29,26,14,30,41,40,17,13,29,41,38,69,17,42,70,17,13,9,46,66,28,40,33,34,37,11,37,10,48,11,33,19,26,91,48,52,113,13,9,32,11,66,10,70,102,45,100,21,11,67,23,26,146,148,71,77,147,13,9,38,11,61,10,48,11,37,45,9,40,11,78,10,92,11,43,51,9,46,11,60,10,59,11,37,102,9,52,11,60,11,30,27,9,42,78,33,19,55,27,31,77,32,66,106,107,102,108,270,64,21,17,13,24,9,36,66,28,26,30,31,34,44,32,13,9,38,62,20,15,7,16,11,22,26,29,30,30,33,32,39,38,37,36,39,38,41,40,34,33,34,33,44,43,6,63,75,18,9,142,71,65,43,5,15,30,5,148,77,20,38,13,7,16,44,77,23,32,15,27,24,17,52,23,24,9,52,70,68,35,21,39,17,27,113,17,13,31,35,43,70,13,87,43,60,13,96,61,25,90,90,25,47,37,37,15,50,77,131,97,39,261,82,9,51,84,32,70,120,43,34,35,37,39,13,18,74,54,64,13,9,49,35,36,39,13,9,47,18,27,37,41,35,37,47,35,41,72,45,62,9,41,28,11,110,110,107,28,11,63,80,38,51,13,141,9,35,24,51,74,32,9,33,27,48,62,44,13,34,9,39,28,39,50,151,38,82,13,64,82,92,13,9,73,66,117,77,23,48,182,23,58,21,81,39,46,76,9,36,52,24,27,19,36,90,88,18,39,24,38,48,18,13,9,35,103,50,64,54,52,92,39,40,48,36,51,98,107,37,93,25,113,21,32,44,21,17,49,63,49,47,128,126,22,17,45,54,45,43,113,157,75,22,17,47,62,47,45,122,126,171,173,22,17,48,63,48,46,122,118,22,17,49,61,49,47,124,128,136,22,17,49,60,49,47,83,131,22,17,99,79,44,80,40,81,42,67,84,21,17,1320,66,39,49,17,13,41,34,48,83,9,31,30,23,13,65,9,47,48,49,50,53,20,7,16,58,100,19,28,58,72,90,88,70,76,54,70,98,100,84,19,72,70,71,59,87,93,103,26,69,73,69,22,73,75,73,75,77,79,61,73,73,65,77,71,81,77,83,89,79,89,91,101,89,63,65,71,87,65,69,71,75,87,99,121,73,61,65,77,65,91,67,71,65,59,87,138,71,104,63,22,67,75,77,83,99,77,81,99,111,133,85,73,79,103,99,77,45,65,79,25,69,67,69,69,69,75,75,73,71,63,67,67,71,73,69,73,65,75,63,72,64,80,66,68,72,70,72,68,70,68,66,72,66,68,70,68,37,80,78,66,74,74,78,72,72,70,30,76,64,74,72,66,70,70,74,82,74,66,70,78,64,70,72,78,70,76,74,72,72,66,72,72,68,78,72,74,68,72,72,76,64,27,16,72,86,29,72,64,64,21,80,84,76,80,100,68,68,68,72,82,74,15,72,72,70,76,64,68,64,64,70,62,64,78,76,64,80,62,70,80,66,68,78,84,92,66,27,86,84,74,21,90,92,94,92,74,72,94,92,92,82,72,78,78,74,76,88,90,78,88,82,76,72,76,80,100,70,80,70,84,15,70,88,18,56,74,80,84,68,68,74,70,74,74,80,74,76,72,76,78,74,70,80,84,92,84,78,86,86,76,80,68,64,98,92,80,70,76,70,76,78,80,70,76,76,82,28,92,14,66,88,80,80,68,82,82,70,72,82,72,18,66,72,74,68,70,68,31,82,100,78,15,66,19,78,76,70,86,98,26,66,58,74,66,22,84,82,76,70,78,80,86,80,80,80,80,70,64,78,74,64,72,74,62,78,82,74,82,72,74,76,80,78,78,78,70,80,74,70,70,78,76,68,78,27,66,31,84,98,84,90,90,102,27,56,18,75,73,91,89,79,78,69,68,92,90,72,70,77,75,64,64,76,74,78,77,81,79,83,81,74,72,64,74,72,80,78,106,104,59,18,27,50,48,52,72,64,61,69,69,68,78,78,81,79,79,69,78,70,78,75,105,91,115,99,112,106,134,87,71,95,114,122,116,58,78,95,65,85,86,64,88,93,32,73,50,80,65,88,101,124,56,22,31,58,62,64,62,64,69,63,67,68,62,66,63,103,73,70,90,93,120,104,111,90,78,60,68,17,26,48,86,82,105,86,72,53,19,33,42,90,84,88,110,107,95,101,33,42,16,80,94,94,98,94,102,16,116,93,91,115,101,19,28,52,23,80,23,86,23,68,23,86,65,55,69,76,74,23,80,23,73,23,89,23,90,23,85,23,95,59,62,18,27,64,52,64,60,63,69,71,68,70,52,67,65,57,53,61,56,19,29,38,86,76,89,65,47,9,42,9,63,17,24,33,70,106,106,66,80,98,68,96,106,74,17,41,50,162,170,125,19,26,35,64,80,78,80,88,19,28,100,96,70,58,79,110,81,114,66,102,70,116,76,116,59,19,29,38,68,90,100,89,19,23,32,60,66,66,71,19,21,30,56,66,74,70,86,65,71,25,34,64,18,80,102,124,98,127,115,99,104,100,126,105,125,93,103,128,134,94,129,25,108,134,115,132,109,119,91,108,108,25,121,126,87,16,100,84,101,77,84,24,33,62,78,100,60,96,60,113,97,147,98,167,103,123,91,101,126,132,92,25,106,36,83,107,16,81,86,98,82,117,102,74,26,35,66,69,62,32,110,118,90,63,103,104,97,90,56,126,51,121,80,19,28,37,82,88,88,86,19,28,37,100,74,86,26,35,66,78,80,92,80,103,19,39,48,55,65,98,70,66,65,69,152,82,130,64,112,64,112,64,112,65,106,64,110,63,108,83,98,92,127,60,105,119,20,29,54,90,84,62,66,63,57,65,66,70,70,79,71,75,61,72,72,72,69,77,69,74,62,70,72,69,71,73,80,23,59,56,62,61,59,67,61,66,97,90,111,70,62,105,85,78,87,83,77,85,89,85,89,92,79,88,88,93,85,78,76,76,70,86,73,23,106,23,119,23,99,26,76,23,89,62,19,17,26,54,117,53,19,19,28,68,78,74,60,67,69,79,74,74,80,77,75,55,73,82,74,72,73,61,75,70,62,70,59,59,27,36,46,60,44,48,54,50,52,46,50,64,48,54,54,58,55,50,44,83,19,23,32,74,74,74,84,80,76,83,95,109,87,92,112,124,123,109,105,120,102,100,92,117,113,129,140,94,71,18,27,48,56,54,54,57,51,55,70,70,72,67,71,61,73,54,64,54,57,73,59,58,72,58,74,71,73,73,80,76,23,66,23,62,59,55,86,23,103,23,77,73,23,67,23,65,70,64,65,66,61,70,62,23,92,23,80,86,76,72,97,92,74,98,23,78,23,73,23,67,73,82,70,93,23,74,110,23,85,23,94,23,80,23,87,23,89,23,83,56,97,103,64,20,29,56,64,64,56,65,59,71,74,74,132,75,75,69,67,74,74,23,78,23,91,23,107,23,85,23,118,23,102,78,23,83,23,83,69,23,85,46,80,80,23,93,72,23,107,23,99,85,23,94,23,90,23,89,23,79,45,23,95,52,23,107,23,91,62,19,22,31,68,68,76,68,72,74,74,71,99,68,21,30,64,64,56,64,58,65,71,63,65,19,20,29,54,78,80,60,68,83,83,79,100,68,66,62,19,25,34,74,72,66,77,22,31,58,68,68,19,23,32,60,28,84,82,68,32,84,85,105,126,100,41,85,81,71,18,27,54,54,56,19,20,29,58,56,62,64,58,62,26,35,92,90,90,100,115,99,107,80,84,86,85,77,112,81,80,19,23,32,60,70,72,96,71,7,43,78,75,95,96,84,7,19,16,25,48,52,48,47,50,19,34,43,82,31,38,104,33,100,43,108,28,98,24,90,32,92,99,78,63,63,124,73,128,61,132,104,27,36,74,70,80,74,83,19,51,55,50,53,5,55,29,38,78,76,114,115,126,45,76,81,89,22,31,90,96,94,92,72,106,68,27,36,82,100,104,102,83,25,34,82,88,86,84,77,19,28,52,60,50,50,56,121,121,30,56,56,56,57,133,58,62,59,16,25,46,54,48,60,54,60,50,31,40,80,84,78,95,20,29,90,62,62,19,28,58,48,50,48,50,60,52,11,92,80,11,60,59,21,30,54,54,60,60,60,60,60,60,60,60,61,58,61,65,24,33,70,60,74,28,37,70,80,86,19,23,32,78,88,69,81,81,91,70,39,63,86,67,67,69,69,85,83,81,77,87,73,73,83,91,88,89,65,55,55,57,57,57,57,57,57,57,57,57,57,55,55,55,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,71,69,57,71,69,60,63,74,77,73,63,63,59,75,65,75,75,61,69,63,72,75,71,67,61,69,71,75,63,64,70,69,82,58,75,71,18,27,32,34,35,32,34,36,50,34,34,37,34,34,37,56,19,23,32,60,16,104,88,74,80,80,81,81,81,82,82,82,83,89,117,18,86,113,93,96,108,112,109,101,83,84,134,100,96,117,99,133,40,116,62,92,21,95,84,70,76,76,77,77,77,78,78,78,79,85,113,27,83,55,106,104,84,102,92,98,108,92,86,88,77,102,122,122,94,98,104,111,28,66,115,16,32,71,95,19,20,29,60,68,58,62,62,18,27,50,62,74,70,66,79,81,65,79,92,94,78,78,81,65,77,65,65,64,70,62,73,81,91,76,68,98,64,79,107,107,104,82,88,56,7,94,15,7,19,28,37,76,74,70,78,79,73,77,82,76,72,87,75,93,93,88,86,86,93,103,107,108,106,94,92,96,45,90,52,102,54,109,64,110,44,93,86,17,26,60,60,68,78,62,74,74,53,29,38,86,92,98,118,84,71,115,89,19,32,41,78,94,189,98,17,30,39,55,61,65,57,47,45,53,47,55,20,92,19,28,52,26,64,62,70,62,21,68,68,80,73,79,73,81,21,62,82,86,26,59,69,73,75,72,86,78,64,16,74,83,91,77,76,78,30,67,76,102,102,100,98,88,102,105,103,115,87,107,80,93,92,95,96,94,92,110,106,84,70,78,68,78,107,105,89,107,84,89,70,74,76,67,95,69,59,19,24,33,62,11,43,46,11,82,11,42,42,13,43,11,74,11,49,46,11,72,60,68,74,126,87,19,25,22,19,69,67,68,58,14,40,10,27,71,40,10,23,37,40,10,21,36,10,23,36,10,16,40,35,10,20,40,35,10,28,40,35,10,23,40,35,10,6,20,7,16,7,29,44,7,19,37,23,47,58,9,30,5,43,7,84,52,53,7,19,35,108,40,9,5,47,29,38,78,78,78,89,19,24,33,65,68,62,74,19,103,19,46,76,5,41,55,15,23,49,55,51,15,5,64,80,19,86,19,45,45,19,9,99,125,152,42,101,9,48,29,34,37,35,32,44,64,34,87,17,13,9,56,61,31,32,35,33,28,13,25,38,69,13,9,75,61,62,133,9,5,55,95,48,55,95,47,31,25,13,44,45,25,13,56,24,106,39,53,45,25,13,155,54,35,58,58,65,49,17,42,13,9,33,25,34,24,45,58,102,59,17,30,44,13,9,5,19,58,30,40,86,92,88,25,72,24,35,35,34,54,14,36,68,20,36,41,47,63,101,17,14,9,62,27,52,32,40,25,9,50,128,53,31,56,13,18,55,44,13,9,53,66,115,57,44,106,70,72,54,13,9,74,92,75,34,51,71,59,53,77,21,17,102,49,17,60,107,51,49,80,17,68,49,49,148,17,13,9,56,38,41,51,44,54,42,52,13,9,67,61,67,9,64,46,71,9,73,71,50,13,9,52,236,9,5,85,94,46,55,39,87,35,93,53,57,63,53,103,37,20,36,55,40,52,21,26,49,21,68,17,14,9,76,103,126,51,27,87,78,96,32,94,59,77,21,17,15,74,39,46,27,9,5,57,30,26,26,25,48,24,35,35,54,14,36,31,20,36,41,63,17,14,9,30,38,115,31,9,37,54,23,77,9,5,19,83,33,49,91,72,53,43,27,36,13,18,33,207,31,19,13,47,20,36,73,58,39,41,31,39,51,17,14,10,5,71,7,42,7,17,59,50,45,34,45,98,24,9,21,5,45,17,56,28,42,27,46,47,5,57,17,58,64,17,24,28,5,23,17,32,27,5,29,7,92,86,83,7,17,60,351,33,48,53,38,80,91,84,64,69,11,56,11,69,55,54,35,44,13,18,36,74,61,35,114,55,63,97,74,25,30,91,25,53,32,47,18,53,62,13,85,32,58,13,20,33,36,85,38,69,48,50,31,42,60,79,17,14,9,75,25,26,51,47,13,18,48,13,39,69,23,69,27,144,36,40,70,43,74,29,34,78,29,25,30,61,25,21,26,57,55,54,27,21,17,15,9,81,81,51,60,72,80,23,13,65,47,46,9,82,66,27,50,13,18,118,13,44,56,54,13,86,9,48,50,101,39,41,82,72,46,137,58,117,76,79,88,13,140,69,58,31,53,73,51,55,25,30,46,25,23,17,15,49,175,9,52,31,23,66,55,119,62,37,89,13,9,72,81,57,31,29,32,168,83,105,85,188,232,74,30,15,96,15,67,72,49,13,15,80,15,61,79,13,9,47,108,103,9,45,52,28,42,29,76,9,5,93,17,28,37,70,80,86,17,50,138,5,61,90,37,41,119,13,18,25,65,13,10,5,108,331,172,5,145,55,97,99,38,41,72,134,135,39,17,13,10,5,17,45,675,36,43,32,42,16,33,42,10,74,80,73,36,59,108,62,104,61,119,60,142,50,136,90,67,47,126,21,116,24,56,13,9,50,174,9,57,187,9,76,59,31,35,47,100,83,46,128,82,35,91,129,61,97,128,52,49,31,24,50,95,144,71,181,13,9,80,115,20,37,71,37,42,14,9,78,45,264,13,49,91,73,61,53,93,63,39,43,46,19,13,94,9,90,40,80,97,41,64,132,43,66,147,43,65,130,53,43,55,282,24,61,13,9,58,64,31,40,58,100,90,69,128,92,24,123,28,74,79,52,37,22,13,9,5,63,7,63,7,17,51,67,46,57,300,10,5,73,36,45,29,9,38,23,29,9,39,25,29,9,51,5,49,79,44,27,95,92,29,46,34,19,96,36,40,36,65,24,17,44,13,24,36,13,30,53,46,50,52,50,95,42,72,112,127,88,49,111,49,39,43,33,69,57,39,103,122,71,49,130,35,56,74,66,162,77,30,44,33,69,37,44,18,49,50,18,47,48,18,35,37,37,47,77,39,49,59,69,89,86,29,57,25,35,54,93,40,29,25,21,18,51,38,18,57,47,57,51,18,45,49,49,39,74,73,45,36,36,21,58,18,46,25,50,88,45,25,21,56,29,18,43,87,18,53,55,167,35,206,57,25,64,21,32,56,21,18,39,43,42,50,18,42,105,65,21,18,39,104,96,57,25,93,105,21,35,90,21,17,14,30,15,86,70,60,15,37,75,69,13,15,71,92,15,50,36,25,33,17,53,55,25,33,17,54,34,61,64,48,43,29,23,19,28,13,15,93,82,15,44,44,49,67,97,123,76,38,45,74,91,203,25,60,171,50,25,21,17,31,13,45,68,44,76,31,49,35,33,121,173,33,29,40,78,29,33,95,29,40,78,29,98,25,50,41,29,23,47,32,17,22,25,33,17,13,50,75,68,50,50,13,50,59,29,43,32,17,61,67,33,17,90,57,13,75,34,55,46,61,19,13,77,102,30,24,89,18,50,186,132,110,44,50,78,35,25,65,21,51,65,21,79,59,31,21,26,39,65,21,50,17,13,121,28,60,38,37,137,116,17,102,82,51,50,24,40,125,40,44,21,18,19,87,39,19,72,195,62,43,58,34,40,50,21,17,19,72,113,19,56,107,126,48,57,83,25,30,59,25,21,48,100,76,21,25,97,70,38,71,136,46,21,31,70,181,73,95,98,76,21,17,88,129,142,48,41,65,248,76,85,54,17,19,96,173,19,71,133,17,19,62,104,19,56,87,126,78,93,91,88,25,65,17,13,58,27,21,56,17,27,37,17,40,75,112,70,63,54,45,50,45,21,57,17,75,68,57,17,97,53,54,17,59,47,13,52,57,63,48,28,13,68,65,49,41,57,17,23,21,53,76,17,25,43,42,21,17,13,59,68,21,88,35,41,88,51,76,86,94,87,62,37,25,42,84,68,33,54,44,45,33,29,39,41,29,25,30,42,25,44,46,25,54,52,25,21,33,39,70,17,27,53,17,13,81,166,13,61,117,44,68,42,21,46,32,37,21,40,64,74,46,21,17,27,33,17,25,68,17,13,39,65,13,44,70,13,43,80,13,37,21,46,17,28,32,17,13,44,23,21,95,17,27,37,17,13,50,21,53,17,27,27,17,13,39,21,48,17,27,27,17,13,45,56,34,42,13,9,16,119,86,68,34,9,18,71,49,9,19,9,17,24,19,5,23,50,39,99,28,28,5,37,36,5,20,15,7,16,7,85,74,76,7,32,36,35,32,19,7,63,7,48,78,5,57,7,114,7,26,46,5,21,7,94,34,7,37,46,5,43,7,62,7,35,52,60,5,39,7,107,6,12,15,51,13,53,13,58,22,51,53,10,7,35,48,5,39,7,90,7,35,44,5,39,7,87,49,7,40,62,5,49,37,65,5,35,47,78,5,41,53,85,45,51,28,13,9,21,5,51,7,72,7,50,92,5,69,21,42,69,63,5,55,40,35,29,84,48,57,33,9,18,5,7,123,88,7,41,18,21,37,23,67,43,63,112,23,68,61,9,14,78,41,69,48,34,54,9,14,57,31,71,83,97,86,93,101,54,73,91,75,98,52,85,116,61,25,65,112,71,55,25,21,17,86,13,73,9,19,17,5,7,123,6,19,12,55,56,57,55,58,59,63,64,65,67,63,65,63,66,68,69,68,69,10,7,34,52,57,5,37,37,38,67,45,39,24,99,62,54,92,5,43,60,38,78,45,39,22,99,72,54,106,145,80,5,41,79,43,40,114,75,67,37,13,9,5,86,45,91,9,85,45,90,23,30,9,18,5,68,81,90,25,179,9,49,59,34,58,9,18,5,57,47,49,75,53,23,49,5,7,96,65,59,91,6,12,15,81,61,39,13,85,65,43,41,13,131,111,89,87,107,87,65,63,95,75,53,51,7,56,67,52,57,5,45,24,7,94,33,6,12,89,10,7,56,40,22,92,74,5,61,27,7,58,7,37,39,27,24,9,77,68,5,43,7,85,43,7,47,33,22,38,53,42,27,25,34,25,37,41,63,38,33,21,17,36,29,13,36,9,23,5,51,7,111,6,12,20,68,88,15,70,66,13,74,72,13,84,87,10,7,33,23,55,42,9,17,42,70,43,30,25,58,61,36,13,18,77,13,9,20,5,35,7,93,94,6,12,68,70,81,10,7,32,23,55,42,9,136,5,33,7,96,61,59,91,6,12,102,10,7,66,79,5,65,68,98,5,61,34,38,49,52,24,9,67,75,34,30,56,28,13,9,49,98,125,5,37,49,40,22,67,5,79,91,5,83,63,61,37,60,58,5,23,42,38,98,27,71,141,9,14,48,9,5,53,53,50,51,9,20,5,75,53,51,48,9,20,5,75,7,94,83,6,12,77,79,81,77,10,7,46,83,5,61,68,163,122,5,47,25,51,69,58,20,35,28,37,28,39,101,48,53,53,68,41,26,9,94,49,46,46,95,51,9,104,35,69,69,76,48,77,47,32,13,9,72,5,7,108,7,46,72,5,61,7,59,7,48,74,5,65,63,51,50,50,9,57,42,9,74,5,35,72,51,60,58,9,57,42,9,56,25,29,24,79,77,63,25,9,117,59,105,77,29,13,9,20,5,35,7,129,64,6,77,7,81,63,73,145,5,49,23,98,75,71,18,96,76,72,98,54,22,9,26,32,9,51,26,56,32,9,84,5,65,96,146,139,122,176,57,5,67,92,56,36,143,5,53,70,121,5,57,151,216,47,70,101,56,9,57,5,73,60,22,45,39,30,13,57,43,33,13,35,9,5,59,46,53,5,55,20,21,63,15,7,16,118,216,5,22,145,121,100,184,231,142,123,220,112,259,211,217,232,205,262,232,229,202,232,300,205,169,176,139,235,243,187,202,255,208,211,160,241,333,169,193,204,210,219,189,177,427,265,386,165,276,163,342,214,395,289,281,281,193,208,230,168,333,229,187,269,238,238,181,219,214,136,169,166,161,204,231,330,297,318,241,190,240,121,103,269,119,309,270,268,299,274,190,199,187,106,142,130,115,163,118,140,154,124,151,148,148,148,154,169,130,133,151,105,124,244,282,276,180,228,222,151,181,196,228,208,420,390,418,408,412,247,147,203,178,156,219,127,124,144,181,196,220,232,148,163,187,256,269,287,287,193,158,193,220,191,287,208,289,172,190,543,425,334,151,299,497,623,261,234,382,358,240,366,253,539,208,229,139,176,137,189,234,310,214,260,295,304,304,280,307,293,296,289,301,298,292,293,197,235,272,208,214,188,272,344,455,435,372,260,220,283,233,187,276,276,298,304,211,208,269,340,367,252,279,240,336,431,237,223,238,214,250,214,253,353,402,414,452,366,217,187,190,385,377,350,337,245,309,285,186,401,311,255,344,166,423,146,240,231,264,166,156,213,268,208,169,285,407,195,210,262,264,279,279,299,146,215,194,170,112,386,146,245,547,129,129,502,312,312,194,182,180,345,274,283,298,307,211,178,179,149,204,319,374,276,331,162,157,171,196,251,210,181,195,172,213,172,200,256,306,225,256,306,225,243,298,216,186,241,183,156,110,153,213,170,201,141,180,543,498,210,160,201,286,154,154,157,211,211,167,234,413,465,413,330,332,511,339,487,143,265,265,221,248,301,316,361,376,365,365,134,369,223,179,122,171,134,245,379,292,221,267,374,194,194,131,209,197,143,229,238,207,174,176,165,223,176,241,204,213,197,231,201,216,240,207,219,343,388,177,330,240,397,192,249,193,220,248,157,231,172,514,310,272,290,285,331,371,414,389,255,357,360,322,211,309,301,161,268,187,313,173,249,176,458,536,240,168,508,298,232,226,242,220,160,172,182,175,301,220,163,289,311,321,248,231,346,348,496,304,389,275,282,308,408,151,331,317,430,248,232,134,192,298,264,289,202,198,370,381,381,381,146,239,201,131,383,368,346,253,250,248,137,392,236,307,236,268,238,303,387,289,221,173,170,188,187,188,191,149,217,223,230,149,226,295,279,225,228,313,146,211,339,208,343,468,253,261,269,274,339,275,245,308,272,173,297,290,203,226,311,200,413,425,247,332,326,205,265,137,305,204,265,191,250,396,220,202,232,276,316,238,295,291,191,304,431,243,243,361,294,334,199,383,209,135,150,176,246,257,183,219,182,209,227,206,415,405,302,382,356,396,436,227,172,277,159,186,304,174,210,310,384,247,295,305,188,190,286,224,403,181,141,187,341,335,217,163,374,382,462,398,398,484,197,244,259,484,496,592,385,214,336,297,403,326,220,263,281,317,239,178,349,319,496,301,310,264,289,418,201,210,226,232,273,273,329,308,343,188,188,197,200,194,261,175,323,417,429,339,196,204,372,330,276,234,247,249,384,280,371,380,390,384,266,246,314,320,255,205,262,174,319,191,192,281,289,213,345,221,182,227,330,292,293,242,180,276,351,437,214,337,208,301,254,249,255,519,256,234,167,164,264,417,507,441,364,276,185,389,128,368,379,204,219,245,220,248,164,214,126,200,204,392,346,167,145,272,186,262,224,254,291,238,418,371,298,385,343,405,293,298,199,205,160,154,162,176,197,155,381,191,212,170,401,385,397,411,449,206,224,151,190,166,200,147,381,352,280,328,298,319,305,305,177,260,226,193,175,200,206,203,213,374,404,419,356,315,459,408,199,235,253,275,400,267,327,199,468,240,543,145,338,230,259,231,273,320,377,146,224,336,262,187,503,441,330,238,204,267,279,360,339,345,324,315,276,276,269,259,281,329,268,222,390,337,291,376,316,270,307,261,386,345,370,324,420,380,336,406,361,315,382,341,366,320,369,323,412,372,326,398,351,305,342,296,364,303,257,398,349,303,386,345,370,324,416,376,330,402,355,309,346,300,368,307,261,228,245,282,272,427,373,327,281,386,331,285,371,310,264,301,255,285,275,272,234,280,343,224,220,285,380,343,346,370,408,387,326,387,411,413,385,419,443,206,244,319,143,155,143,202,193,155,264,402,234,351,240,198,215,239,293,264,186,253,210,268,206,287,415,233,293,471,280,322,392,134,193,419,406,236,184,134,184,193,256,302,122,229,205,427,353,433,221,333,296,200,209,206,316,231,192,168,348,117,192,228,207,156,123,380,183,186,165,165,156,120,150,357,104,86,77,110,99,94,213,170,228,77,77,86,89,92,89,116,102,165,179,203,176,307,131,135,272,116,284,291,264,366,308,336,86,321,207,276,318,261,189,219,260,177,255,231,186,237,231,147,221,231,219,390,201,167,218,212,224,178,283,168,235,224,318,133,213,257,141,180,212,177,236,243,320,268,176,229,164,197,218,141,201,238,311,309,217,178,262,325,222,229,391,325,339,177,307,202,222,156,168,315,283,247,158,409,253,212,272,332,368,248,230,147,171,273,393,280,228,198,256,283,212,318,346,210,207,174,156,210,320,348,141,291,125,359,183,162,178,337,391,186,246,181,235,318,225,184,189,286,183,200,201,165,312,144,274,144,90,154,292,287,417,293,172,240,174,200,236,232,105,110,282,367,168,309,198,135,195,538,556,514,306,350,233,287,367,345,171,224,198,363,217,241,302,255,288,86,110,77,119,104,107,128,125,122,134,137,89,116,101,290,121,218,145,290,269,232,199,242,262,269,143,217,225,244,393,252,200,191,308,305,256,265,253,152,230,180,126,189,138,262,253,258,167,249,224,174,219,286,156,258,213,289,362,155,238,236,399,271,262,418,226,499,285,174,291,387,427,345,387,427,343,423,463,391,289,213,252,300,278,270,212,379,263,186,198,189,173,460,255,326,231,321,283,246,162,228,294,258,366,264,353,295,263,207,270,221,445,185,219,231,249,273,270,390,339,313,255,186,231,352,300,280,225,267,303,168,359,399,366,311,351,222,216,292,336,399,177,270,198,189,292,255,192,261,309,309,306,232,260,265,281,396,255,224,237,218,183,204,449,291,225,239,322,185,332,347,325,141,147,210,264,256,166,222,273,326,355,236,291,285,312,302,428,370,218,259,252,264,315,207,131,348,195,199,291,288,229,96,111,90,99,169,148,157,351,245,171,271,176,116,223,414,510,110,125,104,104,134,119,159,269,310,216,300,249,297,226,195,177,180,171,316,280,328,332,310,311,300,286,228,201,317,435,483,492,405,277,168,129,142,163,198,350,341,330,390,278,465,541,228,532,255,257,318,321,312,363,342,376,376,314,231,360,353,267,277,411,396,402,342,379,217,229,154,298,201,197,256,231,223,211,221,223,217,232,232,253,246,297,142,238,361,171,210,273,274,247,255,244,407,274,202,267,244,160,403,435,245,255,202,208,277,485,457,208,310,169,355,258,380,201,219,394,287,219,236,192,362,255,266,200,203,199,197,223,405,137,233,155,177,131,134,169,156,142,124,133,122,114,125,173,157,142,191,155,131,119,140,152,179,146,142,190,157,182,121,149,148,220,143,184,180,165,194,201,184,124,133,172,134,122,115,115,162,140,154,149,163,142,98,135,154,127,169,158,212,187,136,145,157,221,163,211,265,217,193,307,181,169,172,157,254,259,201,148,187,162,175,190,162,199,161,146,158,121,136,148,123,124,139,164,190,190,190,151,166,181,181,146,136,142,157,151,163,213,234,165,180,190,270,190,103,130,121,166,165,180,96,163,195,141,177,209,144,127,172,181,131,126,234,145,198,232,232,214,217,212,215,153,214,229,296,133,181,289,163,262,187,205,190,251,127,184,202,154,142,142,121,193,199,160,181,151,211,169,205,229,118,184,153,175,199,193,193,201,216,143,212,142,145,199,187,172,172,184,178,211,173,178,134,140,132,141,171,192,154,133,145,133,145,186,184,149,154,162,365,206,298,210,264,257,159,314,448,354,234,207,279,225,234,188,271,306,246,222,378,402,487,448,319,379,243,242,257,251,6,20,7,16,11,19,48,44,5,63,19,61,88,5,89,20,33,48,38,36,46,44,44,46,41,39,41,41,47,40,10,62,47,46,45,43,35,39,39,43,45,41,45,37,40,47,38,35,52,44,36,42,52,50,50,36,42,38,44,50,42,38,40,44,44,46,46,50,44,48,48,46,44,44,38,44,44,42,44,44,40,42,40,38,40,44,50,44,46,38,40,42,40,42,42,42,36,12,71,2175,6,86,26,49,34,34,34,33,33,31,27,67,34,40,35,39,0,99,70,6,3149,4184,6,109,26,47,34,34,34,33,33,31,25,65,34,40,32,39,22,18,0,97,63,6,4659,5356,7,100,128,96,114,7,8161,9540,7,106,7,84,7,110,7,86,44,66,28,25,9,65,19,28,16,29,37,62,27,59,28,13,34,25,13,18,29,13,9,21,5,78,50,68,99,68,5,59,61,50,67,98,67,5,37,24,47,33,11,22,5,51,31,31,5,37,19,31,34,5,37,19,38,33,20,26,35,42,18,25,45,69,30,21,32,39,43,36,26,24,78,47,40,21,26,13,9,31,22,5,45,85,57,83,119,5,69,19,100,52,29,56,95,13,18,252,13,9,47,25,130,129,70,152,9,43,56,9,43,109,9,19,5,77,19,40,95,5,37,19,70,69,16,29,56,10,5,77,7,16,84,7,70,106,29,52,82,91,46,14,78,58,41,100,9,26,5,53,20,63,26,21,51,41,40,45,65,76,74,5,59,66,86,5,69,35,61,5,43,72,41,90,98,39,33,42,39,48,40,38,73,51,50,50,45,5,55,30,19,75,50,70,63,63,63,63,97,86,42,45,46,49,5,33,26,54,5,29,108,5,32,32,5,19,31,54,5,35,42,39,38,21,41,35,29,38,35,32,32,38,28,35,31,33,38,51,28,31,66,33,20,56,9,5,43,19,81,44,23,9,35,45,22,42,25,45,73,30,21,32,39,26,45,35,21,47,29,33,42,39,36,26,29,36,41,30,21,70,33,51,68,38,29,34,25,47,33,21,73,33,51,124,41,38,29,34,25,47,33,21,26,39,35,37,42,60,66,47,33,21,26,35,66,59,47,33,21,26,39,41,30,47,33,21,26,24,85,30,33,21,26,13,23,9,5,31,89,71,53,48,34,59,65,42,66,69,58,37,21,17,48,88,13,9,21,5,57,20,100,9,38,30,70,69,22,13,9,14,76,92,53,31,55,155,26,17,22,13,9,19,5,37,17,41,68,35,45,5,41,17,43,55,35,19,5,45,7,81,6,96,92,33,6,97,94,43,58,94,94,76,78,76,97,98,41,7,84,23,23,24,38,43,34,34,24,30,43,26,37,13,9,53,42,25,45,73,30,21,32,39,26,35,35,21,38,49,57,21,29,33,42,39,36,26,29,36,60,51,88,130,43,33,58,55,72,62,42,33,38,29,25,30,55,128,45,42,33,38,29,25,41,57,133,61,101,55,33,29,50,45,47,75,58,25,33,21,31,24,85,72,61,25,30,33,21,31,13,9,37,113,9,27,5,63,96,5,63,64,95,5,65,75,104,5,69,76,103,5,71,87,24,26,9,98,24,5,49,120,5,57,50,121,5,59,38,31,50,20,28,9,5,31,53,95,53,94,5,45,71,95,95,55,109,93,5,43,19,73,38,54,25,9,72,99,29,13,9,20,5,43,80,111,79,31,67,16,22,16,60,21,50,21,18,23,23,30,28,37,23,58,52,52,58,80,62,100,113,107,113,118,127,94,76,104,62,51,65,47,53,99,49,57,61,43,53,45,53,61,39,43,23,29,59,29,45,51,35,35,43,29,33,33,10,35,80,34,49,106,18,15,9,23,49,52,26,33,29,46,29,13,9,39,28,39,49,28,26,46,40,62,41,47,56,61,21,56,112,21,26,94,21,26,32,29,17,34,42,53,26,29,17,22,13,58,90,13,55,9,31,28,52,32,35,56,22,55,13,26,94,22,50,102,26,41,57,37,57,17,22,93,30,17,13,23,59,38,38,52,17,41,49,17,13,18,109,13,84,137,24,49,107,18,13,18,36,103,66,57,13,9,89,78,23,13,38,54,64,35,141,17,22,128,17,13,18,132,38,13,9,36,28,56,22,13,49,9,11,68,59,11,71,115,64,9,11,73,70,11,73,103,9,83,32,39,49,74,46,61,62,41,47,56,21,56,112,21,26,94,21,26,29,17,51,59,91,17,70,63,26,17,36,22,49,13,47,32,13,58,90,13,65,9,49,78,45,18,28,28,26,33,57,55,70,26,17,46,35,57,26,26,17,71,57,51,32,29,17,61,57,55,70,26,17,22,13,26,9,11,87,55,11,65,81,18,28,30,31,26,33,59,55,72,122,26,17,52,22,53,59,26,122,26,17,23,115,59,29,107,26,17,35,54,59,69,32,29,17,57,103,59,59,26,82,30,21,37,32,29,17,22,13,58,34,34,9,55,28,18,29,61,26,13,42,18,25,33,28,89,30,71,58,21,32,32,32,33,32,33,32,33,32,33,32,33,32,42,32,42,32,33,43,61,85,147,48,79,66,29,25,21,37,84,30,32,84,75,62,25,47,46,114,106,68,110,79,66,29,34,46,29,25,68,59,21,59,31,66,33,43,64,75,62,25,73,34,75,62,25,21,29,66,106,91,45,82,30,21,32,39,46,51,30,24,51,13,9,51,98,36,57,13,18,65,26,13,9,46,98,90,48,46,35,65,47,13,47,114,47,13,29,61,47,13,69,73,22,13,18,75,47,13,42,26,13,53,9,102,93,38,76,34,25,87,30,29,13,22,9,46,152,34,25,102,94,30,36,13,22,9,40,28,28,31,48,60,40,17,53,53,75,33,68,62,36,33,21,45,78,30,21,59,57,54,68,29,32,17,22,26,17,13,49,26,9,39,100,40,40,50,60,64,48,47,21,17,13,47,9,48,27,126,103,41,49,26,46,144,40,62,43,49,56,21,56,112,21,26,94,21,26,29,17,40,63,26,17,35,22,49,13,58,61,90,13,25,9,38,55,34,79,68,72,17,22,45,13,79,79,73,67,59,71,38,47,46,13,9,25,19,27,38,37,26,31,33,58,17,48,47,86,55,37,33,21,26,61,21,17,29,43,49,65,41,34,37,25,30,132,57,41,29,34,38,29,65,25,37,46,43,40,52,42,43,43,44,44,52,51,50,48,53,46,46,51,55,54,54,51,41,34,37,25,30,95,38,29,68,25,46,75,79,95,29,85,25,30,65,46,46,50,62,43,98,42,75,81,25,30,61,44,78,79,96,29,86,25,75,83,25,30,63,44,30,63,45,30,64,43,75,82,25,77,79,94,29,84,25,30,104,78,48,37,25,62,39,73,76,25,75,78,25,30,58,40,30,59,40,74,78,25,75,79,25,30,59,38,64,60,66,25,117,77,25,30,57,40,46,74,37,47,72,42,33,38,29,162,45,41,29,34,79,29,25,45,77,37,124,76,29,54,57,47,64,112,45,57,42,33,38,56,56,77,33,29,171,49,78,29,45,41,29,34,53,71,33,78,29,25,75,79,25,30,59,37,133,37,101,46,81,49,29,59,64,63,25,137,37,79,46,76,49,29,59,68,63,25,138,37,79,46,75,49,29,59,67,63,25,51,86,64,57,66,25,121,125,116,36,37,37,37,37,37,37,37,37,37,84,37,40,30,59,44,30,63,43,64,77,45,41,29,34,76,29,25,77,79,94,29,84,25,75,82,25,62,74,77,81,25,30,62,41,64,77,45,41,29,34,76,29,25,75,79,90,29,80,25,80,85,25,30,60,46,64,77,45,41,29,34,76,29,25,30,65,43,110,79,25,77,79,94,29,84,25,30,62,46,30,65,47,30,66,40,75,79,25,30,59,45,30,63,39,64,77,45,41,29,34,76,29,25,73,79,84,29,74,25,75,77,25,30,57,46,30,64,41,30,59,37,30,56,44,77,112,37,72,93,64,25,61,96,37,67,97,64,25,64,30,55,39,65,90,34,59,25,93,34,84,25,30,85,89,25,66,28,81,45,58,25,62,48,37,25,51,69,48,37,25,48,75,36,55,17,13,9,44,154,38,27,44,69,33,46,13,32,54,9,66,36,57,36,99,40,59,48,56,17,44,13,9,39,54,68,76,75,107,25,97,21,71,92,21,26,72,17,63,26,67,17,13,25,9,46,131,31,48,9,37,87,37,37,45,30,100,75,35,59,86,30,21,48,42,59,86,30,21,35,55,76,41,21,74,75,83,28,30,21,59,48,21,57,40,21,60,49,21,24,17,90,24,17,24,59,58,13,25,9,102,96,37,41,13,49,52,27,15,9,71,57,25,33,13,31,39,47,33,42,13,29,9,11,74,11,56,120,27,74,9,63,27,85,9,56,83,38,63,9,40,59,35,54,13,25,9,36,55,35,50,13,25,9,40,127,31,50,9,54,83,38,29,54,13,44,45,66,29,63,17,22,54,13,47,22,55,13,59,39,74,82,31,44,51,26,17,49,60,73,68,21,26,17,52,86,17,52,90,17,139,39,33,50,18,63,68,44,17,97,96,50,26,17,51,45,17,22,13,55,97,9,79,28,38,52,136,51,140,125,47,35,50,48,42,30,33,21,76,42,30,50,97,33,21,37,118,41,30,21,17,110,51,57,26,17,44,13,25,9,42,27,43,42,42,73,58,24,81,34,13,9,44,38,43,9,35,38,38,29,54,13,44,32,25,33,42,39,36,87,30,21,60,33,52,45,69,30,21,32,39,61,57,39,58,41,59,42,60,42,61,43,62,39,58,42,61,37,56,36,55,34,53,39,58,35,54,40,26,73,108,33,68,89,60,21,57,92,33,63,93,60,21,26,51,13,57,30,144,42,59,50,56,17,52,13,18,47,13,9,59,30,40,40,34,44,44,36,86,64,41,30,40,40,34,44,44,13,26,9,53,30,30,40,40,34,44,44,58,41,36,26,26,36,36,30,40,40,54,26,9,38,69,9,36,70,9,28,24,9,43,42,9,50,33,70,35,9,44,36,9,48,43,9,46,38,9,38,42,26,31,31,36,35,38,9,41,43,9,5,37,19,130,115,30,45,33,87,9,34,38,54,113,47,72,88,76,13,9,21,6,19,27,28,21,9,17,5,61,53,67,33,50,9,72,62,57,5,154,19,45,52,5,49,20,7,16,55,51,82,154,80,5,67,57,73,5,69,45,50,33,46,32,46,32,46,32,46,32,46,32,46,32,46,32,46,32,99,20,34,9,5,53,32,40,5,33,36,33,5,41,55,70,5,59,19,65,60,5,79,47,52,84,5,59,48,58,5,51,44,57,69,5,41,58,97,5,71,58,85,5,55,78,36,36,48,5,69,61,71,5,71,49,55,67,79,5,51,44,24,41,9,25,42,9,48,5,39,51,50,5,59,44,65,5,55,48,68,5,63,53,28,45,9,52,5,53,117,7,97,94,59,6,98,10,7,70,35,47,9,35,30,9,110,58,33,43,48,52,50,40,43,118,126,85,14,123,123,81,80,75,70,65,123,81,84,86,88,91,123,14,122,66,14,123,123,81,80,75,70,65,123,81,84,86,88,91,123,14,65,121,119,123,21,14,123,123,101,100,95,90,85,123,81,84,86,88,91,123,14,120,122,73,14,120,119,21,14,110,70,14,50,117,36,14,16,57,73,72,16,38,34,34,50,55,59,55,71,71,9,118,5,103,39,54,70,121,35,17,13,9,5,53,59,125,5,71,42,37,66,9,21,5,53,42,43,24,9,48,5,53,56,34,50,38,9,27,5,75,47,40,58,9,35,58,31,9,70,36,31,9,64,36,9,21,5,45,68,5,59,19,59,86,5,87,96,95,95,92,94,97,50,41,72,5,51,19,124,7,64,62,7,64,51,77,27,25,165,13,19,9,38,39,94,83,134,82,9,49,31,74,80,80,78,28,54,13,103,44,29,13,55,34,17,54,13,23,29,109,17,29,13,17,70,76,13,24,29,111,17,29,13,24,9,5,67,46,19,49,37,13,9,62,5,41,43,22,40,36,33,13,30,28,13,31,9,25,5,35,7,75,6,36,7,36,56,5,41,47,58,24,9,29,22,40,70,13,33,9,5,43,131,51,158,5,59,7,68,6,53,46,7,53,28,155,5,63,46,79,5,23,33,109,56,9,62,5,31,7,101,108,27,7,55,49,24,29,9,70,38,54,9,70,32,45,91,94,17,22,47,47,115,37,17,36,60,41,59,58,51,39,25,17,22,53,69,13,46,92,72,17,22,13,9,5,45,46,64,5,20,43,122,24,9,146,24,9,21,5,33,49,76,5,53,20,39,84,5,47,20,59,35,37,35,44,47,44,60,38,17,22,13,42,46,41,66,49,46,42,51,98,59,61,63,51,28,41,17,13,43,58,40,64,46,56,76,13,51,39,71,51,17,9,32,5,73,48,38,29,62,166,5,51,17,36,27,29,9,92,36,9,84,52,40,13,63,95,13,9,94,36,9,5,41,58,25,46,52,192,13,18,63,104,105,43,42,17,13,9,121,29,5,7,61,6,75,62,65,70,69,64,6,68,7,43,69,5,53,19,50,68,5,67,62,42,80,129,11,5,7,66,6,77,65,68,70,72,64,7,47,73,5,61,19,54,72,5,75,7,56,6,74,88,7,42,64,5,53,62,40,61,5,49,65,43,62,5,55,59,37,58,5,43,60,38,59,5,45,17,45,77,5,59,61,39,60,5,47,17,46,78,5,61,63,41,62,5,51,17,48,80,5,65,63,40,61,5,49,17,47,79,5,63,47,79,5,63,64,42,63,5,53,18,49,81,5,67,58,36,57,5,41,58,36,57,5,41,60,38,59,5,45,62,40,61,5,49,68,36,112,60,67,23,9,25,5,41,7,61,6,68,63,64,65,70,68,50,7,33,60,43,104,9,68,5,35,7,91,6,80,70,7,39,48,52,49,9,44,48,51,45,79,39,13,78,33,13,9,5,47,48,35,111,44,69,80,93,27,39,13,9,20,5,81,33,59,5,35,19,40,58,5,49,84,57,69,5,63,47,52,5,41,50,48,87,5,53,76,45,52,172,5,53,36,61,64,30,69,72,88,5,7,70,85,7,58,40,33,9,40,73,136,9,34,39,9,34,67,31,29,13,45,86,46,13,9,29,5,85,58,50,115,26,5,85,14,33,93,5,35,19,50,90,5,69,42,94,5,53,41,93,5,51,32,84,5,33,36,29,57,56,61,52,57,5,41,19,40,97,5,49,7,100,7,19,52,83,5,73,7,104,6,103,100,134,129,48,128,48,7,19,45,65,57,57,5,59,38,118,5,45,41,80,73,5,51,52,82,5,73,35,87,5,39,47,99,5,63,42,95,5,53,39,28,40,48,28,20,29,9,5,47,35,42,55,63,5,39,43,101,5,55,17,14,17,6,90,45,19,27,37,5,23,19,31,43,5,31,7,49,77,105,7,32,73,5,33,7,49,77,105,7,25,35,5,25,18,19,33,74,5,33,15,19,34,86,5,37,40,40,5,49,22,19,42,89,5,53,43,48,5,55,51,29,47,46,5,71,46,72,5,61,56,28,43,43,72,43,46,40,51,39,20,29,9,5,81,35,65,5,39,47,88,5,63,18,19,42,99,5,53,26,17,63,113,5,95,17,64,88,5,97,15,19,36,24,43,40,39,42,41,40,41,42,44,43,41,43,28,9,21,5,39,19,48,83,5,65,19,45,132,5,53,31,41,5,31,33,29,47,44,5,35,35,29,43,50,46,46,55,5,39,34,29,43,54,54,5,37,16,35,55,5,39,19,64,99,5,97,19,46,64,5,61,19,37,90,5,43,50,23,47,45,39,39,39,46,41,28,20,29,9,5,19,39,23,43,41,42,46,42,40,45,43,28,20,59,9,5,47,19,44,114,5,57,14,35,29,45,53,51,45,45,48,61,56,5,39,32,109,5,33,31,100,5,31,19,39,28,45,39,39,28,20,29,9,5,47,19,34,29,52,47,51,49,49,5,37,41,59,5,51,47,29,52,61,50,51,45,46,5,63,11,7,69,98,21,7,31,44,5,31,52,28,40,43,28,9,21,5,73,23,19,37,19,33,57,59,9,21,5,43,19,40,29,56,58,5,49,19,42,29,48,52,5,53,7,93,7,19,58,38,47,37,42,28,9,21,5,65,7,64,7,19,49,55,55,5,67,7,71,7,19,55,28,48,51,28,9,21,5,79,19,55,28,42,68,77,70,28,9,21,5,79,7,70,7,19,54,28,47,50,28,9,21,5,77,19,68,29,58,47,45,5,105,17,52,29,58,48,5,73,41,28,45,49,42,41,52,37,28,20,29,9,5,51,42,95,5,53,38,29,52,63,5,45,19,45,88,5,59,49,23,52,51,41,42,38,49,39,52,50,51,51,43,46,37,133,51,40,39,40,56,46,39,39,39,39,40,45,40,111,28,20,29,9,5,19,38,81,5,45,42,23,49,50,44,44,42,43,51,28,20,58,9,5,19,47,28,50,28,49,66,63,20,29,9,5,63,19,7,73,51,7,33,76,5,35,37,23,49,43,41,44,41,40,45,47,54,28,20,51,9,5,42,29,57,47,5,53,19,55,45,53,5,79,66,28,40,42,42,39,42,28,44,112,9,21,5,51,19,34,75,5,37,19,41,50,5,39,19,39,166,5,43,19,48,57,132,5,61,19,41,96,5,51,14,19,34,31,34,5,37,19,35,32,5,39,19,37,49,34,5,43,19,33,29,45,51,44,5,35,19,36,29,45,52,5,41,19,41,29,43,52,5,51,19,42,29,46,50,5,53,19,46,100,5,61,38,47,48,50,49,61,45,49,44,49,53,52,45,46,57,49,54,46,51,49,51,60,49,49,43,52,53,51,45,61,54,47,53,49,50,51,5,47,53,52,50,54,54,49,51,51,57,51,50,61,5,57,48,51,51,45,53,48,48,48,46,45,50,49,49,48,46,51,48,47,53,56,57,5,19,34,52,107,9,44,5,37,19,43,53,5,55,7,80,7,19,49,63,5,67,19,32,29,57,47,38,5,33,37,42,25,40,108,29,13,9,41,5,7,82,7,19,39,29,57,47,40,5,47,24,19,38,29,57,47,44,5,45,10,19,43,29,45,43,59,5,55,19,31,29,44,47,55,40,46,5,31,19,39,29,46,53,5,47,19,51,29,46,48,5,71,44,29,51,56,5,57,14,42,29,44,48,5,53,12,53,19,32,93,5,33,67,49,51,56,48,36,31,42,41,5,67,62,19,31,99,5,31,34,51,5,37,34,51,5,37,50,19,111,34,31,43,5,37,48,19,28,27,5,25,55,19,35,34,5,39,55,49,28,47,37,42,45,47,46,38,28,20,29,9,5,67,43,134,5,55,19,40,108,5,49,33,19,38,38,70,35,31,25,13,22,61,63,26,17,13,34,32,13,36,25,13,9,69,5,43,40,108,5,49,36,132,5,41,17,20,15,7,16,32,47,44,53,49,47,27,95,53,48,39,17,13,9,25,5,51,50,105,5,53,41,34,22,80,43,55,13,9,22,5,45,40,63,5,45,54,45,21,64,16,49,29,32,36,37,40,34,42,36,38,37,66,46,36,59,47,49,49,59,62,127,85,30,58,36,36,52,55,49,57,58,10,5,68,73,71,5,69,73,97,5,79,71,95,5,75,77,82,110,11,5,47,46,22,37,31,33,34,27,38,33,31,9,5,41,7,85,54,7,42,37,96,66,46,25,30,13,9,25,5,35,40,40,34,96,52,25,30,13,9,25,5,31,50,42,46,35,11,5,33,50,47,13,33,42,9,17,33,49,9,5,65,33,35,5,35,66,112,5,45,82,42,67,9,77,5,45,120,62,87,9,139,5,77,56,45,50,50,5,61,70,97,66,80,72,79,5,61,37,124,5,41,61,81,5,55,43,91,5,45,67,80,62,73,5,55,102,64,48,50,146,39,75,32,26,28,13,9,21,5,57,79,39,33,79,5,47,39,66,64,68,70,102,58,49,48,73,13,99,97,21,62,9,5,40,60,31,9,20,5,49,44,101,5,53,43,144,5,37,42,28,33,37,40,42,42,28,9,21,5,53,55,35,50,5,55,56,36,45,67,102,5,41,51,35,54,29,41,50,37,41,9,14,33,46,90,52,72,91,19,26,81,80,22,13,23,9,5,47,7,95,146,7,69,92,5,53,102,94,91,94,85,6,24,6,95,93,94,27,34,33,24,9,94,5,37,34,36,5,37,75,52,22,31,73,62,59,22,13,9,77,18,5,79,36,22,31,73,62,59,22,13,9,48,18,5,43,98,5,7,80,7,62,76,5,85,60,79,5,81,7,80,7,66,80,5,83,64,83,5,79,7,55,6,71,7,75,114,95,65,42,65,68,75,75,87,59,29,9,21,5,71,43,66,64,5,41,72,103,101,29,16,37,84,42,59,39,52,86,14,36,49,33,15,9,33,57,29,13,49,24,9,5,63,64,84,85,34,28,9,69,108,146,9,53,64,9,99,94,102,75,78,82,9,87,38,51,5,45,62,54,55,9,98,5,69,81,64,81,5,77,49,65,5,58,164,5,85,75,64,34,22,9,114,49,51,135,9,20,5,65,49,64,97,5,37,28,25,5,7,89,83,7,43,74,5,33,7,55,7,33,37,47,5,35,5,40,16,21,96,55,218,49,103,113,170,51,51,39,73,42,55,55,40,45,221,59,14,21,35,14,21,39,49,47,86,49,14,21,37,45,44,35,38,45,53,46,54,47,14,21,43,51,74,39,14,21,38,45,46,51,48,37,89,82,14,21,44,38,14,21,30,31,34,35,42,35,36,35,36,37,37,38,39,46,32,13,10,5,57,28,37,70,94,98,120,104,86,54,15,88,94,46,71,9,95,88,28,42,96,126,45,39,83,17,22,83,17,13,56,39,41,41,109,72,139,41,152,36,64,51,47,52,49,52,47,51,17,22,13,40,39,33,51,91,120,17,33,9,89,5,39,46,128,25,9,98,61,9,41,5,44,89,5,55,112,55,55,90,5,67,48,84,74,5,51,76,51,105,5,107,36,126,5,41,50,89,5,69,45,77,5,59,7,60,52,45,86,7,49,69,5,67,85,59,71,5,71,45,92,83,5,51,52,56,65,5,71,48,64,5,61,49,75,5,67,49,87,81,124,35,38,56,39,156,9,21,5,67,52,15,210,5,69,51,115,5,63,182,5,61,7,95,7,69,57,34,28,28,29,29,22,20,29,9,61,37,25,9,67,68,24,9,79,54,24,9,75,52,77,28,13,67,56,9,21,5,73,45,28,38,37,39,45,40,42,42,39,45,39,39,47,46,41,47,55,28,33,73,81,83,9,21,5,35,52,28,44,43,42,28,20,36,68,9,5,73,59,28,41,46,43,42,40,43,45,44,43,48,48,44,47,45,39,39,39,46,41,28,20,36,29,9,5,87,38,28,45,51,28,20,29,9,5,45,53,28,45,51,45,44,47,45,48,48,43,28,20,29,9,5,75,55,126,5,79,42,71,5,53,82,54,52,114,5,73,60,62,27,26,67,9,5,81,43,93,55,44,85,5,57,41,107,5,51,45,110,5,59,42,28,37,44,40,40,40,56,62,48,66,77,123,20,50,9,5,53,39,28,39,30,44,37,88,41,92,52,86,101,17,22,59,17,43,86,20,50,9,5,47,77,51,102,5,57,95,62,107,5,67,101,57,106,5,81,94,51,57,123,5,89,60,52,53,19,68,77,9,5,106,54,16,23,25,27,36,44,85,50,10,5,83,100,16,29,21,22,36,44,85,50,10,5,89,69,61,34,42,48,34,35,5,95,67,16,29,29,42,31,39,41,10,5,59,56,162,23,42,72,5,59,61,59,62,93,91,38,59,68,99,13,9,58,5,52,29,28,38,92,55,80,51,17,67,93,21,47,42,44,43,48,45,43,38,47,46,45,39,39,48,47,45,43,38,22,41,70,38,41,69,89,63,9,38,92,25,66,9,48,49,49,27,60,88,24,134,134,9,14,133,133,9,63,5,49,47,92,5,63,37,48,5,43,32,72,5,33,49,151,5,53,31,65,5,31,26,63,5,21,29,99,5,33,30,100,5,35,30,35,57,45,5,35,41,116,5,57,40,58,63,5,49,37,69,5,43,38,37,46,5,45,38,41,33,5,47,37,43,78,5,63,68,120,5,69,48,65,52,57,52,62,58,54,117,55,72,60,76,73,68,11,5,53,109,129,117,111,37,90,24,9,28,38,42,41,41,41,42,41,41,44,40,28,39,69,55,80,41,109,99,54,37,104,97,39,17,112,39,17,82,260,28,41,52,41,41,58,33,17,59,44,17,90,18,36,18,94,51,102,32,17,38,63,90,49,58,52,58,55,53,45,55,52,55,54,49,47,53,51,47,47,52,49,54,50,52,59,52,50,49,71,60,106,37,17,13,9,21,5,43,48,22,37,28,13,31,9,21,5,53,79,97,52,30,33,32,47,41,41,37,43,43,46,44,46,46,45,47,42,45,48,44,43,59,13,9,5,55,52,30,33,32,47,34,50,34,42,21,27,47,52,49,52,103,79,27,24,50,93,116,82,59,35,25,21,55,108,52,56,21,13,9,5,55,7,87,89,6,33,7,48,56,36,9,65,60,9,14,29,9,5,65,44,28,48,44,43,39,36,51,39,9,5,57,35,19,32,46,42,41,50,51,49,59,51,32,13,9,21,5,39,45,59,5,59,61,69,71,5,91,47,146,108,83,5,63,52,28,45,43,39,39,39,47,46,28,9,21,5,73,79,22,44,48,13,69,38,13,34,9,5,73,36,87,5,41,42,123,5,53,69,139,70,64,5,107,51,66,5,61,45,60,5,49,62,68,65,68,73,13,25,11,5,53,81,99,70,149,26,11,5,67,69,73,73,72,9,5,79,90,103,70,149,26,11,5,75,64,87,101,5,51,42,63,5,53,53,74,5,75,39,60,5,47,50,58,60,30,13,55,11,5,69,60,92,5,89,60,60,22,31,24,141,13,32,52,92,76,87,50,61,36,21,81,79,88,85,51,39,26,41,94,108,103,61,50,21,62,104,61,43,21,26,45,49,33,21,32,51,50,49,59,51,49,49,47,43,43,43,45,50,46,47,42,32,13,9,5,43,7,77,7,51,28,86,110,41,47,46,47,28,33,43,47,53,47,47,111,36,28,37,17,20,29,9,5,71,40,103,146,31,9,79,42,5,49,42,80,24,37,43,51,50,37,13,9,25,5,53,7,72,101,81,131,106,109,7,55,22,31,24,28,13,32,52,39,26,51,50,45,43,33,21,32,51,49,49,47,43,43,43,59,32,41,94,108,103,61,50,21,62,104,61,43,21,26,13,9,5,45,60,98,28,37,71,30,39,13,89,30,13,9,5,89,43,51,37,5,55,7,88,7,36,29,106,63,5,41,7,87,7,35,29,106,62,5,39,49,15,156,5,67,61,21,88,56,77,71,5,91,46,28,41,37,55,62,37,32,174,37,41,28,9,25,5,61,41,28,52,32,45,49,36,20,39,9,5,51,60,59,79,25,9,28,44,44,28,47,90,66,39,39,45,107,46,66,37,123,48,61,70,65,71,9,21,5,47,57,44,79,5,41,64,110,5,55,45,28,44,129,45,39,39,125,20,29,9,5,43,59,34,24,60,68,5,87,33,33,58,62,58,43,9,21,5,35,37,28,40,39,39,39,51,50,51,52,51,42,41,52,40,51,45,51,46,43,41,42,44,44,49,50,44,49,41,46,45,38,49,39,43,43,40,28,41,70,39,17,198,43,59,39,17,198,44,145,37,197,32,17,28,40,39,40,56,39,51,20,29,9,5,43,42,33,30,47,37,47,45,38,46,42,51,47,39,39,42,43,41,43,38,42,50,40,42,132,54,54,42,42,44,136,55,51,40,50,40,50,48,50,37,41,46,44,28,55,111,55,67,20,48,9,5,53,38,92,31,9,49,5,45,51,75,5,71,60,130,5,89,71,71,47,5,111,53,139,5,75,60,130,5,89,35,32,5,39,38,33,5,45,31,70,5,31,33,66,5,35,40,39,5,49,30,62,5,29,42,46,45,53,68,127,5,53,78,63,25,9,81,94,25,9,32,25,9,26,80,5,37,7,109,78,7,62,103,5,93,7,137,7,76,102,5,121,92,53,38,9,48,33,158,5,47,43,59,136,5,63,46,86,5,53,52,105,5,51,44,125,5,57,85,44,51,54,151,115,42,9,32,5,57,97,50,49,81,5,69,67,57,48,42,49,32,76,11,5,7,131,100,7,50,131,76,85,107,9,92,108,25,30,13,9,5,69,7,43,36,48,40,37,117,6,87,7,72,47,60,123,9,64,61,59,31,9,122,31,9,5,53,7,58,40,47,6,97,101,7,87,50,141,79,60,21,9,5,50,77,126,26,151,5,69,152,37,49,234,101,35,13,9,57,36,9,5,43,7,69,102,49,6,24,33,40,7,50,80,100,9,72,69,58,71,72,76,64,57,107,13,58,9,76,103,77,9,21,5,43,51,83,30,9,20,5,71,40,71,5,49,39,70,5,47,52,88,50,66,5,73,105,53,49,63,89,5,67,55,49,61,58,65,67,62,91,5,79,22,40,87,5,49,40,47,107,5,63,55,73,235,81,5,75,90,80,47,90,58,96,5,89,71,106,5,71,38,50,29,9,39,5,45,55,40,60,36,13,47,97,59,13,125,61,13,53,9,149,32,9,229,36,37,9,69,5,31,113,5,7,121,117,7,19,71,50,29,9,59,70,23,9,20,5,111,51,76,19,40,40,13,76,62,13,9,25,5,71,62,60,40,9,56,36,41,9,95,52,44,49,13,33,61,51,13,43,48,107,79,56,98,47,13,144,33,40,13,9,28,5,95,53,51,30,9,26,5,75,50,111,5,69,49,34,80,88,46,5,67,48,55,32,105,96,102,105,43,9,5,49,39,50,25,9,43,152,5,43,57,23,28,47,58,45,132,51,232,20,43,9,5,83,46,96,5,61,52,35,45,45,35,51,42,42,125,39,58,75,20,33,9,5,73,42,28,45,45,44,51,133,38,89,42,41,45,89,20,50,9,5,53,48,28,45,110,51,28,45,96,20,50,9,5,65,36,108,5,41,59,24,38,23,30,9,33,65,44,66,23,30,9,5,71,37,19,32,41,49,47,59,50,51,49,60,13,9,21,5,43,46,100,68,52,5,61,37,139,5,43,32,73,5,33,42,48,53,71,61,24,5,51,48,53,77,59,158,41,24,5,81,28,45,67,42,47,40,46,40,9,5,131,57,113,5,83,47,46,24,58,23,24,5,57,19,66,112,110,9,28,37,41,98,13,52,123,22,13,56,131,22,13,53,9,39,5,57,52,32,106,66,9,67,5,7,83,77,7,42,38,26,38,63,46,5,48,33,59,57,60,112,56,49,94,26,9,146,14,35,32,15,57,33,76,103,33,9,57,74,110,72,40,9,5,65,122,48,26,31,9,42,29,9,41,51,20,29,9,142,45,5,65,61,58,122,72,28,33,13,9,56,47,5,91,46,47,66,5,61,42,38,19,55,46,85,61,51,24,9,5,53,114,33,39,21,29,9,32,77,24,9,5,35,33,56,5,35,46,41,70,111,5,61,34,52,47,5,43,36,112,104,5,41,37,36,5,43,23,32,60,68,68,71,44,33,22,34,48,67,89,162,37,53,54,56,148,46,46,89,55,54,45,49,34,26,48,41,26,59,47,44,21,41,26,50,47,44,21,41,26,24,40,13,33,9,5,57,117,117,91,71,39,62,5,47,7,97,61,7,57,28,33,45,41,39,43,37,38,41,44,40,42,42,39,42,40,39,28,9,21,5,83,48,175,5,65,33,44,31,9,20,5,45,57,5,59,51,63,5,71,7,36,71,84,7,65,18,67,25,31,9,29,5,99,64,48,70,32,52,5,41,115,35,114,25,9,59,64,5,39,49,22,34,28,31,9,21,5,47,55,38,130,5,45,19,43,33,28,40,56,40,54,41,28,37,47,69,17,54,44,96,17,22,47,59,80,64,64,32,36,17,44,93,20,33,9,5,55,61,52,66,49,5,91,77,37,33,30,47,45,45,43,39,39,38,46,52,81,44,41,83,45,42,43,71,52,43,40,67,28,9,21,5,43,71,28,31,36,40,40,39,38,44,46,21,37,45,65,65,66,54,54,54,54,88,139,220,66,98,5,59,48,35,40,43,43,43,44,51,35,41,20,39,71,57,9,5,65,39,68,5,53,44,52,40,5,57,50,74,5,69,61,144,30,5,91,45,60,43,75,51,22,33,13,9,24,5,59,51,94,103,5,71,52,31,89,9,14,102,104,9,5,73,91,41,99,162,30,5,51,46,94,65,5,61,47,22,80,43,44,34,17,13,9,25,5,45,38,22,37,28,13,31,9,25,5,33,31,80,5,29,41,101,5,49,44,63,5,55,45,103,5,57,50,43,68,5,69,37,43,55,5,43,52,57,82,5,77,30,85,5,27,22,31,62,68,60,64,78,68,37,20,35,9,35,28,47,46,45,41,47,17,28,41,66,43,17,22,9,25,37,9,21,5,43,36,28,47,46,41,45,46,55,67,9,21,5,41,49,73,5,67,43,168,5,55,7,73,57,68,69,77,53,7,42,56,45,5,39,34,113,25,9,115,53,42,5,37,55,28,37,44,40,40,40,62,48,53,67,76,17,66,74,103,21,55,17,33,20,50,9,5,79,42,28,37,40,56,40,28,20,29,9,5,53,49,67,5,67,56,97,5,81,55,84,5,75,84,92,5,77,36,56,5,37,48,56,5,61,7,54,7,41,82,5,51,46,77,5,61,43,44,49,5,55,39,56,38,9,20,5,47,52,29,45,52,53,47,51,45,45,51,45,5,73,39,47,48,5,45,48,78,5,53,22,31,58,60,68,53,47,109,81,5,63,69,23,41,67,49,44,42,44,43,49,43,37,44,35,56,46,50,51,62,54,51,53,62,68,79,55,51,49,52,64,62,45,17,9,28,5,59,50,47,109,78,5,57,38,61,49,9,127,39,9,14,35,9,5,33,27,36,22,35,50,70,89,25,41,72,32,36,30,28,33,62,77,10,101,44,48,27,22,43,47,70,80,95,37,79,80,100,37,54,33,37,87,34,34,33,82,30,62,34,33,34,76,31,35,60,78,32,34,61,80,31,35,59,78,32,35,60,80,32,33,58,80,30,35,59,59,60,60,77,32,30,55,55,56,56,64,56,59,81,27,33,54,54,55,71,30,39,62,62,77,36,39,87,55,89,36,30,61,89,27,31,39,37,39,34,34,34,34,30,95,35,35,71,28,37,42,42,73,34,28,29,25,31,34,85,26,51,24,25,39,48,48,45,28,32,50,50,47,28,27,47,73,28,29,21,34,22,27,28,33,30,34,38,39,39,30,64,75,75,72,92,27,75,83,74,27,47,37,41,38,43,37,49,43,44,39,45,45,46,50,51,62,54,51,53,62,68,79,55,51,49,52,64,62,50,28,73,17,85,51,45,49,44,42,44,43,38,50,39,42,45,41,78,52,52,51,40,39,40,43,39,40,37,44,39,39,39,40,39,40,50,51,46,41,43,51,56,46,51,45,38,49,39,40,20,40,9,5,53,48,23,48,40,38,41,50,42,35,41,37,42,41,42,44,49,50,55,41,40,43,46,49,45,37,37,43,48,54,65,38,36,37,41,40,37,39,47,48,47,9,93,27,18,5,65,47,49,29,45,42,38,60,24,32,13,11,5,55,43,52,38,43,46,16,21,27,55,43,10,37,28,34,76,13,18,49,13,31,33,13,121,30,43,13,29,9,34,28,34,76,35,53,79,116,17,13,18,100,48,54,68,17,49,13,73,9,41,45,38,9,43,27,59,13,119,45,33,13,67,29,9,5,63,45,46,63,5,20,41,74,36,138,5,43,100,101,111,102,92,93,93,78,98,52,20,20,20,20,20,20,21,21,21,21,28,28,28,64,8,50,62,61,37,5,47,56,64,71,168,31,13,75,25,9,84,5,7,98,99,71,7,41,100,80,46,61,5,35,49,49,39,75,53,43,112,14,5,51,104,101,111,37,82,82,55,23,22,8,49,62,41,5,50,56,26,9,86,5,53,104,45,79,5,59,7,99,6,32,7,32,33,121,49,9,20,5,33,42,51,48,43,5,39,36,119,5,47,37,37,28,43,79,73,9,36,5,41,30,39,5,37,40,19,19,22,22,20,39,46,56,43,65,76,60,13,18,34,13,9,31,32,32,52,38,17,28,44,13,9,27,18,43,25,9,34,18,42,25,9,26,24,23,29,26,24,39,9,30,34,28,44,43,13,9,34,32,25,13,9,35,38,34,28,40,33,43,13,9,44,80,9,16,16,25,31,39,33,54,54,54,62,55,110,52,63,75,136,25,49,58,57,55,32,33,34,33,36,30,38,62,42,39,60,10,5,43,58,45,51,43,51,49,13,9,85,48,43,49,39,49,49,45,47,49,43,47,49,43,43,49,39,44,49,40,45,49,41,41,49,37,44,49,40,43,49,39,39,49,35,44,49,40,44,49,40,17,5,81,51,89,5,71,45,83,5,59,71,126,5,69,51,105,5,80,78,46,29,9,126,59,99,173,29,9,57,5,83,7,80,7,75,89,164,90,135,62,91,5,69,66,56,47,37,136,9,14,79,9,62,5,59,63,207,5,75,135,107,28,129,23,76,64,5,87,55,106,103,187,38,5,79,31,46,5,25,75,46,19,27,29,292,5,43,7,70,6,96,23,6,31,70,7,73,48,31,56,141,147,75,83,75,15,9,14,106,132,9,5,51,115,69,48,75,44,64,131,80,5,55,68,185,5,61,131,86,146,135,59,5,73,92,88,129,24,5,29,86,104,69,86,43,9,5,120,101,64,13,54,9,20,114,54,9,5,67,54,54,57,5,55,62,54,5,77,48,134,5,65,53,57,109,56,9,5,67,59,57,63,43,5,75,42,65,77,56,56,37,13,9,5,43,48,48,5,55,37,92,5,43,38,38,25,9,78,31,9,56,5,45,42,64,5,57,65,25,26,27,24,24,39,37,58,39,13,63,39,13,18,57,13,9,14,56,41,65,85,89,54,45,51,25,51,52,25,84,49,25,84,49,25,21,17,15,9,16,41,43,37,36,10,5,63,7,96,95,37,7,51,64,29,29,38,24,121,5,71,42,25,5,53,7,92,67,7,47,42,84,86,5,63,54,138,5,77,83,42,133,5,7,95,76,7,62,59,70,5,93,87,95,5,75,96,97,90,133,31,9,5,95,90,97,33,121,31,9,5,93,120,46,35,39,13,49,83,45,47,43,53,17,87,49,39,17,22,52,17,13,64,39,13,9,5,35,7,95,35,7,103,28,39,29,85,27,41,14,31,33,110,13,9,14,108,73,9,30,38,37,104,52,34,102,94,61,98,97,31,30,21,17,47,38,13,42,98,99,38,112,105,54,45,93,153,125,17,13,9,42,48,54,9,5,51,88,68,105,43,48,122,67,37,47,41,109,63,127,21,92,90,61,47,33,70,98,98,38,24,33,78,97,98,38,24,135,43,88,131,125,63,108,60,49,57,25,21,26,63,44,21,17,46,95,36,13,9,14,50,72,9,5,45,93,58,70,30,53,49,37,35,13,9,14,59,37,9,5,46,34,85,55,70,93,13,18,31,36,13,9,33,5,42,64,5,53,42,64,5,53,48,64,5,51,48,64,5,51,29,65,108,5,27,38,59,5,45,40,64,5,49,40,62,5,49,39,59,5,47,49,61,5,67,61,55,5,77,61,55,5,77,77,82,32,9,76,112,9,155,113,9,116,5,7,154,6,53,7,46,67,5,61,64,96,5,97,7,140,6,100,7,46,68,5,61,49,33,53,35,54,44,55,45,57,48,56,47,56,50,13,54,47,9,21,5,7,138,6,53,7,53,91,5,75,7,124,6,100,7,53,53,117,36,9,21,5,75,42,33,24,86,47,55,13,9,21,5,43,36,24,65,64,71,66,70,63,66,64,67,64,69,72,9,28,5,39,45,130,5,41,39,45,57,51,5,45,61,51,63,62,5,89,62,80,5,93,42,85,5,51,119,68,86,64,5,105,82,53,47,49,108,24,5,133,70,42,41,66,64,54,5,55,47,80,5,63,46,79,38,61,61,9,21,5,61,70,83,5,109,43,95,5,55,39,28,37,28,41,20,37,60,28,52,20,43,60,28,9,5,47,33,48,50,51,51,96,96,5,35,57,124,5,83,61,50,84,40,69,13,9,54,84,86,99,13,9,41,67,9,25,5,91,38,110,5,45,63,94,99,5,95,80,76,86,79,5,129,47,71,47,5,51,46,70,45,5,49,53,67,29,74,30,33,40,9,25,5,71,44,127,5,70,46,139,5,53,7,97,96,7,42,24,34,42,47,26,34,38,13,40,51,51,13,42,52,58,51,13,42,52,59,58,51,13,18,64,13,9,22,5,91,7,59,7,37,24,52,18,38,39,28,67,34,38,68,73,42,67,48,34,35,13,39,27,13,34,136,19,9,22,5,41,52,24,18,34,28,36,34,56,20,13,48,42,20,40,50,59,24,40,17,143,53,13,18,106,78,56,20,13,9,22,5,40,40,44,9,38,5,35,40,40,44,9,34,35,18,28,64,70,22,13,99,53,57,57,57,61,62,54,113,46,13,107,53,13,18,60,13,19,9,65,5,35,35,13,47,26,26,70,31,26,13,33,9,19,70,22,9,5,27,59,86,76,5,57,40,24,55,34,48,46,34,32,9,92,5,49,7,61,6,37,35,7,36,42,50,38,5,33,7,77,6,32,39,7,39,43,5,35,7,79,6,32,41,7,39,43,5,35,7,63,7,44,60,53,19,5,57,7,76,7,43,58,52,44,5,55,7,75,6,32,7,38,39,5,43,7,74,6,37,30,7,43,70,5,43,53,74,5,49,75,194,5,75,73,74,5,71,75,134,5,75,75,134,5,75,107,98,80,5,83,75,79,5,75,53,71,5,51,61,73,5,55,74,144,5,57,115,106,86,125,5,125,110,105,88,5,115,73,48,33,72,27,13,9,5,7,92,19,7,55,50,24,44,47,49,63,13,9,21,5,79,44,67,5,57,42,46,5,34,45,64,5,31,40,24,5,43,36,79,5,37,64,52,33,166,65,113,9,51,42,92,72,39,94,51,9,48,52,9,17,5,85,41,94,5,29,63,59,93,5,83,38,50,5,45,34,49,5,37,19,28,42,52,80,54,90,62,40,31,33,20,32,30,51,42,50,49,47,136,44,82,82,100,35,52,80,48,61,102,93,13,55,126,110,50,42,20,36,9,37,127,157,9,5,35,20,30,37,31,36,35,41,20,47,9,5,43,82,25,9,28,45,58,33,17,13,52,40,33,17,13,9,20,5,47,7,106,7,43,21,35,20,5,27,7,80,7,63,93,23,51,48,57,46,32,50,13,54,39,67,13,11,5,63,7,80,7,46,23,57,52,54,54,32,29,65,13,11,5,29,50,44,70,90,9,21,5,65,54,15,103,5,73,35,81,5,39,62,145,5,75,60,113,5,59,40,136,5,45,38,49,107,5,49,33,22,48,37,34,32,72,60,49,44,26,17,13,11,25,5,35,42,47,28,25,9,29,20,5,29,44,101,5,57,35,82,44,48,47,47,47,48,47,47,45,50,46,61,46,50,51,54,51,51,52,5,39,39,115,5,47,46,63,29,9,73,39,5,61,44,31,35,43,28,20,29,9,5,51,44,92,5,57,48,42,35,9,20,5,65,65,22,32,54,40,29,48,37,29,53,42,29,56,36,29,46,48,36,21,32,44,55,56,49,58,43,29,13,24,9,5,53,34,27,32,38,42,28,33,32,5,35,27,49,35,9,5,40,27,35,35,9,5,35,23,23,25,20,34,47,43,32,34,5,36,23,23,25,20,34,43,32,5,41,23,23,25,20,34,43,32,34,34,5,58,33,25,73,5,44,26,57,59,69,70,63,61,57,67,79,6,40,49,5,47,58,52,131,5,51,36,19,55,47,5,71,19,92,63,58,56,9,5,81,48,106,5,59,73,68,53,35,60,9,16,28,25,27,30,39,31,59,31,10,5,59,59,44,45,46,55,5,55,43,38,60,65,85,38,23,36,38,48,42,34,61,10,44,59,88,37,97,74,91,106,17,22,76,17,13,9,38,5,57,41,88,47,83,9,39,5,57,65,54,53,35,60,9,16,23,25,27,30,39,31,59,56,10,5,51,45,53,35,60,9,20,5,37,48,53,35,60,9,16,28,29,30,30,39,31,59,56,10,5,59,82,16,28,29,30,29,37,64,50,10,5,91,56,53,35,60,9,16,30,39,31,87,10,5,57,71,34,32,42,9,37,5,79,48,66,5,41,66,48,28,5,47,63,102,51,53,49,65,28,5,91,48,63,35,9,61,156,55,123,34,9,79,5,41,63,58,9,42,37,9,42,39,9,81,18,23,9,35,35,9,23,37,9,23,39,9,59,39,61,22,27,13,9,46,37,9,51,39,9,31,5,45,67,165,5,47,51,40,82,85,24,5,49,49,59,36,115,5,45,59,64,45,57,44,70,26,42,70,26,44,72,26,24,71,26,13,9,32,5,65,48,45,40,35,38,38,38,38,38,40,28,20,29,9,5,59,46,54,5,55,42,51,5,47,52,74,5,67,50,60,51,9,53,38,40,28,9,25,5,47,63,60,73,58,52,52,5,73,51,76,5,49,56,89,5,59,48,60,5,59,58,104,5,51,56,107,5,59,58,168,5,63,79,100,5,91,64,92,5,61,54,101,5,55,46,30,96,5,55,62,117,156,58,58,46,35,179,22,5,59,49,135,5,49,49,33,46,58,36,40,17,22,49,33,17,13,9,20,5,69,60,33,43,27,44,16,70,82,102,132,61,102,100,100,80,56,83,161,180,21,107,17,14,83,33,23,58,47,78,43,168,17,202,14,85,10,55,88,23,103,105,167,51,150,13,9,5,47,69,80,80,32,58,102,102,114,25,25,31,9,118,5,135,106,77,104,5,48,84,5,76,84,103,5,59,97,98,13,48,33,77,5,35,43,28,5,67,84,102,24,11,96,21,117,113,11,68,11,99,92,11,99,136,6,30,45,11,99,92,11,99,142,6,26,45,47,138,6,28,28,40,31,6,70,81,44,29,9,102,84,61,60,5,73,72,56,29,9,50,97,11,5,77,7,124,55,7,48,48,5,39,56,100,96,5,47,63,191,28,40,72,48,60,29,9,85,59,75,44,39,9,30,85,45,37,58,13,18,46,38,36,17,42,56,17,42,46,108,107,40,72,90,56,21,77,52,56,21,110,95,63,22,97,94,49,57,70,21,51,17,22,104,17,13,39,9,35,31,28,9,26,5,75,99,5,53,108,38,62,67,16,165,97,108,95,78,10,5,55,70,73,5,49,53,147,38,62,117,186,153,126,117,78,101,35,83,73,34,89,9,35,60,68,43,23,45,96,46,58,74,77,38,68,38,42,42,17,22,121,46,57,21,17,14,105,37,33,13,38,24,34,27,17,13,111,37,58,74,91,74,62,17,13,9,5,31,7,89,7,70,104,31,23,75,38,83,45,106,77,121,73,68,13,97,84,54,153,52,17,14,95,47,107,61,41,13,9,25,5,43,80,33,40,45,26,85,9,98,5,53,56,67,56,74,77,76,79,5,43,50,61,36,32,34,34,34,34,35,32,34,34,34,34,35,36,36,20,39,9,5,61,7,126,7,169,72,136,122,219,108,72,241,135,67,76,71,88,9,92,48,294,26,5,55,94,51,39,59,50,61,49,106,5,109,35,71,5,43,127,5,47,43,127,5,47,88,22,25,95,154,35,58,28,13,9,21,5,61,47,37,40,5,63,104,5,79,251,40,109,47,62,46,37,13,9,20,5,49,50,98,5,47,47,65,5,41,50,99,5,41,7,82,39,7,39,47,33,27,9,59,23,15,55,55,14,5,41,38,102,5,43,41,66,71,27,5,53,78,33,213,5,37,49,64,5,69,7,38,40,7,38,48,104,5,45,48,59,5,65,44,97,5,57,67,107,5,57,33,29,34,6,7,84,75,83,7,63,26,103,57,48,33,13,48,47,13,9,88,5,49,37,39,38,32,5,31,41,15,36,55,55,9,41,30,9,45,47,9,163,80,26,5,39,39,42,35,22,46,41,30,28,13,35,28,13,9,38,5,29,32,63,5,33,64,27,41,73,38,5,53,58,91,86,62,71,73,73,5,43,32,51,145,5,33,7,56,57,7,45,21,62,28,40,29,22,29,40,29,22,29,40,29,22,61,52,34,37,78,35,17,70,9,61,62,60,84,86,87,40,96,42,54,52,48,41,34,72,57,46,47,25,71,9,76,29,54,37,35,26,38,78,65,57,49,55,57,50,45,17,13,46,9,27,5,45,39,65,74,5,51,51,56,41,63,79,87,5,65,54,127,5,76,103,31,9,59,25,9,68,24,9,52,107,5,115,60,46,25,77,34,46,32,56,59,33,24,34,13,11,265,5,46,78,5,61,50,64,29,24,29,69,34,41,29,9,20,5,47,7,93,7,19,42,24,21,5,41,7,93,7,19,42,24,21,5,41,7,105,7,19,50,65,5,47,7,113,35,7,19,54,59,5,51,43,19,34,9,20,5,35,39,30,34,9,21,5,29,46,23,83,43,41,13,9,24,5,37,56,22,28,124,24,64,57,30,13,37,9,35,42,74,37,63,84,17,13,9,51,85,9,5,47,36,45,5,7,107,7,41,93,5,51,7,70,6,64,7,45,46,22,37,109,55,30,25,13,128,51,46,108,28,13,51,54,54,32,68,30,25,13,101,54,41,32,68,30,25,13,25,9,5,59,40,93,5,49,43,25,29,28,41,43,99,37,46,51,49,40,49,37,46,42,51,9,33,34,85,9,30,39,48,75,37,44,36,37,50,47,40,40,39,51,41,41,42,41,67,60,41,38,39,73,45,49,78,33,38,41,39,41,37,38,44,43,76,43,74,38,41,9,5,55,50,68,35,94,104,28,13,56,100,86,69,72,32,17,13,9,21,5,69,19,42,77,5,53,53,105,5,75,55,97,111,5,75,56,99,5,81,38,67,5,45,41,46,69,122,93,10,142,114,10,145,121,143,87,83,10,87,98,109,10,110,106,82,43,5,51,99,86,111,68,5,99,40,78,5,49,47,89,141,133,41,41,33,30,19,28,74,62,50,68,36,26,24,46,30,32,59,28,47,92,61,59,52,21,26,41,35,98,46,21,26,51,55,21,26,44,92,52,21,26,55,21,26,13,9,34,230,5,55,20,15,7,16,7,135,7,38,39,28,29,34,41,34,38,16,63,63,77,53,42,10,49,152,9,49,152,9,56,173,9,44,137,9,39,134,9,5,53,20,15,7,16,48,48,49,16,99,101,71,73,103,103,97,89,69,71,81,79,101,95,101,91,85,77,83,121,65,10,75,104,90,37,113,89,13,37,9,76,106,91,37,138,90,13,37,9,11,90,10,71,63,99,54,11,106,101,99,94,41,14,99,97,86,14,97,97,14,95,74,14,95,64,112,118,77,131,94,72,28,13,79,84,39,95,82,43,72,72,37,21,32,41,33,37,45,95,44,47,48,26,98,45,50,51,77,21,26,65,86,101,77,52,52,52,52,81,45,29,97,103,103,59,60,62,72,126,131,49,33,29,25,94,39,49,50,26,96,39,50,51,97,69,21,13,9,11,78,10,53,11,65,69,48,48,48,48,14,84,90,60,55,61,58,9,11,90,95,100,39,11,58,60,46,33,13,109,59,50,17,76,60,81,30,38,53,35,13,35,9,11,109,31,10,71,63,99,54,11,102,70,113,69,31,13,106,64,26,9,73,100,9,85,112,9,75,115,9,74,122,81,83,103,72,13,29,9,68,120,99,92,79,56,63,25,9,11,134,86,10,80,10,43,69,31,28,11,68,71,56,31,95,51,54,43,17,13,96,9,11,92,55,11,58,100,40,46,77,45,50,75,84,13,60,9,11,96,38,11,59,100,83,14,32,64,14,83,62,105,71,34,13,72,98,9,61,72,141,9,60,72,134,9,72,88,105,9,71,83,85,108,72,152,9,74,83,57,58,75,96,80,216,117,17,13,123,138,76,102,13,30,9,63,176,76,90,13,24,9,62,112,9,58,34,41,48,44,47,67,13,63,9,61,34,41,44,41,67,13,59,9,81,97,9,59,141,9,59,41,107,13,9,5,59,33,89,90,96,110,66,66,63,59,120,121,120,112,113,62,65,60,57,53,56,123,104,6,20,15,7,16,44,16,59,69,77,79,67,79,77,79,10,58,33,28,70,51,73,40,24,9,52,27,92,166,46,43,46,65,13,27,9,59,47,45,71,124,17,80,42,134,33,13,53,9,60,47,45,71,127,17,43,84,231,17,67,155,13,67,9,51,32,51,54,65,52,55,66,13,9,57,50,167,13,63,9,56,49,165,13,62,9,57,44,56,13,50,9,5,51,29,50,55,59,60,54,60,59,60,6,20,7,16,31,19,25,34,64,60,96,56,88,107,124,65,84,77,7,83,56,85,7,19,52,97,104,173,153,58,166,168,170,150,156,168,180,192,216,228,23,65,54,45,55,53,53,69,75,57,47,47,51,51,47,61,61,37,37,35,35,35,37,43,79,53,53,67,67,75,75,67,67,45,45,61,61,65,65,57,57,61,61,71,71,71,71,71,71,53,53,63,63,55,55,81,81,73,73,57,61,61,61,61,59,59,65,65,53,53,57,57,53,53,53,53,59,59,59,59,51,51,53,53,67,67,65,65,53,53,55,55,61,61,51,59,59,69,69,55,55,57,57,65,65,67,67,65,65,55,55,71,71,73,73,96,151,47,75,91,182,42,65,73,73,63,63,55,55,45,45,53,53,75,75,53,53,73,73,63,63,53,53,59,59,59,59,55,55,57,57,69,69,71,71,59,59,69,69,63,63,51,55,51,85,73,57,57,53,53,57,57,61,81,81,51,51,61,61,51,51,51,51,51,51,69,37,37,61,61,55,65,65,49,49,49,49,55,55,51,51,55,55,55,55,61,61,55,55,57,57,53,53,57,57,59,59,55,55,51,51,61,65,65,73,73,65,65,59,59,67,67,67,67,57,57,61,61,49,49,45,45,79,79,73,73,61,61,51,51,51,51,49,49,57,57,57,57,51,51,57,57,59,59,61,61,51,51,57,57,63,73,73,81,107,115,121,121,115,115,115,115,115,115,115,115,61,61,59,59,65,65,55,55,59,59,57,57,61,61,59,59,59,59,59,59,63,63,49,49,63,63,57,57,45,45,53,53,55,55,80,107,107,111,111,107,107,107,107,109,109,107,107,109,109,111,111,115,115,113,113,113,113,117,117,57,57,45,45,51,51,47,47,69,69,61,61,61,61,49,41,41,63,69,49,51,51,53,53,63,63,53,53,47,47,53,53,55,55,49,49,63,63,81,81,59,59,47,47,47,47,39,39,55,59,57,59,79,47,65,47,65,79,79,65,65,71,71,83,83,33,86,87,93,92,105,89,92,96,109,116,97,104,93,105,99,111,102,109,128,84,90,93,88,90,101,96,98,105,107,97,103,107,109,29,99,89,43,53,67,45,47,59,59,59,61,55,57,75,55,55,63,49,73,24,49,45,39,41,51,59,91,61,57,61,39,55,51,45,37,61,45,10,23,15,62,71,30,13,48,103,89,64,57,21,64,36,17,100,101,47,47,43,43,60,65,59,31,13,110,112,108,41,83,49,56,42,53,25,9,39,52,9,69,44,54,52,34,57,59,98,55,61,66,61,68,24,9,80,74,32,29,69,79,43,23,36,53,47,47,55,54,52,86,34,25,35,28,73,30,17,13,24,9,103,85,62,79,31,66,24,9,118,108,58,29,34,57,51,21,66,24,9,68,58,39,63,45,9,127,123,29,114,22,66,24,9,71,58,42,69,39,63,69,9,128,108,64,80,24,9,126,133,52,72,24,9,99,85,43,73,24,9,106,104,29,61,21,66,24,9,10,19,10,48,45,29,24,9,15,67,87,113,59,71,65,24,9,15,45,138,58,24,9,63,71,45,24,9,15,85,68,69,41,65,24,9,15,58,121,45,24,9,15,55,82,24,9,15,52,27,106,77,107,107,120,100,154,13,9,10,22,10,66,60,61,13,62,48,13,81,59,65,24,9,73,85,55,53,33,24,9,15,77,71,32,133,68,13,70,84,13,24,9,15,56,55,80,23,9,15,81,37,39,56,64,37,41,13,24,9,68,15,61,37,39,56,60,9,63,15,48,59,89,214,79,9,57,15,55,48,89,129,33,24,9,15,48,42,90,95,65,69,24,9,10,22,10,40,57,9,37,106,188,168,122,46,46,28,44,96,36,50,53,26,45,46,48,47,47,46,43,42,45,45,44,45,47,45,46,45,43,46,104,64,26,44,101,26,45,63,26,43,56,68,26,13,33,54,13,24,9,10,25,10,15,32,55,9,15,31,54,9,15,31,54,9,15,31,54,9,15,32,54,9,10,20,10,15,39,37,9,15,58,28,39,68,40,70,42,69,41,67,39,69,40,70,43,72,43,71,40,69,45,71,42,71,40,68,54,9,10,16,10,15,51,63,29,39,34,48,61,24,9,15,57,37,39,64,23,9,15,57,70,108,34,54,47,61,24,9,15,63,49,70,23,9,10,29,10,15,80,75,38,43,41,39,61,24,9,15,86,37,49,47,93,23,9,15,124,204,49,47,49,65,13,18,38,62,64,34,70,96,84,50,69,13,24,9,15,130,49,47,57,37,55,37,51,137,23,9,15,46,59,92,34,54,48,61,24,9,15,52,49,59,23,9,10,24,10,15,80,79,55,29,47,61,24,9,15,86,47,37,55,37,93,23,9,15,120,136,151,157,34,57,64,54,107,80,13,102,66,13,24,9,15,126,49,47,37,175,181,37,51,133,23,9,15,106,81,89,47,61,24,9,15,112,47,37,55,57,49,37,143,23,9,15,141,155,47,47,34,57,61,46,32,66,13,72,36,68,17,22,68,17,13,37,68,13,24,9,15,147,49,47,55,37,55,57,49,37,37,181,23,9,15,81,119,32,42,29,96,24,9,15,87,49,46,37,94,23,9,15,88,103,32,54,38,61,24,9,15,94,49,47,49,37,128,23,9,15,100,105,66,9,15,106,49,47,37,49,37,37,140,23,9,15,94,105,54,38,9,15,100,49,47,37,49,37,134,23,9,15,72,79,38,37,66,61,24,9,15,78,57,49,37,109,23,9,15,77,84,38,37,66,61,24,9,15,83,57,49,37,114,23,9,15,80,103,32,60,61,24,9,15,86,49,37,49,47,117,23,9,15,63,73,29,35,61,24,9,15,69,37,43,76,23,9,10,16,10,15,46,37,9,15,80,63,51,55,29,61,24,9,15,86,59,55,37,93,23,9,15,67,63,45,129,61,24,9,15,73,45,55,80,23,9,15,75,78,38,37,66,61,24,9,15,81,57,49,37,112,23,9,15,46,26,59,41,13,87,84,78,9,90,81,49,66,61,24,9,26,79,105,9,15,46,26,59,41,13,87,84,78,9,96,47,57,49,37,126,23,9,26,85,102,9,15,48,59,37,61,24,9,15,54,45,61,23,9,15,49,61,52,61,24,9,15,55,43,62,23,9,15,51,59,100,61,24,9,15,57,51,64,23,9,15,48,59,54,61,24,9,15,54,45,61,23,9,15,84,66,49,29,47,29,61,24,9,15,90,57,37,55,37,97,23,9,15,47,62,86,61,24,9,15,53,37,60,23,9,15,43,58,29,61,24,9,15,49,37,56,23,9,65,44,107,61,24,9,65,39,83,23,9,15,45,81,9,15,51,66,9,15,52,88,9,15,58,66,9,15,89,65,97,101,37,39,61,24,9,15,95,47,51,45,47,102,23,9,15,53,59,47,61,24,9,15,59,55,66,23,9,15,65,69,29,64,61,24,9,15,71,37,55,78,23,9,15,85,58,60,37,39,112,37,61,24,9,15,91,66,45,47,55,45,98,23,9,15,48,67,29,61,24,9,15,54,37,61,23,9,15,39,58,61,24,9,15,57,62,37,83,61,24,9,15,53,37,75,23,9,15,69,67,95,39,61,24,9,15,75,49,47,82,23,9,15,109,60,47,47,37,47,29,63,61,24,9,15,115,55,55,45,55,37,43,122,23,9,15,49,61,35,61,24,9,15,55,43,62,23,9,10,27,10,15,55,70,54,34,55,47,56,73,38,46,63,13,24,9,15,61,45,68,23,9,15,54,69,54,34,55,47,56,24,9,15,60,45,67,23,9,15,88,82,38,134,53,49,34,58,46,36,75,69,59,13,31,72,24,9,15,94,53,57,37,51,101,23,9,10,21,10,45,44,78,24,9,15,68,78,131,133,32,71,129,108,39,73,24,9,15,63,45,86,23,9,15,71,79,58,39,75,24,9,15,66,49,89,23,9,15,67,80,92,37,33,54,49,65,56,48,62,120,38,46,49,13,24,9,15,73,49,122,13,49,37,80,23,9,15,80,80,49,92,53,37,34,41,58,64,49,65,56,24,9,15,86,180,103,69,49,61,37,93,23,9,15,67,79,92,58,34,54,65,48,62,120,38,46,49,13,24,9,15,86,48,109,13,49,65,93,23,9,15,80,79,49,92,53,58,34,54,64,66,44,24,9,15,99,177,102,68,49,61,65,106,23,9,15,82,70,92,60,127,34,54,64,59,37,66,13,54,75,13,59,70,13,24,9,15,88,39,111,13,49,55,52,95,23,9,15,95,70,49,92,53,60,127,34,54,64,64,60,44,37,66,13,54,70,13,24,9,15,101,150,49,61,55,52,108,23,9,15,81,69,91,60,139,34,54,64,60,44,37,66,13,24,9,15,87,49,55,52,94,23,9,15,79,80,78,60,37,34,47,64,56,46,37,66,13,53,64,13,24,9,15,85,35,55,45,92,23,9,15,56,79,96,29,34,54,52,47,24,9,15,62,37,49,69,23,9,15,60,79,41,71,24,9,15,66,49,73,23,9,15,115,87,95,47,75,38,66,13,72,41,68,17,22,68,17,13,42,68,13,24,9,15,121,37,47,55,57,49,37,37,155,23,9,15,113,82,49,133,183,34,66,46,72,97,13,24,9,15,119,47,57,49,37,73,37,153,23,9,15,53,72,96,72,24,9,15,59,49,66,23,9,15,53,72,96,72,24,9,15,59,49,66,23,9,15,51,70,96,72,24,9,15,57,49,64,23,9,15,52,71,96,34,54,46,46,48,24,9,15,58,49,65,23,9,15,65,77,37,90,69,94,73,97,48,58,48,92,13,24,9,15,61,43,83,23,9,15,66,78,37,91,69,94,73,48,58,48,92,13,24,9,15,62,43,84,23,9,15,64,72,50,50,94,47,108,34,48,61,52,66,63,13,61,62,42,51,54,72,71,17,66,42,51,72,71,17,13,128,64,13,80,63,13,24,9,56,77,62,65,96,78,111,41,83,67,93,74,25,79,82,40,47,25,21,17,13,32,9,15,70,37,50,39,77,23,9,15,105,77,106,138,101,123,103,34,53,61,56,58,56,24,9,15,111,47,55,45,49,47,118,23,9,15,64,74,29,64,34,48,64,46,24,9,15,70,37,55,77,23,9,91,75,116,105,53,35,60,54,49,61,17,13,37,43,102,17,30,13,44,145,13,85,9,15,84,45,29,35,85,61,37,64,13,24,9,15,67,109,9,15,69,111,9,15,67,109,9,15,84,126,9,15,67,130,71,118,47,34,54,61,47,46,47,24,9,15,73,49,55,80,23,9,15,50,69,104,34,54,47,53,24,9,15,56,49,63,23,9,15,111,152,61,24,9,15,117,49,47,37,57,59,43,124,23,9,15,44,69,9,15,79,77,92,112,34,54,64,46,24,9,15,85,49,55,92,23,9,15,55,68,41,29,34,54,52,47,24,9,15,61,49,37,68,23,9,15,54,73,92,34,54,47,24,9,15,60,42,60,13,49,67,23,9,15,49,73,49,92,34,54,47,24,9,15,55,169,49,62,23,9,15,57,68,45,29,66,35,42,69,26,45,66,26,24,62,13,24,9,15,49,37,75,23,9,10,15,10,15,58,62,41,35,34,54,55,46,24,9,15,64,49,43,71,23,9,15,48,71,61,24,9,10,18,10,15,53,55,58,39,75,24,9,15,48,49,71,23,9,15,70,111,130,34,58,72,65,13,24,9,15,76,47,59,83,23,9,15,41,60,9,15,56,69,107,72,24,9,15,62,49,69,23,9,15,78,61,41,68,68,34,54,61,60,24,9,15,84,49,55,55,91,23,9,15,59,61,60,41,34,53,57,24,9,15,65,47,49,72,23,9,15,62,64,41,60,34,54,56,24,9,15,68,49,47,75,23,9,15,85,62,43,39,43,60,34,55,57,59,56,24,9,15,91,51,47,51,47,98,23,9,15,75,64,43,41,60,34,55,58,56,24,9,15,81,51,49,47,88,23,9,15,90,64,47,43,104,60,34,57,59,58,57,46,30,64,24,9,15,96,55,51,49,47,103,23,9,15,49,67,39,34,49,73,24,9,15,55,39,62,23,9,15,46,64,39,34,49,73,24,9,15,52,39,59,23,9,15,52,65,41,66,34,54,46,73,24,9,15,58,49,65,23,9,15,61,63,41,60,34,54,56,24,9,15,67,49,47,74,23,9,15,63,65,104,39,34,54,56,24,9,15,69,49,47,76,23,9,15,59,66,39,60,34,49,56,24,9,15,65,39,47,72,23,9,15,51,64,41,72,24,9,15,57,49,64,23,9,15,74,62,37,43,45,34,52,59,59,24,9,15,80,45,51,53,87,23,9,15,44,63,9,15,87,88,38,140,53,78,35,66,13,24,9,15,93,37,37,61,51,100,23,9,15,69,59,73,54,62,34,59,73,46,38,47,64,13,24,9,15,68,53,87,23,9,15,128,157,47,86,65,13,18,38,61,77,76,45,72,21,26,72,21,17,46,72,17,13,24,9,15,134,49,47,55,37,57,49,37,37,168,23,9,15,112,153,72,65,13,18,65,85,70,17,13,24,9,15,118,49,47,37,57,59,43,125,23,9,15,116,159,52,61,24,9,15,122,49,47,37,57,59,43,129,23,9,15,96,134,29,61,24,9,15,102,49,47,37,57,37,109,23,9,15,78,106,52,34,54,47,125,24,9,15,84,49,47,37,43,91,23,9,15,84,59,97,113,29,29,72,65,13,18,38,52,56,51,13,128,24,9,15,83,49,47,37,37,102,23,9,15,48,61,58,75,24,9,15,54,49,61,23,9,15,43,59,52,72,24,9,15,49,43,56,23,9,15,57,88,38,43,61,24,9,15,63,37,70,23,9,15,106,114,41,51,77,68,66,141,24,9,15,112,49,47,49,37,59,119,23,9,15,110,97,45,51,45,34,56,62,118,24,9,15,116,49,47,53,59,53,123,23,9,15,70,62,41,29,47,34,48,60,29,66,13,118,24,9,15,76,49,37,55,83,23,9,15,58,62,54,39,58,24,9,15,64,45,47,71,23,9,15,49,61,29,31,58,24,9,15,55,37,39,62,23,9,15,46,65,29,66,118,24,9,15,52,37,59,23,9,15,46,65,29,34,48,43,118,24,9,15,52,37,59,23,9,15,47,62,54,73,118,24,9,15,53,45,60,23,9,15,72,65,41,45,29,34,56,51,118,24,9,15,78,49,53,37,85,23,9,15,92,96,49,44,126,89,72,118,24,9,15,82,49,47,49,110,23,9,15,122,97,41,45,51,45,34,56,62,118,24,9,15,128,49,47,49,53,59,53,135,23,9,15,47,62,54,73,118,24,9,15,53,45,60,23,9,15,72,65,41,53,37,34,56,51,118,24,9,15,78,49,53,37,85,23,9,15,45,75,38,37,24,9,10,28,10,15,60,73,41,72,118,24,9,15,66,49,73,23,9,10,16,10,15,29,33,53,40,9,15,37,34,34,34,34,57,44,29,24,9,15,37,34,34,34,34,63,37,70,23,9,15,60,83,38,37,32,60,24,9,15,66,49,37,73,23,9,15,68,64,66,63,43,24,9,15,74,58,51,81,23,9,15,50,69,29,24,9,15,56,37,63,23,9,15,73,64,62,58,29,24,9,15,79,57,49,37,86,23,9,42,69,91,30,51,9,15,61,44,35,35,24,9,15,87,160,41,66,24,9,15,93,74,43,49,57,43,100,23,9,15,84,158,49,37,59,24,9,15,90,74,43,57,45,43,97,23,9,15,108,158,49,29,45,43,24,9,15,114,74,43,37,51,57,51,43,121,23,9,15,107,156,49,29,45,43,24,9,15,113,74,43,37,51,57,51,43,120,23,9,15,85,160,49,37,59,24,9,15,91,74,43,57,45,43,98,23,9,15,70,160,35,24,9,15,76,74,43,43,43,83,23,9,15,72,164,35,24,9,15,60,150,29,24,9,15,66,43,37,43,73,23,9,15,49,68,29,24,9,15,55,37,62,23,9,15,53,65,29,31,34,48,52,24,9,15,59,37,39,66,23,9,15,46,59,29,29,24,9,15,52,37,59,23,9,15,50,63,29,29,24,9,15,56,37,63,23,9,15,51,64,29,29,24,9,15,57,37,64,23,9,15,78,74,43,43,43,85,23,9,15,31,30,31,32,34,33,35,69,158,24,9,15,31,30,31,32,34,33,35,75,74,43,43,84,21,9,15,29,31,29,29,87,158,49,24,9,15,29,31,29,29,93,74,43,57,43,100,23,9,15,58,80,24,9,15,64,43,43,71,23,9,15,40,59,29,24,9,15,46,37,53,23,9,15,52,62,35,42,24,9,15,58,43,37,65,23,9,10,14,10,15,77,60,49,54,49,34,58,59,62,40,24,9,15,83,57,45,57,90,23,9,15,82,71,35,60,41,34,51,64,58,40,37,66,13,24,9,15,88,43,55,49,95,23,9,15,78,67,35,60,41,34,51,64,58,40,32,66,13,24,9,15,84,43,55,49,91,23,9,15,51,67,35,34,51,40,24,9,15,57,43,64,23,9,15,80,61,51,54,51,34,59,59,63,40,24,9,15,86,59,45,59,93,23,9,15,69,56,29,81,55,24,9,15,75,37,87,82,23,9,15,45,68,55,24,9,15,48,68,55,24,9,15,56,62,29,43,34,48,59,40,24,9,15,62,37,51,69,23,9,15,50,63,58,34,57,40,24,9,15,56,49,63,23,9,15,55,68,41,34,54,40,24,9,15,61,49,68,23,9,15,66,63,49,41,34,58,58,40,24,9,15,56,49,84,23,9,10,18,10,15,59,60,104,58,34,54,60,24,9,15,65,49,49,72,23,9,15,50,63,58,74,24,9,15,56,49,63,23,9,15,53,64,31,48,70,28,45,69,26,49,70,26,24,55,13,24,9,15,52,39,71,23,9,15,64,61,131,85,48,36,43,13,59,31,34,63,52,37,63,24,9,15,70,67,39,77,23,9,10,31,10,15,62,80,38,43,106,34,48,58,24,9,68,58,36,57,35,55,39,63,42,69,45,9,15,68,37,51,99,23,9,15,87,89,38,43,169,34,71,46,24,9,77,58,36,57,35,55,37,59,39,63,42,69,45,9,15,93,37,83,133,23,9,15,53,66,104,34,54,46,59,24,9,15,59,49,66,23,9,10,15,10,15,54,60,37,121,34,48,59,47,24,9,15,60,37,51,67,23,9,10,26,10,15,70,82,58,49,32,31,27,37,37,32,43,41,34,57,61,24,9,149,82,35,94,29,36,13,39,58,56,55,51,58,51,56,33,57,61,62,24,9,15,155,93,87,111,87,108,49,63,59,75,59,73,178,23,9,15,54,66,56,37,43,24,9,15,60,66,51,45,67,23,9,15,78,64,39,59,31,31,27,49,56,120,24,9,53,44,29,24,9,15,47,76,9,15,53,79,31,24,9,15,57,116,9,15,60,76,37,35,24,9,15,37,60,37,38,24,9,10,44,10,15,77,58,69,29,37,51,24,9,15,45,60,38,24,9,10,31,10,11,95,38,10,50,11,15,54,69,37,44,24,9,11,97,61,10,58,57,11,15,73,76,41,37,34,54,47,44,24,9,15,69,49,91,23,9,45,122,53,41,17,89,51,17,13,24,9,15,54,69,92,73,24,9,15,60,45,67,23,9,11,103,42,11,15,57,72,31,37,24,9,11,107,42,11,15,57,72,31,37,24,9,15,74,78,41,35,34,54,54,24,9,15,80,49,43,87,23,9,34,100,99,84,37,28,13,108,99,124,96,66,63,55,41,35,77,29,17,39,13,25,9,92,65,37,41,32,42,49,78,41,63,9,87,60,37,42,49,32,96,41,63,9,35,67,9,50,42,38,37,50,9,57,43,38,37,54,99,16,9,10,20,10,46,38,71,104,9,70,52,41,118,48,60,13,92,56,9,73,99,9,73,99,9,80,85,9,86,99,9,53,102,9,62,68,9,83,120,9,70,128,9,77,142,9,81,29,84,28,13,25,9,67,32,100,104,109,95,89,99,139,74,9,69,43,122,134,122,110,128,13,9,11,121,10,88,10,44,55,52,68,10,123,117,56,11,41,53,45,67,65,65,67,9,83,59,120,132,13,35,9,100,45,28,13,167,82,24,44,69,13,27,9,73,50,34,41,44,43,44,43,44,33,54,51,48,37,21,32,55,56,24,32,13,9,103,74,75,24,23,45,39,32,13,49,39,90,73,29,13,71,43,83,13,61,90,77,69,163,52,17,22,48,36,17,13,60,90,79,69,176,52,17,22,48,36,17,13,18,66,43,87,13,56,9,71,50,119,73,45,42,78,46,45,61,49,40,62,57,19,26,9,49,111,43,42,56,66,9,75,56,57,95,65,105,55,37,54,35,55,30,53,28,13,49,9,11,103,103,101,100,27,10,39,96,101,11,72,115,9,11,100,99,95,52,10,39,96,101,11,69,88,9,11,101,100,97,95,10,39,96,101,11,70,88,9,11,66,10,39,96,101,11,75,65,9,11,66,10,46,32,96,101,11,83,120,49,30,33,50,31,51,26,58,33,9,11,74,10,102,63,10,46,39,96,101,11,99,70,97,13,71,9,11,90,48,48,106,89,11,73,82,71,9,44,96,9,44,99,9,11,108,48,48,72,106,71,11,89,68,136,39,46,53,56,56,57,46,21,43,17,22,26,17,34,13,53,55,13,35,9,87,62,46,86,56,101,110,17,22,26,17,34,13,35,9,11,50,10,51,11,46,70,34,130,13,30,9,11,72,10,38,11,37,101,69,9,50,26,56,20,13,21,9,68,41,34,13,123,14,21,14,91,91,91,91,91,91,91,14,52,14,54,54,54,54,54,54,54,54,54,54,54,14,127,130,142,93,113,122,143,96,117,126,114,142,89,93,84,65,68,162,13,60,70,164,13,60,70,164,13,92,47,52,123,17,22,53,71,57,78,21,77,60,80,56,25,21,17,13,45,103,13,30,9,51,19,30,48,76,13,18,42,13,189,135,240,177,233,164,190,183,171,218,210,214,159,253,228,240,219,195,200,244,246,205,271,131,9,37,62,9,31,70,21,9,38,75,73,87,30,9,33,74,9,49,161,9,5,45,55,35,47,9,23,5,52,35,47,47,9,23,5,45,23,55,60,55,55,59,57,59,61,65,63,63,63,61,61,59,63,63,67,20,99,9,5,23,34,43,30,103,9,23,56,60,22,39,71,61,22,41,71,61,22,39,60,22,9,42,49,83,9,46,46,40,9,23,24,56,39,41,39,60,22,9,91,46,40,9,42,26,5,49,53,89,5,70,100,5,41,19,32,96,150,5,47,65,5,47,40,79,39,55,9,47,5,7,90,7,19,55,80,41,9,23,42,41,50,71,45,54,37,57,41,61,46,47,56,51,71,44,43,53,39,59,47,56,45,39,39,64,38,41,41,40,41,41,42,41,39,41,45,43,41,46,42,48,48,45,51,61,39,59,48,47,62,51,40,54,51,40,63,52,51,62,20,52,9,5,79,49,34,42,20,5,28,120,120,134,110,100,6,97,96,26,27,21,17,19,26,26,20,29,33,45,79,123,126,138,153,62,82,117,55,135,77,13,9,14,26,36,45,42,51,9,41,78,75,33,43,57,42,66,84,9,14,51,69,47,9,20,5,59,77,22,20,28,36,35,28,18,28,111,33,35,47,128,26,53,99,26,57,43,26,49,111,26,39,95,26,37,125,26,45,46,80,42,88,177,25,21,81,174,26,47,40,35,39,30,21,32,39,164,26,24,50,13,9,21,101,99,31,9,174,42,38,48,47,31,64,63,78,20,5,56,18,32,78,33,35,47,39,164,26,57,49,39,37,153,26,25,47,53,45,26,24,50,13,9,147,52,38,158,20,5,285,58,57,39,48,39,37,46,42,63,75,17,59,14,55,48,108,14,28,61,48,43,89,17,48,14,66,55,93,57,67,43,118,100,145,102,155,15,9,14,63,55,72,67,57,72,49,51,47,39,61,9,20,5,43,45,24,7,58,7,64,139,5,53,16,46,33,23,45,25,71,9,20,5,41,58,425,26,30,98,28,110,29,113,18,68,25,53,27,57,33,131,40,55,22,80,43,87,13,9,42,59,28,5,66,24,28,39,48,9,26,5,20,7,16,7,70,51,16,7,40,15,29,43,87,91,54,57,70,17,204,74,13,31,9,14,128,9,29,5,49,7,59,39,7,43,19,89,89,88,91,87,81,203,29,101,48,42,13,9,5,43,7,101,16,7,38,49,48,45,46,20,5,45,7,55,7,44,52,20,5,35,7,55,7,19,44,49,52,20,5,35,7,65,7,38,19,136,5,45,7,65,7,45,57,20,5,45,7,71,7,50,19,151,5,55,7,71,7,57,15,49,142,44,20,5,55,7,62,7,17,39,15,92,5,47,7,62,7,17,48,60,20,5,47,7,62,7,36,19,134,5,41,7,62,7,43,55,20,5,41,48,15,92,5,65,58,61,20,5,65,79,181,5,63,49,15,93,5,67,59,62,20,5,67,80,183,5,65,52,81,83,49,41,42,20,5,53,7,78,7,37,15,90,5,43,7,57,7,44,49,39,20,5,43,7,36,7,42,49,63,20,5,37,7,33,7,44,31,53,80,43,79,13,9,20,5,39,7,41,7,45,15,91,22,57,9,21,5,43,7,38,7,35,15,84,5,39,7,71,7,57,45,73,40,19,57,31,60,46,36,33,91,13,42,63,13,9,33,55,9,5,41,7,41,7,19,38,15,91,5,45,7,41,7,19,47,49,42,20,5,45,19,41,80,20,5,51,20,15,7,16,47,38,129,131,16,57,33,55,55,49,29,51,49,67,67,61,43,47,29,53,29,53,67,61,43,51,47,39,57,32,65,59,75,65,59,35,79,79,76,10,11,72,11,46,117,9,29,93,57,36,112,40,29,48,33,52,17,13,85,57,9,67,57,85,42,57,29,15,9,75,54,98,42,67,26,26,9,25,57,89,138,65,13,55,83,61,9,48,54,125,9,76,54,63,61,148,91,42,81,54,29,15,9,57,54,57,91,55,9,54,54,88,55,9,39,92,68,11,85,53,35,47,59,95,35,66,165,85,53,70,120,59,109,21,26,94,21,17,13,81,42,22,94,15,9,25,101,56,65,82,32,42,31,38,61,148,84,42,81,103,127,29,15,9,25,44,56,84,127,9,58,63,95,56,9,62,60,88,100,9,39,49,55,83,55,9,58,53,81,60,76,36,9,35,46,58,86,71,9,28,75,62,90,154,9,53,59,87,55,9,51,59,57,9,56,62,90,55,9,78,106,59,62,87,80,9,31,77,69,21,21,76,13,18,79,13,132,9,84,69,21,21,83,13,18,86,13,132,9,67,68,145,9,5,57,19,39,20,35,38,35,37,39,37,37,56,5,47,7,49,64,7,34,22,55,41,9,38,28,51,35,46,13,46,26,10,5,35,25,25,36,33,22,20,670,6,25,36,33,22,20,236,6,22,33,30,22,20,207,6,21,23,34,31,22,20,542,6,22,33,30,22,156,6,31,42,39,22,39,1110,6,25,42,39,22,39,472,6,22,39,36,22,827,6,35,21,32,29,22,652,6,21,24,35,32,22,20,816,6,21,24,35,32,22,20,982,6,31,46,43,22,20,299,6,21,32,29,22,718,6,28,39,36,22,514,6,35,23,34,31,22,628,6,31,90,85,89,68,6,18,98,79,6,17,92,75,88,94,83,90,70,53,92,38,80,52,87,94,32,94,6,17,83,89,30,6,72,85,89,90,90,92,64,91,94,57,89,89,37,88,85,81,91,36,92,91,90,88,78,90,55,6,91,26,37,34,22,20,2172,6,24,30,49,38,22,20,638,6,33,47,41,22,20,303,6,52,27,46,35,22,74,20,441,6,47,30,49,38,22,196,6,27,39,35,22,47,20,260,6,7,18,80,44,62,93,146,94,74,67,68,70,85,105,137,188,13,80,6,58,52,6,55,57,6,76,69,6,80,65,57,6,56,69,6,53,79,6,74,73,6,78,69,57,6,54,73,7,37,48,45,22,585,6,7,18,77,44,63,93,146,40,94,75,68,69,71,86,106,138,189,13,80,6,56,59,6,53,64,6,74,76,6,78,72,57,6,54,76,57,6,51,86,6,72,80,6,76,76,57,6,52,80,57,7,37,48,45,22,695,6,7,18,44,68,81,143,80,6,13,65,78,7,36,47,44,22,416,6,31,42,82,30,30,27,28,27,36,30,27,26,29,29,36,33,28,26,31,32,35,32,42,42,41,35,37,55,5,61,27,39,21,169,6,35,48,21,705,6,55,48,55,87,66,5,39,20,7,16,15,37,52,5,43,36,51,5,41,36,52,5,41,30,46,5,29,47,63,5,63,52,68,5,73,22,35,51,5,39,37,53,5,43,35,51,5,39,18,37,53,5,43,17,33,49,5,35,32,48,5,33,33,49,5,35,36,52,5,41,17,39,55,5,47,17,36,52,5,41,17,33,49,5,35,17,39,55,5,47,17,45,61,5,59,18,33,49,5,35,40,56,5,49,21,19,37,52,5,43,19,36,52,5,41,19,37,54,5,43,19,35,52,5,39,19,38,55,5,45,19,37,53,5,43,19,39,55,5,47,17,35,52,5,39,17,36,53,5,41,12,36,53,5,41,43,60,5,55,25,47,53,5,63,57,32,49,5,33,32,49,5,33,17,40,57,5,49,42,59,5,53,38,55,5,45,40,57,5,49,50,67,5,69,45,51,5,59,45,51,5,59,45,51,5,59,47,53,5,63,52,58,5,73,48,54,5,65,11,40,53,5,49,40,53,5,49,39,52,5,47,42,55,5,53,36,49,5,41,38,51,5,45,36,49,5,41,36,49,5,41,39,56,5,47,39,52,5,47,35,48,5,39,36,49,5,41,43,56,5,55,42,55,5,53,36,49,5,41,44,57,5,57,35,48,5,39,39,52,5,47,44,57,5,57,37,50,5,43,38,51,5,45,37,50,5,43,46,63,5,61,46,59,5,61,23,43,60,5,55,42,59,5,53,37,54,5,43,17,45,62,5,59,46,63,5,61,47,64,5,63,46,63,5,61,37,54,5,43,36,53,5,41,47,64,5,63,46,63,5,61,46,63,5,61,41,58,5,51,36,53,5,41,39,56,5,47,39,56,5,47,37,54,5,43,38,55,5,45,44,61,5,57,45,62,5,59,39,56,5,47,44,61,5,57,41,58,5,51,38,55,5,45,36,53,5,41,38,55,5,45,40,57,5,49,50,67,5,69,35,52,5,39,40,57,5,49,35,52,5,39,42,59,5,53,49,66,5,67,42,59,5,53,11,35,52,5,39,44,61,5,57,15,28,45,5,25,40,57,5,49,37,54,5,43,42,59,5,53,34,51,5,37,34,51,5,37,37,54,5,43,35,52,5,39,37,54,5,43,37,54,5,43,40,57,5,49,37,54,5,43,38,55,5,45,36,53,5,41,38,55,5,45,39,56,5,47,37,54,5,43,35,52,5,39,40,57,5,49,42,59,5,53,46,63,5,61,42,59,5,53,39,56,5,47,43,60,5,55,43,60,5,55,38,55,5,45,40,57,5,49,34,51,5,37,32,49,5,33,49,66,5,67,46,63,5,61,40,57,5,49,35,52,5,39,35,52,5,39,34,51,5,37,38,55,5,45,38,55,5,45,35,52,5,39,38,55,5,45,39,56,5,47,40,57,5,49,35,52,5,39,38,55,5,45,41,58,5,51,42,59,5,53,19,41,68,5,51,19,45,62,5,59,19,45,62,5,59,24,46,63,5,61,10,33,50,5,35,44,61,5,57,40,57,5,49,40,57,5,49,34,51,5,37,41,58,5,51,41,58,5,51,35,52,5,39,36,53,5,41,41,58,5,51,36,53,5,41,14,33,50,5,35,36,53,5,41,37,54,5,43,34,51,5,37,27,41,58,5,51,50,67,5,69,39,56,5,47,11,33,50,5,35,15,41,38,55,5,45,37,45,51,22,33,50,5,35,29,46,5,27,37,54,5,43,35,21,42,59,5,53,41,58,5,51,38,55,5,45,32,49,5,33,36,53,5,41,37,54,5,43,35,52,5,39,39,56,5,47,40,57,5,49,43,60,5,55,40,57,5,49,40,57,5,49,40,57,5,49,40,57,5,49,28,52,5,25,39,56,5,47,37,54,5,43,17,39,56,5,47,37,54,5,43,36,53,5,41,39,56,5,47,37,54,5,43,38,55,5,45,40,57,5,49,39,56,5,47,39,56,5,47,41,58,5,51,34,51,5,37,35,52,5,39,40,57,5,49,37,54,5,43,35,52,5,39,35,52,5,39,39,56,5,47,38,55,5,45,38,48,5,45,39,56,5,47,41,58,5,51,23,19,30,47,5,35,20,15,7,16,21,42,183,5,47,87,52,115,9,14,72,76,89,84,30,9,5,77,59,85,95,42,84,47,98,57,21,5,84,45,98,78,61,71,9,14,71,9,5,92,33,89,114,5,63,108,41,97,109,5,97,38,20,38,9,46,25,57,13,38,87,47,42,46,17,13,18,48,13,9,68,63,5,69,149,123,60,46,38,87,47,42,46,17,13,18,48,13,9,146,63,5,71,16,69,49,63,112,44,44,67,105,31,9,14,115,108,9,5,65,60,31,152,9,14,100,9,5,55,60,39,74,61,116,94,9,14,61,93,9,5,71,67,42,67,9,57,61,144,9,14,61,111,9,5,73,105,163,41,175,50,35,127,45,36,70,70,46,127,45,36,70,70,45,44,9,25,5,81,216,5,90,207,32,31,5,78,276,28,57,57,11,30,31,30,29,5,93,69,113,9,32,39,39,126,46,90,55,99,45,89,9,5,97,7,120,6,12,15,21,45,18,67,41,18,48,6,15,21,45,18,59,41,18,40,10,6,101,115,146,6,85,61,85,176,7,126,37,189,66,64,50,58,65,65,41,29,76,45,9,64,42,48,63,46,9,26,5,107,7,82,7,35,72,5,39,7,79,7,32,69,5,33,7,96,41,7,33,69,5,35,40,92,5,48,85,45,52,53,37,17,13,18,22,13,9,25,5,53,46,61,43,53,51,5,49,36,109,56,5,41,41,49,34,42,5,51,46,41,39,20,5,61,45,55,28,51,95,33,17,59,51,40,62,45,65,54,75,9,21,5,45,48,55,48,35,9,20,5,51,35,62,5,39,35,61,5,39,49,66,55,62,5,67,53,72,55,98,5,63,181,105,39,67,150,36,60,30,41,88,51,45,63,45,73,29,25,21,47,73,89,106,158,149,170,88,73,56,21,17,13,18,41,200,48,97,17,13,32,91,42,197,44,105,56,13,9,5,103,151,99,79,44,49,13,67,131,54,108,26,54,30,88,51,45,42,34,25,21,17,13,25,74,65,159,13,9,5,99,7,78,7,71,72,115,49,159,9,77,57,9,80,57,9,25,5,69,7,116,66,64,78,138,89,7,109,62,59,104,75,49,9,25,5,67,7,78,103,7,71,107,72,5,7,75,66,64,78,89,7,69,20,29,9,30,64,9,61,102,9,25,5,59,101,132,5,7,61,7,73,61,43,46,48,48,41,43,43,46,9,54,44,46,46,57,93,35,28,9,63,41,62,9,92,37,39,39,40,9,49,54,89,9,5,95,7,54,7,68,61,39,43,42,46,42,46,50,46,50,37,41,40,41,45,41,45,39,9,60,42,50,48,52,52,56,52,56,52,56,54,58,93,59,45,49,47,48,48,92,13,24,29,9,92,37,41,41,41,43,78,9,49,36,84,9,29,33,33,33,35,30,5,85,7,74,7,75,38,37,42,46,53,41,44,42,38,9,25,5,99,7,61,7,74,90,127,28,5,97,77,38,42,46,50,50,46,50,67,63,72,21,119,49,39,17,22,46,44,48,48,44,42,59,63,72,21,119,49,39,17,22,44,44,89,75,17,43,9,75,50,26,9,5,103,45,29,46,47,5,7,56,7,60,28,48,47,50,31,31,37,51,31,39,9,5,89,19,46,23,37,26,68,83,17,43,13,9,5,53,37,29,43,51,53,49,51,45,45,45,48,52,47,49,51,53,50,54,54,49,51,57,51,50,52,5,43,98,87,78,106,97,65,48,29,45,45,45,43,48,5,65,45,55,5,45,46,43,46,5,53,45,46,5,39,42,44,5,47,39,54,5,36,54,60,72,5,44,36,48,5,41,46,52,49,55,51,44,5,49,41,45,5,39,50,56,55,62,5,47,39,50,5,38,47,41,44,5,46,38,48,5,96,38,56,45,5,46,38,47,5,49,54,46,45,5,37,49,44,5,42,43,5,53,30,39,11,53,57,41,33,11,111,92,64,107,63,30,9,44,11,67,57,41,33,11,111,63,53,62,121,27,66,94,13,30,9,42,11,71,57,41,33,11,115,67,57,66,119,30,9,50,11,68,57,41,33,11,112,64,54,63,123,27,66,94,13,30,9,44,11,55,57,41,33,11,110,63,62,91,33,29,40,82,109,17,13,18,44,13,30,9,42,11,48,37,11,114,63,30,9,42,51,35,27,39,36,32,26,43,40,32,30,40,37,32,40,39,39,56,13,9,52,85,25,43,41,51,30,9,64,60,41,100,33,17,13,9,62,7,44,7,67,104,35,33,41,35,33,39,9,44,9,104,112,26,47,52,59,35,45,31,75,138,13,48,38,9,5,75,20,7,16,44,91,5,35,20,7,16,23,32,60,62,62,60,97,63,48,24,33,70,72,68,50,24,25,30,37,30,7,126,7,19,31,179,179,207,159,151,6,19,102,38,36,5,49,20,26,38,13,74,39,42,29,34,17,13,9,5,17,43,66,63,58,5,41,7,112,112,113,100,6,53,65,65,6,77,118,7,50,56,19,9,28,41,54,50,41,54,57,54,55,55,70,66,51,60,63,58,72,44,58,37,70,66,61,51,60,51,56,47,70,66,51,60,63,51,56,45,70,66,51,60,51,56,46,70,66,51,60,56,47,70,66,51,63,51,56,42,70,66,61,59,51,56,40,43,41,46,42,70,66,71,67,49,45,43,39,39,39,46,47,41,70,66,60,51,60,63,71,67,51,69,49,55,70,66,49,41,58,68,41,65,60,49,37,56,39,65,37,59,37,66,37,44,63,43,59,58,55,54,37,61,38,58,56,68,45,40,52,45,60,54,38,63,60,55,60,51,62,39,55,44,64,51,60,49,48,47,66,50,66,51,68,52,60,63,49,51,60,63,63,42,41,60,63,70,64,52,53,63,70,53,51,54,55,51,58,44,58,44,58,42,58,49,55,43,63,55,43,58,50,55,44,54,60,50,40,60,49,45,58,40,52,49,59,60,55,57,54,41,58,33,39,68,38,70,59,45,70,66,60,51,70,47,58,39,60,60,58,39,59,55,42,60,54,40,61,56,58,54,42,61,57,54,42,63,58,57,54,45,42,53,43,58,41,60,54,43,60,54,37,65,38,60,65,41,68,44,55,54,42,58,40,58,58,57,39,69,50,37,58,44,43,70,66,51,71,72,62,48,70,66,51,71,72,62,48,70,66,51,71,49,43,70,66,51,62,38,54,56,45,70,66,51,49,51,70,66,51,60,45,70,66,59,62,57,40,54,58,40,66,39,54,50,54,52,43,52,43,52,40,40,66,45,70,66,59,62,57,43,43,62,49,44,70,66,55,46,103,40,93,47,103,51,87,48,58,42,63,55,60,68,51,58,46,68,47,66,38,64,65,59,39,65,65,60,49,45,57,70,55,41,68,40,54,56,46,58,41,64,55,45,55,40,36,47,48,45,45,45,52,45,70,49,40,113,62,39,57,51,111,46,52,43,54,50,45,44,57,37,57,69,118,67,59,120,42,57,111,46,57,52,111,44,57,52,111,44,57,57,71,111,43,57,43,82,67,63,118,61,69,120,44,57,55,61,111,42,40,40,40,57,61,111,42,65,58,49,37,41,42,52,44,66,36,41,42,43,45,44,46,54,114,54,58,9,5,35,20,7,112,115,114,123,6,53,65,65,6,133,122,7,65,53,75,47,35,9,36,38,39,38,30,55,30,43,37,35,21,17,63,43,41,17,13,18,50,26,39,33,31,17,58,99,98,43,42,46,21,17,13,9,5,57,43,26,143,24,33,32,9,5,98,66,171,43,19,56,49,141,9,14,139,9,47,42,69,81,22,5,43,61,69,5,57,7,78,22,24,7,50,58,5,37,60,37,58,5,43,92,92,94,29,6,92,86,90,45,87,70,119,170,65,97,29,5,43,19,64,90,37,83,59,55,9,22,5,61,19,32,71,91,5,75,96,98,13,15,24,99,86,77,104,73,39,28,29,34,41,34,38,34,24,24,9,112,85,31,131,131,145,121,114,10,142,21,24,23,28,23,28,29,29,25,25,22,24,31,28,27,34,74,100,92,10,97,100,101,96,100,71,10,99,33,10,102,100,101,104,85,10,42,49,84,84,85,85,10,96,65,10,54,80,88,10,97,101,103,94,55,10,92,95,10,100,99,41,25,75,28,95,96,52,10,97,59,10,97,46,10,99,93,40,10,97,96,98,99,42,10,95,96,97,84,10,97,37,53,115,19,70,67,46,114,253,57,65,64,57,49,47,32,13,93,92,25,26,9,49,68,64,98,33,24,74,91,25,54,9,65,101,81,70,95,39,33,24,35,43,53,59,50,13,18,87,82,41,60,46,38,55,73,34,51,51,51,60,34,49,147,76,29,34,78,29,34,52,52,105,66,38,29,40,32,74,34,21,77,65,55,21,43,66,21,26,51,65,86,25,21,17,163,78,43,63,109,13,82,152,33,50,13,45,57,49,99,35,103,13,36,25,26,9,45,104,70,72,82,96,82,51,37,47,41,37,65,34,31,39,46,32,26,28,28,33,32,33,63,26,34,89,26,24,48,26,13,53,83,40,42,53,56,9,31,110,45,32,42,88,35,40,37,35,40,28,41,41,31,36,46,28,9,85,68,36,54,13,39,33,24,79,64,67,145,190,58,73,74,45,57,49,99,35,103,13,33,50,13,30,67,99,13,9,44,59,9,37,40,80,190,29,35,35,41,57,13,24,9,51,49,84,56,32,57,34,24,77,39,62,63,65,75,82,74,147,190,43,138,17,155,47,57,61,58,32,64,61,97,51,65,40,25,39,79,74,62,38,29,72,89,100,29,25,21,53,36,64,95,14,34,26,13,72,27,65,68,74,149,43,90,17,13,45,133,58,63,94,13,68,65,71,33,21,17,26,13,71,65,72,33,21,17,26,13,44,66,78,49,17,28,13,9,50,101,98,101,23,66,9,61,128,127,103,89,70,51,86,145,62,13,41,44,61,57,43,75,61,47,30,9,44,22,37,13,18,38,13,9,44,62,9,39,57,9,43,62,9,39,58,9,52,79,62,74,69,75,39,61,38,52,67,36,60,66,30,13,92,26,9,51,73,72,74,69,75,39,60,36,50,64,36,54,65,30,13,96,26,9,35,74,9,38,73,9,41,68,9,45,73,9,41,69,9,48,70,9,49,95,9,56,96,9,35,48,9,35,54,9,40,59,9,39,59,9,35,55,9,58,85,9,69,101,65,58,107,13,94,71,52,9,58,68,9,58,62,9,45,72,9,31,41,9,45,54,9,92,98,93,94,96,43,26,32,9,42,49,9,37,24,26,9,30,43,115,53,132,13,43,9,35,59,9,39,63,9,37,61,9,56,80,9,63,87,9,40,64,9,36,60,9,38,62,9,32,57,9,42,66,9,63,94,58,41,69,88,97,98,94,43,48,92,98,20,61,45,44,63,86,64,66,41,58,73,17,88,13,26,9,98,98,42,11,38,66,9,101,96,99,67,11,37,65,9,40,50,28,13,107,56,9,91,33,50,28,13,94,61,73,29,13,94,61,73,29,13,56,9,72,67,35,36,32,17,28,13,105,36,60,13,18,93,13,25,9,130,11,90,88,10,70,11,59,19,113,30,88,54,166,23,13,112,85,91,112,23,13,58,84,37,29,27,27,114,27,31,102,27,33,160,27,26,159,27,30,33,160,27,28,159,27,13,111,199,29,117,23,13,78,46,23,13,104,89,9,11,82,10,119,74,114,11,94,47,58,13,18,82,13,9,53,131,61,107,96,17,13,29,9,75,83,132,23,13,54,107,28,23,13,47,34,116,17,22,95,17,23,13,38,23,13,30,112,23,13,53,9,43,35,33,28,13,89,25,9,35,32,28,28,13,25,9,40,32,40,13,29,9,45,32,45,13,29,9,65,43,150,9,45,48,121,9,35,35,31,24,62,9,40,35,31,29,62,9,38,76,54,28,13,90,129,9,38,39,29,13,54,71,28,13,24,9,35,81,9,72,76,108,25,9,45,107,31,43,13,99,98,63,51,57,59,13,24,9,92,42,88,13,41,66,13,35,150,131,123,120,104,58,43,9,41,51,43,57,13,30,9,123,125,65,104,31,34,39,133,50,69,40,121,13,57,152,63,13,148,120,63,13,30,104,77,58,48,49,98,51,128,9,77,128,9,89,107,9,57,95,9,42,60,53,51,9,35,60,51,9,70,91,46,56,28,13,86,51,13,57,48,13,41,9,38,80,9,46,36,39,48,35,53,86,89,56,57,54,83,9,48,65,50,71,13,37,9,43,35,104,24,41,9,45,73,9,62,24,50,29,13,39,9,47,30,43,72,64,44,32,62,75,21,60,75,21,53,45,62,45,42,42,32,47,24,71,13,9,44,53,50,54,39,9,53,24,45,9,47,86,9,38,56,54,53,54,43,9,53,24,95,57,106,104,9,60,65,51,23,28,13,37,44,45,52,105,102,102,105,103,74,109,43,99,41,56,42,99,98,98,38,118,41,104,79,92,51,38,55,52,53,178,40,32,59,21,45,51,51,131,44,44,51,112,92,62,77,21,43,114,21,26,96,99,51,95,21,50,77,51,151,45,42,50,38,49,190,40,21,32,50,88,41,74,46,73,44,48,78,46,46,55,66,44,105,42,32,13,76,9,55,65,59,97,46,18,36,35,42,45,39,164,13,24,9,42,24,34,9,51,24,58,9,64,24,71,9,63,58,54,63,13,25,9,49,24,41,9,43,24,35,9,50,41,53,63,28,13,27,45,43,41,42,41,51,51,55,44,64,52,139,51,145,50,64,45,79,225,50,79,103,50,48,51,66,46,41,45,121,149,44,102,59,46,103,44,100,42,93,24,33,13,9,55,100,61,38,28,13,98,82,43,28,13,36,104,102,44,62,28,13,61,25,9,96,43,63,51,98,36,21,17,13,25,9,36,48,52,40,26,39,45,69,68,29,17,62,26,17,13,48,50,9,65,51,23,41,13,34,9,46,105,14,97,97,73,14,99,101,57,113,33,13,71,42,68,92,52,97,33,13,94,94,96,96,27,14,95,98,59,14,72,76,52,33,13,98,75,54,33,13,34,97,44,13,24,9,36,73,41,24,24,9,59,37,42,43,44,45,52,41,41,50,46,41,32,13,25,9,53,37,42,55,43,56,44,45,52,53,41,54,41,54,50,63,46,41,53,98,97,97,99,78,55,94,36,54,94,93,95,41,57,94,31,91,96,95,94,61,53,97,93,54,59,94,96,59,60,93,91,94,30,61,97,59,53,51,13,25,9,46,23,36,47,50,47,47,55,57,36,53,95,94,66,53,102,104,50,17,13,25,9,47,23,36,46,49,36,17,13,25,9,44,23,36,55,53,41,47,55,50,51,51,50,53,50,50,48,50,49,50,48,52,47,53,53,59,53,52,53,52,56,51,56,36,17,13,25,9,45,54,9,45,23,36,54,51,50,53,49,36,17,13,25,9,54,62,29,13,81,14,43,14,97,76,14,47,14,98,85,14,97,34,42,64,9,44,52,29,13,83,33,55,9,51,58,39,43,28,13,24,25,9,48,30,44,62,120,101,128,117,120,60,121,163,111,120,50,48,142,97,140,145,128,129,128,126,41,48,131,98,130,116,111,121,124,113,111,101,13,9,52,87,52,40,26,39,78,26,69,57,68,55,61,98,33,21,94,49,30,21,94,67,89,97,95,97,96,76,130,36,21,61,135,103,140,135,36,21,29,17,45,26,17,62,26,17,13,48,83,87,85,36,51,78,86,9,51,122,9,38,57,38,24,9,37,39,9,70,38,68,37,30,13,39,9,73,35,122,38,54,57,120,48,26,17,38,156,13,26,9,52,85,9,85,104,101,60,14,60,14,25,63,14,86,35,14,44,43,14,89,97,88,63,92,89,37,98,96,79,136,17,13,57,52,165,13,84,9,55,35,26,21,16,59,32,68,46,9,60,35,144,9,38,35,143,9,43,35,26,21,16,47,32,68,46,9,42,35,143,9,63,55,54,59,13,18,124,137,13,9,54,35,138,9,37,49,9,54,35,61,13,57,107,28,9,54,57,156,28,9,50,107,51,110,9,45,35,222,71,101,100,102,108,43,139,173,111,44,53,53,13,43,43,13,24,41,9,16,51,94,9,54,103,128,13,9,39,35,139,9,62,63,32,45,59,44,49,78,101,17,49,77,24,33,13,9,46,24,121,9,38,35,24,65,9,38,35,24,65,9,46,35,24,92,9,52,35,25,24,81,64,14,26,28,26,26,26,23,50,55,55,56,51,48,73,13,18,85,13,9,43,35,54,50,28,80,82,111,13,120,9,40,35,21,88,45,51,13,65,38,37,42,130,18,59,45,9,35,41,35,57,106,84,41,38,54,52,49,54,44,32,45,21,17,46,50,13,70,50,42,31,78,13,51,28,78,13,24,9,35,35,51,110,9,39,35,41,27,27,57,99,100,101,27,64,45,17,22,100,104,70,22,42,22,100,64,17,13,92,93,41,41,9,40,53,138,13,9,55,57,68,45,47,72,9,50,45,49,113,99,32,31,39,82,79,145,135,72,28,13,24,9,54,70,9,35,71,9,60,35,54,45,49,137,105,52,76,41,87,68,43,33,118,17,68,13,41,29,45,284,37,24,9,55,61,50,13,9,61,66,43,28,13,58,28,13,77,102,108,28,28,13,25,9,47,57,27,53,14,55,48,14,55,52,84,14,47,87,53,53,55,55,53,83,128,47,47,30,9,41,57,27,53,14,55,48,14,55,52,84,14,47,87,58,43,13,58,52,30,9,45,92,81,53,23,13,77,29,9,45,35,54,56,52,13,55,59,77,39,55,79,85,62,9,37,101,9,50,44,14,21,14,78,14,21,21,22,22,22,27,28,30,19,14,24,96,28,13,45,28,37,32,17,13,39,29,13,18,38,28,13,54,97,38,85,28,13,75,78,53,29,13,84,70,24,128,9,87,140,45,39,93,62,9,75,43,75,21,92,94,38,59,63,81,119,13,18,49,93,92,92,80,53,58,13,39,62,9,38,69,54,53,51,51,28,13,32,101,48,31,28,13,76,56,28,13,79,42,31,28,13,80,48,26,61,57,57,54,54,40,13,25,9,36,92,69,13,96,74,13,35,54,45,64,123,13,64,123,13,37,106,13,76,9,51,24,93,9,35,53,9,56,34,45,44,39,32,13,25,9,37,35,92,9,43,24,57,74,56,13,18,46,13,27,9,40,24,84,65,13,56,28,13,123,9,45,35,45,47,35,114,9,36,35,51,30,125,49,71,61,17,13,53,59,88,54,30,122,49,68,58,17,13,45,29,74,52,135,9,42,35,57,80,13,35,77,69,44,40,28,13,24,9,52,134,9,39,54,103,13,95,9,60,48,39,58,81,49,79,51,51,101,66,13,43,9,35,35,208,9,43,35,51,35,52,74,9,53,26,56,39,28,95,61,13,29,9,51,35,54,63,72,55,59,90,40,96,83,35,43,62,9,41,40,68,9,49,35,27,28,13,138,34,46,27,115,13,78,9,46,24,55,9,36,71,35,66,51,51,35,52,108,68,107,9,54,24,91,9,38,30,42,46,45,45,45,45,46,48,44,45,111,82,50,76,56,32,44,47,52,78,50,32,44,61,46,52,47,55,60,44,44,43,43,43,43,50,41,137,43,44,45,58,94,67,21,26,43,21,17,45,103,45,99,47,44,45,52,45,45,46,132,43,47,24,48,13,9,52,30,42,46,45,45,45,46,47,45,45,43,48,43,43,45,44,45,47,44,39,45,42,44,44,43,43,43,45,44,44,47,45,44,45,46,60,43,32,46,47,41,95,45,114,107,98,24,42,13,9,57,24,125,9,45,35,43,54,34,51,36,89,30,48,86,64,40,25,36,86,30,51,65,46,56,70,105,25,30,70,86,25,30,28,36,17,13,24,9,46,35,36,106,9,50,35,88,38,45,9,35,35,50,97,9,46,35,31,44,45,47,55,44,44,13,46,9,71,72,78,72,59,60,40,50,46,111,120,17,22,46,114,123,17,52,28,13,29,9,95,35,61,61,95,42,61,35,49,109,17,84,13,24,9,50,136,9,43,127,9,42,24,52,9,59,53,28,13,103,28,13,54,90,9,39,45,33,33,13,70,28,28,13,95,96,65,43,70,13,25,9,55,24,94,22,24,28,13,39,99,86,89,93,30,30,30,30,32,17,59,32,70,37,36,21,17,13,25,9,45,35,93,35,40,132,13,18,28,13,9,45,39,86,28,26,13,9,46,35,79,108,84,106,9,30,97,95,86,9,54,59,56,13,35,48,116,95,79,54,49,51,50,114,13,24,9,40,80,9,22,52,30,43,44,43,43,43,44,43,44,60,43,45,47,45,46,43,42,41,47,41,32,45,74,24,42,13,9,40,52,28,13,30,40,41,41,47,44,45,43,44,46,44,44,44,48,106,99,126,32,24,97,103,98,53,45,36,21,42,13,9,49,106,57,55,52,47,38,9,36,30,44,61,120,60,39,51,13,35,59,30,79,107,13,39,50,13,24,9,37,105,9,54,47,56,80,97,58,67,52,14,99,87,88,38,46,13,113,60,44,134,122,120,94,14,127,103,55,129,34,39,13,99,101,39,14,101,99,99,100,37,35,69,116,112,60,99,98,13,58,95,70,14,92,52,101,110,13,86,61,9,38,53,98,73,39,32,17,92,91,90,88,52,18,91,90,87,67,18,93,91,62,84,13,25,9,52,24,70,9,41,35,36,25,116,118,24,51,80,151,13,18,98,93,125,13,9,85,155,63,38,37,54,41,32,39,50,88,93,85,158,58,9,65,68,45,81,33,13,99,99,96,34,46,84,76,9,84,81,80,84,59,130,79,13,62,40,102,58,36,13,61,33,9,65,53,28,54,41,17,96,41,17,13,32,37,52,58,65,68,70,67,44,36,61,49,53,48,32,49,21,17,91,28,38,38,31,31,97,43,17,38,67,57,40,17,95,96,40,121,40,17,80,82,81,74,41,17,38,45,79,84,44,48,36,106,173,48,25,67,45,45,46,50,95,47,17,57,37,13,18,66,64,65,38,41,17,32,54,70,48,64,53,45,58,63,49,40,48,29,25,99,40,25,37,23,47,44,21,41,17,66,39,13,9,70,49,132,33,13,93,26,96,13,26,9,63,93,53,92,43,73,77,88,17,13,29,9,62,44,134,122,53,28,113,118,101,41,17,64,73,139,40,17,13,33,9,76,35,54,61,96,52,14,98,96,28,96,27,55,27,58,38,37,17,49,13,18,60,82,37,17,13,78,90,33,13,48,86,28,110,90,100,101,125,14,92,37,136,77,13,94,146,101,33,13,95,75,36,93,111,90,36,126,62,9,60,54,82,13,54,55,52,39,50,128,18,96,80,18,24,34,21,18,96,104,68,18,98,118,13,41,29,30,69,77,37,24,9,67,106,75,33,35,13,98,55,27,262,53,166,9,60,35,61,75,9,37,74,9,74,26,85,91,37,76,80,95,102,124,33,34,95,33,95,34,99,109,104,80,33,36,102,35,101,34,96,89,49,47,46,26,17,79,26,17,54,78,37,34,81,73,58,30,21,26,36,81,21,17,22,137,17,13,31,9,37,75,29,13,63,9,72,95,9,48,81,9,47,35,123,9,42,35,109,9,42,35,109,9,40,35,107,9,38,53,39,32,17,78,84,13,25,9,41,35,108,9,11,64,10,40,42,79,10,11,49,15,36,53,79,79,48,48,15,39,39,63,67,111,37,13,15,35,47,54,52,54,49,49,49,49,15,40,69,61,79,52,87,205,17,22,250,17,13,41,9,11,55,10,31,43,49,47,49,44,44,44,44,57,11,47,30,40,41,41,47,56,44,51,45,51,43,49,44,77,51,52,48,44,46,54,21,32,24,51,13,9,11,82,10,32,46,72,72,48,48,11,39,76,96,30,40,41,41,47,44,45,43,44,33,44,109,58,37,21,77,32,24,32,13,9,11,99,10,39,49,78,78,51,51,116,11,42,93,39,136,13,151,58,99,13,67,69,131,39,28,110,13,30,9,56,29,47,33,34,14,34,14,47,36,34,14,97,57,14,98,44,14,30,46,44,46,49,49,35,40,14,100,94,104,94,84,35,27,54,64,129,35,57,67,95,79,50,17,53,78,61,56,125,76,17,22,65,17,13,18,123,13,89,90,41,60,9,50,94,92,23,14,45,24,30,27,32,33,32,38,51,14,44,37,48,51,14,42,36,44,46,49,14,75,14,32,44,14,38,14,94,94,94,91,91,98,92,73,14,100,94,26,14,100,97,35,54,91,9,41,35,46,53,44,77,50,106,17,13,128,34,13,73,81,126,116,173,9,121,35,100,23,63,57,44,62,115,113,98,108,97,64,53,259,164,62,17,22,90,90,148,108,187,25,30,87,192,25,21,17,102,13,69,150,13,18,82,63,33,13,121,124,119,115,65,120,38,76,118,160,37,114,82,154,114,17,13,26,9,33,35,119,50,41,9,51,28,44,95,76,62,116,21,26,88,60,53,71,180,21,37,49,50,37,38,52,42,45,77,44,154,24,55,13,9,47,26,39,52,56,26,95,27,26,33,54,106,105,97,127,26,17,13,48,50,9,39,35,118,9,92,35,50,56,59,30,75,13,48,121,50,21,56,100,99,34,30,91,13,18,51,114,92,46,36,21,26,38,21,17,95,13,41,9,40,35,32,54,44,85,143,69,64,57,54,184,13,30,9,58,35,58,33,13,31,27,55,77,79,78,62,47,13,38,56,13,18,110,34,17,13,92,9,38,54,49,13,32,35,126,89,76,9,44,35,51,51,47,52,81,9,68,35,55,48,110,88,91,32,17,22,34,17,13,77,9,63,35,55,57,125,13,110,88,42,32,17,22,34,17,13,74,9,39,35,50,35,53,58,82,9,74,24,57,56,53,9,66,56,84,9,48,54,28,13,67,47,43,96,43,17,58,113,58,61,47,21,32,17,13,25,9,87,108,90,50,87,73,81,124,13,51,9,86,35,57,179,13,18,59,64,68,17,46,13,54,89,100,86,50,9,81,26,46,45,92,85,78,17,22,72,17,39,102,29,17,117,32,94,29,17,127,110,101,29,17,56,121,29,17,34,13,9,52,107,9,85,143,84,68,73,62,13,62,50,9,59,26,101,85,37,95,159,95,96,98,29,81,40,64,115,37,25,63,96,112,98,63,33,21,17,63,59,92,122,108,59,29,17,39,88,141,120,17,22,13,30,9,38,51,99,52,26,9,51,69,113,33,13,67,33,13,24,86,60,101,33,13,94,95,72,31,28,9,55,30,56,76,68,79,79,32,50,57,59,52,56,55,61,68,66,73,67,55,65,53,57,51,58,54,100,100,40,32,52,57,94,93,56,32,24,60,33,13,9,43,30,44,43,44,60,46,43,44,43,43,43,44,45,58,47,57,45,58,44,101,102,62,75,30,21,53,43,50,46,53,42,62,41,47,83,50,21,26,43,81,48,52,13,71,9,49,35,54,51,57,52,107,9,39,35,51,65,76,9,55,79,111,56,9,44,105,9,48,35,53,60,112,54,94,9,46,35,54,62,69,104,13,47,45,64,109,13,64,109,13,75,51,43,125,75,81,109,138,13,90,97,44,70,125,21,103,48,75,122,100,57,125,47,13,18,51,80,75,13,155,41,39,47,53,62,9,49,35,58,51,60,145,59,69,86,180,17,13,97,9,44,35,102,14,34,85,61,47,35,54,45,52,75,75,96,106,80,80,57,55,68,78,65,55,128,62,9,51,80,9,53,35,48,51,49,95,13,45,54,30,26,112,73,56,170,128,46,17,22,13,31,54,53,13,37,167,13,107,9,21,72,35,54,58,102,64,84,63,73,90,184,21,17,110,55,248,32,17,30,13,18,53,118,13,9,63,53,55,53,55,41,29,87,86,60,39,51,13,99,39,50,13,37,47,47,25,9,40,35,54,51,88,9,37,35,54,46,51,57,52,49,99,125,9,37,35,54,46,45,50,51,57,52,90,103,103,69,51,106,9,40,35,54,50,51,57,52,45,109,9,52,35,54,47,72,51,28,54,128,99,17,22,65,17,13,21,103,79,56,107,13,58,61,56,95,13,18,55,107,49,32,55,70,49,32,56,105,13,62,9,54,35,54,112,76,29,56,53,57,62,9,41,35,54,51,91,29,99,9,39,35,54,49,51,57,52,94,108,9,36,35,48,57,47,87,85,9,39,35,51,47,87,76,9,45,95,9,35,35,51,85,52,69,9,41,35,54,51,51,57,52,45,110,9,40,38,73,35,54,50,88,97,82,101,54,103,43,34,84,13,39,63,13,98,9,42,38,35,54,48,72,97,97,38,29,70,97,76,13,121,9,37,35,49,36,57,65,56,13,18,69,48,13,69,90,9,43,35,54,52,29,91,9,54,98,97,23,35,54,21,63,57,84,84,13,18,43,67,17,69,31,56,37,17,13,62,9,61,24,94,9,54,24,89,9,57,24,92,9,70,24,209,9,34,26,34,46,46,47,50,47,46,36,118,120,115,22,37,22,128,22,35,27,22,107,109,22,92,22,37,34,29,22,84,52,47,65,49,52,80,51,48,50,50,52,49,51,36,62,62,41,25,33,49,36,140,49,36,106,106,48,57,71,66,25,115,119,69,40,25,33,49,36,33,28,37,17,13,9,41,44,9,39,30,38,45,45,42,42,46,43,42,40,40,44,41,46,43,45,43,45,44,42,46,103,102,32,43,45,32,45,100,43,44,50,44,46,48,45,48,43,45,109,32,45,46,48,45,47,117,103,106,24,49,13,9,71,24,121,9,37,97,20,81,9,35,30,45,49,45,72,42,143,42,45,147,21,26,46,145,43,142,40,46,40,46,44,49,41,61,46,86,43,83,45,50,43,48,45,50,44,49,42,68,32,43,45,47,46,52,38,46,44,48,43,45,48,46,43,42,44,45,46,48,45,47,45,47,45,49,50,21,26,13,55,9,46,62,9,37,93,92,14,84,81,44,129,28,56,27,32,17,13,35,54,47,45,28,72,35,53,17,150,13,18,84,13,9,47,73,55,27,45,17,15,9,79,30,42,42,43,88,46,90,43,87,48,91,43,91,42,86,45,45,48,88,45,113,44,32,38,53,50,95,49,105,32,96,21,24,50,125,117,157,57,56,54,39,21,55,13,9,67,24,110,9,74,77,33,23,13,64,9,23,45,35,50,74,13,77,50,49,128,9,46,35,77,58,51,21,71,36,41,13,18,51,50,13,49,114,9,46,35,51,104,52,81,9,45,35,53,103,54,80,9,68,54,56,57,41,9,79,56,50,13,54,51,13,78,9,61,71,9,61,35,54,125,33,72,92,52,13,45,88,100,62,9,74,35,26,30,42,26,42,41,26,43,43,26,24,36,13,24,55,14,36,14,92,97,94,28,91,29,93,51,13,18,60,64,177,54,13,95,9,49,87,9,79,100,29,83,130,41,62,9,81,53,63,52,75,116,119,75,89,55,47,48,68,78,104,47,141,62,9,41,59,67,13,105,45,57,88,19,13,9,87,41,45,63,67,86,103,109,122,57,37,70,17,15,9,152,75,96,55,68,78,95,154,108,53,62,9,102,146,45,150,69,140,62,9,89,75,43,93,54,75,109,180,13,103,9,87,43,55,59,78,67,53,107,102,131,49,60,33,62,9,39,24,47,28,13,102,48,34,101,104,27,52,88,88,56,32,17,28,13,53,28,13,80,79,42,34,28,13,88,56,28,13,65,40,107,117,32,17,90,76,34,71,78,90,80,77,109,36,28,33,70,80,103,87,51,17,13,25,9,89,56,51,128,9,46,53,53,35,34,68,47,47,24,9,45,73,109,74,39,90,28,116,70,13,57,9,38,35,51,33,13,76,72,9,36,35,32,53,50,13,54,9,119,35,31,84,90,93,75,37,17,13,127,33,13,84,33,13,18,52,37,17,13,62,9,10,117,123,112,10,84,11,94,35,54,125,62,41,49,13,54,9,51,26,53,39,28,92,61,13,29,9,38,35,54,28,78,13,54,47,122,89,94,13,64,109,13,64,109,13,97,114,45,50,17,13,37,92,13,88,83,57,53,53,53,56,70,32,76,39,57,21,164,17,22,98,17,13,42,76,137,121,13,78,97,9,41,173,9,78,119,9,96,53,49,116,65,55,56,48,57,24,57,63,87,46,56,13,18,46,13,47,58,119,119,62,9,60,54,51,88,45,81,65,57,28,9,39,104,9,41,59,83,37,80,13,29,9,40,35,30,139,24,108,77,9,53,35,67,56,105,9,42,55,133,9,37,98,9,38,70,9,82,54,41,55,57,51,129,62,9,82,49,41,55,48,111,29,109,62,9,95,91,90,69,36,35,54,43,59,101,9,77,48,41,24,57,140,56,13,18,46,13,91,62,9,37,35,27,57,80,56,13,18,49,13,74,9,97,68,70,59,41,55,177,37,97,62,9,94,26,21,54,70,41,55,13,18,42,56,13,21,54,42,13,18,33,13,97,62,9,79,26,54,38,99,13,65,44,13,18,55,57,103,17,13,98,9,46,58,48,9,41,59,9,41,59,9,37,55,9,88,47,54,41,29,70,152,41,39,62,9,104,51,55,122,27,33,47,13,35,52,110,92,34,76,13,99,114,13,33,58,39,29,42,65,63,15,89,53,13,57,29,90,51,13,29,123,62,9,37,35,133,47,60,75,9,38,35,51,58,57,64,131,63,73,90,184,21,17,88,13,18,112,98,13,9,72,93,9,84,79,63,88,9,109,48,57,29,125,70,28,9,65,28,38,31,28,55,52,93,47,30,30,53,145,13,102,9,41,46,48,64,9,49,35,52,51,52,52,86,9,41,53,48,60,30,13,18,98,102,30,41,13,9,41,31,36,35,50,47,41,72,9,51,35,28,19,31,32,27,31,44,54,172,173,41,9,41,54,96,9,41,75,9,53,35,31,34,52,31,31,49,84,61,58,35,29,41,45,46,105,56,18,89,87,110,108,54,39,56,58,46,61,69,55,46,51,63,54,25,30,45,48,44,54,25,21,70,48,44,50,59,21,26,38,42,39,21,17,66,46,38,55,17,13,71,36,51,51,13,81,107,13,57,79,80,41,50,84,61,58,45,13,9,44,89,9,79,53,44,29,32,29,66,50,56,57,76,17,53,57,13,18,82,114,145,118,132,57,61,17,13,109,51,13,29,47,135,62,9,78,53,44,31,54,38,13,18,55,13,65,29,47,105,62,9,57,80,92,48,85,57,9,56,66,107,47,46,67,9,55,80,65,26,9,60,103,9,104,48,85,9,37,128,9,27,36,84,86,82,100,78,80,78,98,96,98,97,95,97,83,79,95,77,87,85,85,83,91,87,105,83,97,52,21,30,54,52,58,40,24,33,79,111,56,46,69,182,91,39,107,17,29,128,13,92,50,62,39,104,82,49,65,17,69,46,47,13,76,48,39,70,38,80,64,60,56,110,17,31,65,17,74,46,47,13,74,72,104,131,86,91,29,86,13,78,63,45,73,92,133,46,65,44,46,21,84,17,41,69,88,31,13,62,27,36,82,74,80,82,48,34,43,82,84,100,62,61,52,41,81,37,44,46,55,53,55,37,17,25,28,28,28,32,34,31,63,77,96,68,52,31,45,227,84,48,38,44,25,44,46,21,37,72,25,68,56,35,21,40,42,50,105,71,53,67,61,119,134,122,68,55,33,38,72,33,38,55,70,64,43,38,56,70,104,120,67,58,33,38,74,64,62,33,38,58,138,72,71,62,33,103,85,33,60,38,56,43,57,63,71,73,69,43,51,72,37,173,53,50,67,42,33,72,36,97,112,46,63,68,38,25,41,21,55,58,162,21,45,139,84,198,19,58,95,41,21,17,61,92,39,21,17,62,98,34,41,65,40,25,107,41,25,21,17,43,100,75,142,25,21,103,41,21,17,53,100,75,145,25,21,77,46,40,165,61,64,54,49,44,25,70,55,25,41,21,59,17,43,66,54,37,82,64,28,50,38,85,34,42,89,34,40,39,87,34,37,43,114,34,38,115,34,39,116,34,41,118,34,40,117,34,40,117,34,42,52,119,34,36,83,34,36,83,34,35,40,37,106,38,39,85,34,40,87,34,36,83,34,39,86,34,40,87,34,35,82,34,32,86,34,21,31,17,81,103,38,44,21,78,17,66,51,38,35,32,56,50,31,48,38,44,25,44,46,21,54,96,51,55,25,52,21,38,40,38,55,64,106,70,43,38,50,69,140,144,74,42,33,77,44,56,39,43,58,108,72,33,38,76,124,102,89,37,64,33,38,57,63,71,73,69,43,179,53,50,67,33,38,72,33,38,56,72,67,33,38,68,33,68,38,56,72,109,64,48,42,33,56,44,36,72,114,33,68,38,25,82,47,21,52,55,39,46,159,25,89,21,47,49,21,17,55,48,95,17,48,66,36,41,21,92,37,125,42,69,70,36,31,72,68,64,106,25,21,34,141,58,41,21,78,79,59,96,17,49,47,59,64,77,59,93,40,25,21,17,78,152,17,38,31,31,21,32,37,42,21,26,39,21,38,17,51,47,104,17,66,90,84,38,41,21,95,82,54,39,72,21,38,41,74,71,46,25,66,21,68,17,67,40,53,40,49,88,32,163,21,17,86,66,54,47,115,64,74,66,21,100,145,44,59,43,21,60,122,124,53,17,87,100,47,43,46,130,122,70,29,25,39,150,95,25,21,17,77,61,135,21,66,167,17,75,59,135,21,90,164,108,17,74,85,189,103,164,107,17,77,52,61,59,99,36,59,21,63,153,51,94,17,52,38,40,51,97,63,43,25,74,34,25,82,66,74,34,25,62,49,21,70,17,81,82,166,17,79,82,164,17,72,75,43,79,64,100,52,36,64,21,31,17,68,43,58,62,62,99,21,32,17,88,132,17,75,90,37,165,17,75,90,37,165,17,78,27,66,47,69,37,59,28,101,43,50,55,48,105,47,72,51,136,89,52,163,37,42,33,38,57,33,29,34,88,29,25,42,113,114,163,61,68,53,25,21,160,56,38,147,35,91,21,111,62,17,66,52,66,41,21,77,59,84,81,50,126,67,21,33,74,21,51,17,61,43,30,35,139,66,21,66,17,79,69,37,59,72,58,67,55,79,43,29,25,23,142,35,100,21,121,17,50,72,120,39,39,25,30,41,25,21,59,17,56,86,17,81,43,45,34,51,50,50,81,141,79,125,53,37,49,33,53,38,55,51,53,38,56,51,56,33,52,38,53,52,38,56,45,25,21,17,59,66,54,37,61,37,26,50,36,95,36,40,49,34,35,40,37,78,34,32,41,21,40,37,21,87,17,58,56,84,38,41,21,145,36,38,41,60,93,66,21,49,41,21,141,17,59,43,44,24,41,67,49,54,25,51,70,64,17,79,72,40,49,22,150,151,78,22,85,154,100,114,74,181,17,48,40,41,36,21,33,17,49,60,67,66,124,132,77,21,62,62,71,70,25,67,21,34,17,60,66,155,21,38,52,51,54,73,136,37,34,17,13,74,32,26,35,91,93,85,65,100,34,13,53,99,80,180,13,101,103,14,99,98,88,51,79,68,64,42,62,96,49,81,81,96,35,82,103,147,95,97,81,96,99,101,55,14,98,98,101,100,101,98,74,14,98,98,92,97,14,98,51,228,94,93,45,14,96,91,89,95,99,35,168,220,68,26,9,62,147,31,37,34,52,98,52,67,42,46,80,17,57,48,96,62,44,82,34,22,87,43,159,21,17,58,13,40,37,50,48,27,51,41,54,17,41,83,17,13,9,114,26,36,13,18,35,13,19,38,30,64,65,17,93,39,37,47,17,80,64,84,17,58,45,77,50,48,21,17,59,13,40,44,83,78,43,36,17,13,9,40,32,44,44,41,32,13,25,9,111,122,127,56,96,92,91,96,24,81,94,92,89,30,14,55,62,14,94,45,14,91,14,62,55,14,94,93,93,75,14,95,40,63,92,89,93,35,14,55,62,14,96,28,14,91,14,62,55,14,92,91,91,73,56,83,37,91,86,57,40,33,75,72,13,53,9,61,35,37,52,56,38,18,45,77,50,50,21,17,48,51,13,9,160,34,19,39,56,52,96,62,124,27,17,96,97,34,40,45,50,48,95,111,63,50,82,54,52,25,21,64,27,17,108,55,13,40,56,52,101,36,123,27,17,96,97,34,40,45,50,48,93,111,84,48,40,21,27,17,109,55,13,9,65,43,37,14,104,38,14,96,96,98,53,33,47,99,100,33,66,95,58,47,50,13,97,87,68,9,82,40,47,44,49,112,83,73,17,13,30,46,30,58,36,41,21,26,36,21,17,13,35,46,98,70,27,17,97,56,44,54,99,89,43,21,96,97,93,86,47,95,95,65,51,93,48,36,21,26,63,100,52,26,83,26,96,101,98,40,26,95,96,63,63,21,17,22,58,98,96,66,32,17,13,9,91,42,34,127,88,86,86,69,112,134,69,17,13,9,49,53,38,69,58,53,20,50,100,97,103,70,59,101,99,88,115,48,70,25,100,84,67,81,25,21,99,102,98,104,51,51,102,74,35,17,14,102,99,76,75,75,41,51,36,90,64,23,42,70,98,66,67,36,21,76,33,17,44,72,101,42,64,49,40,61,73,57,58,52,48,33,38,87,101,72,83,52,37,33,29,25,21,77,33,17,13,9,66,28,37,69,54,54,20,46,112,5,53,17,57,25,113,31,69,52,9,39,76,39,51,68,52,51,17,22,82,17,25,13,58,9,5,53,17,66,45,37,45,44,37,40,61,135,109,26,35,68,84,82,72,95,62,59,25,41,118,25,39,111,25,40,107,25,30,142,25,23,26,17,40,157,26,17,36,55,104,58,53,115,169,29,70,25,21,26,72,21,26,17,34,34,82,74,106,56,60,53,52,30,25,23,26,17,27,31,39,34,48,119,13,11,5,59,42,37,43,48,9,107,45,22,5,71,65,51,119,26,139,49,69,23,13,30,34,74,37,61,57,56,73,21,43,69,46,101,50,45,46,60,30,25,30,55,25,21,17,90,13,18,84,13,19,9,108,25,85,9,60,153,40,70,85,13,9,5,61,19,19,130,45,47,19,9,89,61,32,66,82,15,5,52,18,22,25,22,52,24,54,42,49,30,13,39,94,13,44,9,22,5,20,46,36,25,9,47,55,9,49,24,9,126,130,127,63,66,5,53,20,7,16,19,41,30,24,39,6,49,37,44,31,38,44,8,19,107,39,33,9,94,93,86,38,22,26,32,35,38,35,38,38,38,38,38,38,38,38,20,32,50,44,72,62,46,46,48,60,58,56,54,50,54,52,72,66,52,64,52,48,62,68,66,48,54,52,50,52,52,52,52,54,64,52,72,48,54,52,54,48,50,50,52,52,50,52,66,48,52,52,54,53,6,7,97,98,82,7,19,68,7,96,64,7,19,39,28,19,26,9,30,44,76,82,80,78,58,92,16,59,84,66,10,9,35,44,63,81,85,83,16,59,135,71,10,9,36,44,65,71,69,67,16,59,132,74,10,9,46,28,59,172,43,10,9,39,25,22,41,31,33,49,14,59,92,10,9,33,25,22,36,31,33,49,14,59,96,10,6,19,33,9,25,27,28,43,58,59,43,10,9,25,27,28,43,10,9,26,27,28,43,36,58,58,43,10,9,40,28,44,55,81,43,10,9,30,28,58,91,43,10,9,33,28,58,110,43,10,9,37,28,58,93,43,10,9,27,28,43,55,130,42,10,9,36,28,58,91,43,10,9,32,28,58,95,43,10,9,40,28,58,109,43,10,9,39,27,29,56,58,96,57,10,9,34,27,29,36,48,58,84,10,9,32,27,28,46,71,44,81,10,9,62,28,45,30,59,186,43,10,9,27,27,58,36,116,69,10,6,19,34,23,23,40,29,29,32,35,35,35,35,35,35,35,35,36,12,32,38,26,42,39,58,139,45,6,38,35,9,24,28,43,58,66,43,10,9,28,27,28,43,58,69,43,10,9,25,28,43,58,106,43,10,9,28,27,27,29,43,58,56,137,10,9,26,28,27,43,58,105,43,10,9,31,28,43,58,36,90,43,10,9,34,28,58,45,30,36,119,43,10,16,35,9,27,27,44,41,49,39,45,39,42,45,45,45,45,45,49,16,42,30,43,43,45,78,47,10,9,24,25,22,28,32,51,14,42,43,62,136,43,10,9,28,28,42,43,56,146,43,10,9,28,28,43,56,96,43,10,9,24,31,36,30,42,43,43,62,75,47,10,9,32,27,28,30,43,42,44,113,82,10,9,35,28,30,43,42,44,43,72,10,9,40,28,30,43,42,88,44,43,10,9,30,28,30,43,42,43,93,10,9,28,27,30,29,43,43,42,180,44,10,9,27,27,30,29,48,43,42,87,10,9,28,27,30,29,47,45,89,89,10,9,30,28,30,33,46,44,43,126,10,9,36,27,30,29,43,46,44,52,105,10,9,35,28,30,43,42,43,66,10,9,27,28,43,42,82,44,43,10,9,34,28,30,42,136,43,10,9,43,44,39,43,37,16,30,45,42,117,52,10,9,39,28,30,42,117,43,10,9,36,28,57,120,39,43,10,29,9,27,28,99,112,43,51,80,43,10,9,34,28,45,29,51,121,78,10,9,37,28,45,29,51,96,78,10,9,40,28,29,51,137,78,10,9,40,28,29,51,125,78,10,9,49,28,45,29,51,116,78,10,9,35,28,45,29,51,95,78,10,9,47,28,45,29,51,94,43,10,9,33,28,36,29,51,76,78,10,28,9,35,28,45,51,98,43,10,9,39,28,45,51,92,43,10,9,47,28,45,51,114,43,10,9,38,28,45,51,121,43,10,9,47,28,41,45,51,106,43,10,9,45,28,45,51,85,43,10,9,39,28,45,51,122,43,10,9,55,28,44,51,113,43,10,28,9,37,44,53,57,55,59,16,42,47,45,109,114,10,9,28,27,42,29,45,103,10,9,65,56,26,27,42,33,45,116,43,10,9,65,56,29,25,33,22,33,31,32,14,42,45,107,44,89,10,9,30,25,22,34,31,32,14,42,45,108,10,9,26,25,22,30,30,14,42,43,45,124,43,10,9,49,28,45,57,106,84,10,9,36,28,45,30,43,57,179,43,10,9,37,28,57,126,43,10,9,41,28,45,45,81,43,10,22,9,31,27,30,47,42,110,10,9,28,27,30,47,42,131,10,9,36,28,30,42,94,43,10,9,34,28,30,42,108,43,10,23,9,43,28,45,62,102,43,10,9,42,28,45,30,62,109,43,10,19,9,31,27,62,137,60,10,9,39,27,62,154,10,9,36,27,45,30,42,62,146,44,10,9,38,28,42,45,68,43,10,9,24,27,30,30,56,61,43,44,79,10,9,35,27,30,62,133,47,10,9,40,28,50,104,43,10,9,28,27,61,127,43,10,9,28,28,30,42,106,43,10,9,28,44,53,36,16,30,46,42,85,69,10,9,38,28,45,55,83,43,10,9,26,28,62,42,107,88,73,39,43,10,9,30,28,42,45,153,89,74,39,43,10,9,34,28,30,42,113,43,10,9,37,28,42,52,141,43,10,9,60,28,33,46,137,43,10,9,45,28,33,46,107,43,10,9,49,28,33,46,105,43,10,9,40,28,45,61,105,43,10,9,34,28,30,42,115,43,10,9,34,28,30,42,44,104,43,10,9,39,28,30,42,98,43,10,9,35,27,30,29,48,42,44,101,10,9,33,28,50,74,43,10,9,38,28,41,45,51,82,47,10,9,41,28,41,45,51,85,47,10,9,49,28,45,61,123,43,10,9,51,28,45,61,119,43,10,9,53,28,42,57,81,43,10,9,41,27,42,56,155,39,10,9,42,28,45,61,104,43,10,9,44,28,45,30,62,88,94,10,9,41,28,30,42,129,43,10,9,37,28,61,122,43,10,9,64,28,25,33,22,31,30,14,73,52,10,6,19,128,19,143,19,120,19,137,19,92,113,7,19,135,19,93,62,7,28,19,26,9,28,27,58,63,28,43,10,9,24,27,58,100,28,43,10,9,26,27,58,104,28,43,10,9,26,58,75,28,43,9,6,19,111,19,38,9,60,50,15,40,28,43,10,9,27,28,43,10,9,28,25,22,32,30,13,10,9,28,25,22,32,30,13,10,9,56,28,43,10,6,17,54,42,44,58,66,35,68,13,11,86,5,49,28,19,34,105,5,45,40,81,49,6,19,37,39,31,21,30,47,26,6,19,66,89,123,20,60,55,54,14,9,31,5,79,19,64,86,5,99,74,120,122,5,19,56,86,5,53,19,54,45,37,40,29,9,27,22,9,38,35,26,129,26,125,20,117,9,5,49,36,27,5,110,15,155,90,9,116,31,134,108,5,17,73,25,25,27,24,34,16,29,39,33,26,10,37,22,37,32,20,54,50,17,62,94,128,30,89,21,26,159,39,148,25,30,128,25,21,17,22,38,17,13,9,46,118,37,34,23,13,26,24,26,83,26,39,26,32,70,26,94,30,44,66,30,21,26,137,21,17,22,65,30,58,17,13,31,9,5,55,75,33,35,38,46,20,13,46,43,94,24,17,22,44,28,180,17,13,18,167,62,24,13,9,14,108,53,148,13,37,35,34,100,28,30,35,78,47,103,70,74,32,25,30,34,96,28,30,32,79,57,37,32,25,30,116,28,88,28,30,17,13,18,46,20,13,9,17,5,17,47,52,45,50,74,93,90,6,54,102,5,43,20,56,87,5,45,85,58,46,112,73,25,57,38,35,13,9,46,5,33,39,106,5,37,80,44,6,45,49,50,41,71,90,94,6,17,38,180,35,36,88,31,9,35,55,122,9,57,124,9,55,122,9,53,120,9,110,5,45,19,42,23,55,42,9,81,38,5,45,7,96,7,150,114,43,69,29,9,70,45,116,42,50,206,103,5,75,7,30,50,7,49,63,143,5,39,7,47,50,50,7,60,66,16,157,106,10,5,61,7,30,50,7,53,63,155,5,47,17,46,17,13,38,9,19,111,9,116,5,33,47,53,5,48,59,82,101,6,33,39,112,5,45,50,47,71,90,94,6,43,49,139,5,40,46,130,5,43,49,148,5,29,42,49,36,32,31,57,21,48,39,75,85,22,21,45,39,72,79,22,21,46,39,75,82,22,21,48,39,75,81,22,21,40,39,65,22,21,43,37,34,47,42,26,58,22,21,38,37,34,42,42,26,65,22,21,40,37,34,44,42,26,65,128,22,21,40,37,34,44,42,26,65,152,22,53,18,14,9,36,5,98,15,112,93,90,250,120,119,107,62,97,34,139,17,13,22,9,130,5,7,55,7,50,15,233,5,41,7,73,101,64,7,17,127,30,48,9,76,48,88,9,110,54,46,68,138,38,17,44,180,17,58,157,17,127,84,93,64,39,222,21,26,156,21,17,84,53,38,48,21,65,49,116,74,87,43,53,94,117,29,25,65,53,82,137,29,47,84,139,29,25,21,17,14,74,37,33,13,26,9,79,31,116,33,13,40,168,9,70,32,43,43,82,57,43,82,58,43,148,96,44,65,164,21,111,52,62,50,54,73,225,51,25,21,47,44,81,71,53,134,55,21,81,80,55,81,66,101,94,104,110,49,91,33,144,157,21,26,136,95,21,54,79,130,13,37,25,59,13,18,219,13,29,43,23,39,175,37,155,41,21,17,29,13,56,30,217,43,17,13,9,45,89,9,5,53,55,39,21,62,5,52,21,41,68,41,41,13,81,49,9,21,5,7,77,74,109,75,7,20,73,23,97,655,229,117,736,124,95,91,22,5,45,43,91,19,86,16,5,48,30,29,35,25,32,29,21,5,67,26,33,143,131,139,24,28,100,13,69,9,24,68,9,29,5,68,164,65,29,9,52,81,9,14,41,9,5,65,110,72,37,27,13,11,5,61,84,5,45,76,5,66,47,34,119,39,48,78,98,200,38,17,42,78,39,96,43,104,114,73,209,25,30,52,25,21,26,63,161,25,30,130,99,25,21,17,13,10,35,26,9,22,5,7,78,54,20,60,70,46,45,54,9,49,28,37,63,56,27,17,64,65,48,88,17,83,92,17,15,50,9,5,65,7,69,78,7,51,80,57,5,7,73,75,77,7,19,60,70,37,45,54,9,47,97,96,253,138,9,40,61,57,116,54,47,55,90,17,13,59,33,34,29,69,43,48,17,71,84,47,44,62,198,21,26,135,21,34,42,142,23,77,17,15,31,37,28,29,66,202,28,84,80,42,103,163,13,35,50,60,60,143,17,49,13,18,49,13,29,50,9,5,43,19,73,24,64,35,48,140,13,9,36,74,9,22,5,77,83,50,41,35,65,54,17,13,41,45,13,9,21,5,7,59,59,81,86,30,7,177,210,5,63,7,59,63,81,86,30,7,193,210,5,83,17,58,25,116,9,5,55,35,84,5,58,120,54,85,5,7,89,59,61,81,86,30,88,7,195,65,65,73,126,24,135,35,77,78,72,62,87,51,23,57,52,131,16,29,39,58,74,89,21,27,89,101,103,42,127,47,10,39,133,67,29,137,64,86,37,73,104,156,45,120,87,43,21,26,151,21,17,13,71,58,57,68,56,72,47,97,17,13,73,40,13,61,103,100,27,31,135,13,31,136,13,20,39,43,43,71,61,61,68,14,9,41,119,103,86,13,29,9,49,34,133,46,108,52,55,148,21,26,78,83,51,49,50,27,21,17,13,37,9,42,67,9,40,63,9,73,77,44,43,76,149,21,34,17,22,131,39,17,13,29,9,74,30,78,13,9,5,41,144,5,58,75,260,5,93,120,5,17,45,83,5,61,17,135,59,76,98,9,14,110,9,64,5,63,48,31,5,7,79,48,7,122,15,49,88,57,221,72,9,30,80,95,85,86,87,91,79,55,9,43,119,69,145,79,51,42,41,78,74,363,21,18,58,58,56,56,66,17,93,96,88,74,51,13,9,25,5,81,47,114,9,115,103,81,145,98,88,31,27,45,139,13,18,108,124,13,9,149,5,97,64,58,25,31,32,31,86,34,39,43,48,30,40,78,30,43,123,30,41,149,30,28,56,17,91,14,88,30,35,116,122,112,27,31,17,14,91,41,154,17,103,82,17,13,10,112,31,47,100,21,81,70,69,23,49,13,18,76,13,9,80,241,9,149,5,93,61,129,92,111,76,59,99,37,17,13,38,9,77,240,38,60,9,87,25,5,116,15,116,18,27,27,77,91,9,14,117,58,214,13,38,114,13,9,25,71,53,105,13,9,53,71,29,9,30,5,79,82,25,9,118,53,5,84,24,106,52,5,71,84,24,106,52,5,71,56,94,126,17,23,5,98,64,148,29,73,9,23,5,56,128,5,98,64,78,149,23,5,79,167,5,113,27,19,9,37,45,22,128,13,18,100,13,9,30,5,17,62,49,35,58,81,13,45,73,13,77,131,9,14,163,9,5,45,60,37,29,37,38,93,160,13,25,9,45,85,9,68,5,67,32,66,31,28,13,9,21,5,58,15,37,29,100,15,25,66,25,5,64,37,29,38,36,32,61,9,14,75,9,5,76,152,5,7,68,52,6,80,6,17,90,68,96,7,59,7,78,51,6,80,6,17,65,75,86,102,7,60,7,104,56,136,74,39,66,91,7,19,105,84,46,86,95,99,26,42,94,96,58,43,108,96,38,47,194,98,54,90,144,101,33,33,113,56,76,58,13,9,35,72,43,67,53,50,129,181,207,21,117,46,52,92,65,25,21,38,17,80,71,18,79,81,63,128,38,17,77,76,81,55,117,42,76,51,17,14,214,34,30,13,9,65,67,94,5,65,19,103,161,83,25,46,81,33,113,56,96,33,13,9,127,5,39,53,95,94,90,95,41,76,35,25,9,84,44,5,19,101,191,5,39,117,152,111,26,25,43,24,116,5,95,45,35,29,73,37,66,13,38,11,50,93,28,96,59,9,5,64,86,132,9,61,171,9,5,7,88,7,74,83,101,26,10,103,124,103,10,98,23,10,67,80,91,112,37,36,35,80,41,73,62,29,17,90,28,61,65,79,57,58,52,25,21,17,13,83,50,63,106,63,123,60,25,21,17,13,9,35,5,76,56,20,98,101,101,97,58,54,86,20,93,108,100,54,14,9,93,20,85,40,14,9,25,5,7,96,26,6,40,7,107,139,30,25,9,97,43,48,29,13,78,96,140,148,145,40,29,17,28,13,9,21,5,7,94,29,6,40,7,104,139,30,19,9,62,40,48,23,13,77,52,9,5,7,108,49,7,19,55,21,31,43,50,67,79,17,13,9,19,5,79,60,30,133,26,88,26,89,62,27,63,24,51,133,20,99,52,49,21,37,9,5,47,30,26,25,27,28,26,53,24,26,26,26,20,59,37,44,80,9,5,20,7,16,26,65,5,21,19,52,77,5,39,44,22,31,68,112,29,50,116,55,18,13,9,77,5,29,59,5,40,16,55,54,9,5,7,55,109,7,19,28,64,64,52,60,78,40,86,47,24,29,9,62,74,5,135,15,30,95,35,9,16,270,56,10,5,77,54,37,98,13,19,9,43,98,37,59,167,13,19,9,21,5,85,85,37,19,9,24,37,94,13,19,9,78,33,118,9,20,5,76,85,84,5,78,87,5,74,83,5,68,96,40,19,33,121,9,29,5,67,82,40,19,33,44,91,133,17,13,9,69,22,37,144,13,19,9,77,51,37,188,13,19,9,22,5,26,19,62,31,59,40,52,25,57,41,25,13,87,51,67,13,9,5,75,51,32,37,9,29,37,75,9,44,58,9,45,63,9,5,53,7,92,7,62,36,75,46,9,27,94,73,48,40,13,29,11,25,5,71,48,161,93,5,7,16,7,48,49,22,22,9,71,64,89,30,22,9,99,27,96,63,55,78,77,102,69,13,9,25,5,41,39,58,70,57,56,83,9,5,7,144,154,66,7,131,57,34,62,9,99,149,106,21,31,143,40,144,170,36,13,26,9,61,27,47,46,160,17,22,165,17,13,18,46,170,17,22,175,17,13,38,140,13,9,39,65,242,39,27,24,41,28,9,43,23,77,112,46,33,51,101,37,75,14,9,130,147,25,32,22,38,19,123,116,13,71,338,13,18,249,13,9,34,42,48,35,107,17,71,90,76,95,59,126,21,151,19,13,18,35,114,17,13,9,36,106,66,44,35,136,17,29,83,83,219,230,66,17,22,146,174,17,56,13,18,35,160,17,13,9,5,69,56,130,131,44,5,7,16,74,7,102,37,37,23,56,38,112,38,50,10,94,75,91,80,106,13,11,5,73,7,70,64,56,86,105,76,7,60,52,28,33,9,49,24,58,65,28,90,47,53,96,59,81,100,147,93,71,141,54,82,80,82,75,62,33,29,25,21,17,13,9,22,5,71,17,48,34,40,16,33,39,75,25,41,32,10,30,26,9,44,33,9,39,31,9,70,39,30,13,59,51,29,77,152,50,13,29,9,26,27,33,9,5,59,81,18,130,54,143,9,60,124,9,26,30,9,28,85,50,9,5,85,91,36,22,30,35,9,22,5,94,32,19,63,61,107,77,106,117,201,9,14,34,105,23,47,49,14,109,193,9,56,140,5,114,16,71,25,27,10,26,45,9,34,66,9,83,88,137,9,5,19,37,38,47,21,45,78,14,52,78,29,14,48,74,29,14,45,78,14,36,64,91,53,19,14,31,39,13,10,21,57,97,63,26,9,5,51,19,54,55,41,47,81,9,19,5,49,143,208,99,102,266,26,48,45,41,9,34,92,9,98,85,206,9,45,48,42,37,106,13,15,99,124,95,98,78,16,41,16,129,15,45,88,58,49,27,17,51,63,99,78,94,40,50,37,85,95,35,50,62,77,30,21,57,37,17,13,61,125,77,26,83,100,24,17,135,37,17,61,37,37,17,78,33,37,17,70,13,9,5,65,155,208,124,117,26,48,41,9,5,97,82,70,94,28,29,52,5,63,127,65,34,70,9,27,94,38,140,13,9,70,115,86,21,31,136,13,9,14,68,49,64,48,74,30,46,74,30,48,76,30,28,75,30,17,35,139,17,13,18,35,143,17,13,122,39,52,149,26,54,151,26,52,131,26,53,128,26,24,99,13,48,149,137,33,71,67,58,138,17,13,9,27,40,54,218,17,22,145,17,13,18,87,13,9,22,5,45,7,127,124,85,129,47,6,131,134,20,118,64,44,17,40,40,13,39,8,136,146,136,83,112,130,35,126,113,51,19,22,17,36,17,53,84,6,97,120,13,62,161,106,8,6,123,79,36,68,103,123,128,38,121,118,73,146,143,118,7,119,96,21,34,59,84,9,14,106,9,5,87,15,107,54,37,30,157,17,133,13,129,227,148,9,5,101,46,29,9,33,124,9,91,27,36,85,33,51,108,63,59,70,56,13,85,114,37,155,13,42,57,41,13,9,38,37,121,13,74,58,37,145,13,134,35,40,13,37,83,13,70,89,37,49,55,29,17,85,41,135,17,69,136,41,46,17,13,37,94,13,9,25,5,79,52,23,29,9,33,149,9,79,33,127,9,125,5,7,104,85,55,7,19,60,158,30,177,9,47,5,41,19,31,40,76,60,82,63,84,122,82,102,93,113,91,95,99,83,64,134,181,5,136,183,5,152,70,133,99,221,5,51,70,110,51,69,247,5,130,284,5,55,149,19,65,39,108,109,21,45,23,39,57,40,31,126,10,88,358,41,206,132,27,127,13,63,31,98,135,17,80,145,17,34,39,149,21,63,137,148,17,32,37,53,104,80,118,118,17,146,110,13,18,139,152,86,139,13,9,5,49,29,24,9,57,27,87,9,109,20,5,114,33,164,9,59,38,71,81,45,131,21,46,17,13,104,35,120,139,68,13,9,34,84,35,41,119,17,42,13,9,114,5,17,46,17,44,63,5,57,7,87,110,6,63,79,73,93,79,7,19,48,46,59,25,29,9,72,105,69,105,9,52,5,57,80,93,83,5,94,97,5,7,167,174,7,83,83,85,91,195,9,109,65,129,118,44,49,13,9,104,5,103,113,71,145,66,70,37,115,13,104,9,5,88,191,71,229,9,104,5,91,103,34,140,59,28,88,13,9,29,36,44,42,42,45,65,42,42,45,65,44,56,63,68,17,39,44,42,42,45,99,42,42,45,99,44,56,63,28,129,17,39,44,42,42,45,62,42,42,45,62,44,64,28,94,17,37,33,56,9,36,75,77,9,5,40,59,34,50,41,112,17,32,13,18,41,86,17,13,9,51,25,5,113,75,117,79,67,161,5,19,98,78,77,58,55,9,24,83,65,28,37,23,56,38,112,53,31,10,112,118,139,102,118,40,126,155,40,118,65,86,21,17,13,9,74,5,77,78,24,34,80,43,57,13,9,51,99,38,63,13,9,14,54,9,27,59,23,106,76,142,33,17,85,172,113,29,120,32,17,13,45,81,41,70,34,36,21,17,13,55,69,73,138,70,36,21,19,13,9,5,7,70,7,17,84,21,23,37,56,38,55,24,27,10,51,20,34,115,22,27,13,24,9,25,5,55,17,78,23,65,80,33,62,29,9,133,37,48,33,115,32,13,18,45,123,66,33,13,9,81,66,72,31,85,13,91,164,130,26,9,14,50,83,13,139,147,62,9,5,47,125,24,26,33,43,37,90,26,43,96,151,26,40,92,26,41,94,26,24,60,13,9,82,73,27,80,31,49,17,41,115,17,13,113,104,97,133,10,147,114,110,88,120,37,214,13,211,25,60,13,9,86,144,30,37,64,65,96,9,5,109,59,51,106,5,68,51,29,39,86,37,33,56,39,121,36,55,9,5,19,43,60,36,69,9,143,5,43,19,39,92,5,49,38,92,5,116,19,179,277,121,58,29,9,64,29,9,107,76,79,29,9,58,210,5,99,48,29,9,30,36,236,62,13,77,67,13,29,179,93,13,9,73,71,41,153,17,59,13,174,25,30,13,9,33,145,9,51,5,106,19,68,37,117,13,55,9,179,277,121,21,37,139,13,55,9,48,37,118,13,55,9,172,21,26,9,33,148,9,51,5,135,164,139,49,97,9,195,94,54,139,58,59,157,93,13,144,58,79,93,13,66,58,75,94,13,9,58,41,61,46,31,61,121,9,5,7,139,7,129,50,79,23,45,82,45,158,21,63,17,51,132,105,205,270,21,45,158,21,63,17,125,53,142,45,158,21,63,17,85,150,100,65,133,45,158,21,63,17,233,145,13,108,45,88,41,142,56,105,41,46,29,25,21,37,17,22,45,49,162,25,67,21,85,48,96,37,42,25,21,17,13,78,41,147,17,59,13,37,150,13,55,9,5,19,61,47,100,42,25,77,19,25,38,5,69,126,159,5,96,144,194,5,148,243,105,75,136,42,47,17,177,13,11,5,144,75,96,61,119,9,203,28,33,9,88,84,67,107,41,130,17,49,13,218,9,5,166,92,238,5,113,82,243,5,205,15,91,92,107,65,30,109,31,49,17,187,65,13,9,24,31,94,82,19,125,123,186,13,106,188,64,10,80,47,86,159,99,58,41,224,17,132,192,32,43,17,13,9,81,5,133,68,78,29,117,115,37,114,13,83,85,126,87,41,123,17,104,66,46,79,47,77,21,17,155,15,39,9,5,85,45,96,67,59,60,92,9,23,5,19,47,70,5,49,19,51,46,105,47,65,13,9,27,5,57,19,62,74,50,66,9,27,5,79,19,58,83,98,29,5,61,97,61,21,37,142,13,43,250,9,5,113,65,39,227,70,94,78,170,41,168,40,56,13,63,141,68,104,134,46,51,21,94,134,19,33,38,17,59,81,119,17,13,18,99,129,13,9,5,49,7,63,93,7,19,123,65,27,195,9,39,242,201,151,5,61,7,35,70,7,36,66,5,7,74,77,74,74,75,51,16,7,30,54,39,29,9,48,5,73,13,160,70,9,20,28,9,5,77,95,5,19,126,92,91,53,113,24,21,36,45,9,93,103,65,129,28,44,53,13,9,23,44,9,5,20,15,7,16,28,37,92,86,88,86,52,45,138,42,68,9,99,5,55,58,59,40,34,66,9,39,65,36,22,5,58,57,28,65,48,48,47,41,43,43,49,17,22,50,45,51,71,51,17,22,124,45,45,157,56,106,47,102,53,51,25,61,41,25,21,33,17,22,59,41,54,52,78,41,53,77,35,51,93,60,35,50,76,59,40,32,61,21,19,31,13,45,61,37,92,55,46,51,17,9,36,5,71,60,33,19,77,46,35,93,53,58,48,55,84,25,85,67,42,25,61,41,25,21,17,42,33,17,13,25,9,86,5,23,32,98,29,60,98,98,10,68,74,96,57,10,103,96,100,90,96,80,93,71,75,150,48,33,47,20,5,32,44,42,59,30,40,41,66,5,39,29,17,20,28,19,22,58,32,26,31,28,46,24,31,34,32,30,31,35,30,28,30,38,22,99,97,99,55,25,97,40,28,19,30,61,69,72,11,157,147,163,11,75,129,9,42,21,27,62,56,45,28,63,56,62,70,31,176,27,89,47,59,45,13,29,32,40,31,34,44,44,38,43,36,36,43,46,44,42,43,47,40,38,40,37,9,30,47,91,76,28,13,18,54,13,9,44,26,43,9,68,40,33,79,124,56,13,141,56,13,133,126,51,13,51,53,13,9,79,44,43,59,100,13,53,23,47,75,109,17,67,57,126,74,80,21,68,103,21,26,108,21,17,51,95,70,43,89,41,21,71,105,17,113,13,32,43,61,44,45,46,47,47,50,45,46,49,49,55,42,49,43,56,48,90,47,60,21,69,26,49,106,41,97,75,268,51,70,41,13,9,39,168,9,11,114,77,53,72,122,136,11,118,72,152,102,67,69,47,23,37,79,13,18,98,98,95,56,18,97,99,90,93,31,18,80,102,102,105,18,100,100,66,18,98,100,79,47,60,48,17,30,85,46,60,17,82,83,34,17,51,55,95,58,89,21,106,125,58,58,25,82,77,82,85,68,54,89,130,55,25,61,61,98,92,140,50,105,59,64,29,34,173,90,136,178,88,105,109,63,68,33,29,25,54,225,81,201,25,86,87,91,142,244,59,138,29,27,144,135,66,21,17,13,59,32,105,13,18,39,13,26,9,73,121,52,136,120,17,22,116,17,13,18,123,114,18,110,115,65,103,111,114,130,118,159,135,154,46,122,115,127,167,21,102,120,134,45,33,17,22,116,17,13,9,45,62,35,13,43,29,110,145,60,28,142,57,26,29,123,28,115,28,151,68,25,9,99,99,42,54,101,97,34,42,62,63,98,98,97,94,102,53,14,98,99,99,61,14,99,99,98,100,38,55,60,52,17,55,58,62,17,47,13,71,43,55,13,66,50,57,63,59,65,58,62,129,94,126,99,30,73,136,48,21,17,101,97,293,51,47,50,44,42,35,97,67,139,62,42,66,51,17,57,44,51,17,42,68,71,237,58,21,17,30,50,17,53,59,55,61,54,58,13,61,40,35,122,13,18,35,13,38,58,59,9,48,117,117,9,48,65,38,23,13,44,9,38,50,9,37,62,91,108,40,41,36,32,62,23,13,129,44,13,32,46,45,26,43,42,26,44,43,26,46,46,52,26,43,42,26,47,46,44,26,46,49,55,26,44,43,26,47,46,26,41,40,26,42,41,26,51,50,26,48,47,26,53,56,26,54,57,26,48,61,80,83,70,62,31,21,51,26,48,51,26,53,56,26,51,54,26,56,55,51,26,46,49,26,49,52,26,47,48,44,45,26,108,44,60,46,26,17,37,43,60,26,46,49,26,55,54,50,45,102,83,66,32,24,40,26,13,28,58,9,46,32,41,48,43,56,55,61,46,55,55,49,66,48,61,53,110,48,66,13,25,9,46,40,168,134,155,87,9,52,123,9,46,33,77,42,64,36,21,17,13,78,74,28,13,25,9,58,122,9,52,46,42,48,60,58,66,48,53,54,59,95,125,49,58,41,61,41,61,13,25,9,44,32,55,64,48,54,50,66,49,67,21,13,53,9,38,88,9,36,86,9,69,133,9,46,95,105,9,51,107,81,50,13,9,69,57,34,13,30,85,13,96,95,110,39,13,53,34,13,46,92,9,94,46,173,9,62,46,92,41,62,13,26,9,51,46,95,9,40,47,31,39,13,43,38,13,24,9,45,37,34,43,46,43,54,44,53,53,13,25,9,44,26,70,43,17,120,40,17,22,135,75,84,17,13,9,54,44,118,9,52,63,112,35,13,49,62,52,86,9,84,52,54,43,45,26,48,50,9,63,75,162,106,108,13,9,76,53,59,45,51,23,49,55,9,50,40,78,46,35,35,13,26,9,43,75,51,53,54,40,73,56,82,54,58,9,40,47,81,50,51,37,83,58,61,68,55,9,41,74,51,52,35,53,39,71,56,80,35,53,57,9,50,74,52,34,53,39,57,41,13,54,35,78,59,13,80,53,57,9,40,48,48,50,65,53,37,52,53,37,52,55,9,42,34,58,41,42,68,17,13,42,9,40,74,42,33,17,13,29,9,77,98,28,54,46,13,9,53,29,29,74,34,50,103,17,13,18,89,13,9,41,113,114,113,116,115,68,55,61,54,50,53,36,50,13,55,52,32,56,35,84,62,111,112,48,53,59,56,39,60,13,51,57,36,69,90,112,88,61,69,113,116,115,118,115,113,113,101,55,156,43,40,62,122,50,17,22,119,113,73,130,21,119,124,79,136,21,117,119,69,156,17,13,18,63,13,9,44,54,34,53,58,49,44,33,56,125,103,103,99,82,30,102,13,49,54,59,9,38,39,82,50,54,36,81,37,24,17,55,160,61,60,40,29,46,131,61,17,13,9,39,46,44,34,42,38,9,48,34,59,9,54,116,89,57,32,106,68,17,13,9,45,57,31,38,45,48,42,33,14,29,33,76,113,13,51,59,62,9,52,111,52,13,18,47,13,9,49,46,89,13,70,76,35,61,63,21,26,55,21,17,13,71,78,35,66,67,21,80,57,21,69,63,21,17,13,9,75,52,149,69,13,18,68,13,57,37,86,85,52,106,108,13,18,67,13,9,54,62,55,55,52,36,55,51,13,18,36,109,59,17,13,9,55,32,105,55,13,9,56,38,44,41,33,43,32,13,18,43,32,44,41,33,13,48,9,51,126,43,28,39,105,83,47,56,37,44,34,39,81,69,17,22,29,38,36,55,48,22,17,113,104,104,55,68,56,66,75,60,70,98,75,21,26,95,21,38,17,29,13,48,34,53,74,60,21,38,17,13,62,34,40,17,13,50,34,54,74,61,21,38,17,13,42,34,59,92,60,120,58,80,109,29,25,21,17,82,70,54,53,17,48,41,17,35,35,13,38,97,32,17,27,13,9,49,32,78,58,13,9,54,48,49,58,65,53,37,32,60,54,34,33,60,63,9,52,77,44,76,39,55,17,13,18,89,13,9,52,32,82,50,13,9,47,49,115,128,68,94,68,42,41,42,40,39,32,13,18,36,13,9,43,31,72,96,50,76,13,51,39,13,9,42,32,58,68,74,13,9,72,75,81,106,108,13,9,46,32,56,48,36,26,55,48,50,26,46,48,49,45,26,13,9,67,86,14,39,41,48,44,14,118,109,116,93,95,94,32,61,13,92,52,106,108,13,9,46,52,62,82,67,13,18,79,13,9,50,43,44,13,18,36,13,9,49,43,44,13,18,36,13,9,47,43,44,13,18,106,105,94,63,106,49,45,42,17,22,40,74,72,21,17,13,78,53,162,97,17,13,9,42,32,47,48,47,55,43,48,45,47,52,70,49,52,42,68,42,101,43,43,49,84,191,21,32,43,51,47,45,46,49,44,50,46,47,59,126,50,45,158,43,58,51,81,43,44,46,46,41,58,37,98,103,102,31,22,44,38,38,29,22,99,67,22,101,101,32,155,13,32,9,44,32,51,13,33,9,86,37,93,97,93,74,49,82,42,86,47,48,81,47,120,43,48,55,52,45,98,93,95,98,86,120,44,47,45,50,46,46,49,47,43,43,43,51,50,45,49,47,48,59,52,42,98,95,95,101,99,98,116,13,9,72,36,110,111,9,77,44,72,102,9,46,94,130,9,45,129,118,85,53,13,18,54,13,9,46,39,43,68,168,17,60,46,17,22,41,68,50,59,52,129,25,21,129,172,17,13,18,54,56,45,128,129,60,58,103,64,17,13,9,44,53,65,201,25,9,54,99,61,14,99,106,99,106,73,94,84,63,70,9,52,28,37,70,70,50,63,40,78,38,109,33,21,47,57,130,111,67,115,115,118,146,180,42,43,72,40,70,33,21,17,13,101,9,42,115,9,70,87,9,68,57,80,49,13,62,26,9,80,47,49,75,26,42,67,79,30,21,32,24,54,76,65,21,119,13,9,47,38,23,13,42,50,62,36,46,113,57,51,138,87,69,35,47,66,148,112,84,37,253,53,97,57,55,75,58,33,38,53,33,38,54,71,38,59,76,38,50,116,129,69,38,46,126,25,40,115,25,49,21,17,130,46,114,17,22,45,17,13,38,46,58,32,42,9,116,109,53,50,69,48,56,54,45,42,35,84,83,149,17,79,84,201,21,69,197,21,17,119,193,17,13,9,55,95,27,46,145,13,47,135,13,90,9,77,56,47,54,73,52,158,17,13,9,56,125,121,77,64,13,9,51,117,52,59,84,13,9,56,31,79,104,107,73,170,13,9,52,110,9,68,60,38,62,126,62,66,175,17,13,9,60,95,27,46,288,13,47,96,13,66,9,52,31,178,64,13,9,74,95,27,46,182,13,47,172,13,127,9,59,51,81,72,79,91,126,62,71,169,17,13,9,54,109,135,13,9,62,31,98,99,98,31,67,13,9,61,31,31,109,71,17,13,9,53,49,31,103,13,9,56,52,84,106,94,17,13,9,69,67,121,9,66,67,9,81,127,9,74,96,26,48,13,18,169,13,9,29,24,23,13,39,27,45,48,90,94,14,59,34,14,101,98,85,98,91,45,14,73,73,63,14,95,76,29,94,95,98,93,67,50,40,30,61,54,39,17,22,56,17,36,13,18,40,57,34,32,36,13,44,9,34,41,42,77,39,32,21,17,22,77,39,46,72,21,17,13,9,60,32,93,53,61,31,21,66,44,31,21,17,13,9,99,53,87,102,62,78,9,35,32,40,41,98,96,103,50,53,80,59,25,119,30,21,32,43,122,52,21,59,45,68,52,21,26,44,44,48,26,48,56,56,55,36,69,52,21,64,61,21,46,55,67,78,199,21,26,48,76,42,53,64,34,51,62,34,55,77,34,47,58,34,50,61,34,46,66,85,110,143,69,42,33,29,64,34,42,44,34,32,104,21,65,43,60,48,65,44,63,54,71,53,70,45,62,48,65,40,43,27,45,73,45,51,41,47,51,73,46,48,73,51,49,52,50,59,108,42,117,45,50,46,104,49,47,99,105,99,28,236,51,57,43,125,43,122,43,122,44,49,46,47,63,43,48,42,57,45,51,55,61,50,45,56,46,79,45,63,76,65,72,67,75,42,51,32,104,21,46,49,21,26,62,47,48,75,40,58,52,112,52,116,47,53,49,55,33,45,51,44,94,38,55,47,47,47,116,58,64,44,50,49,55,48,54,42,67,60,37,87,31,21,32,43,74,49,72,51,21,74,30,21,32,48,39,147,68,41,102,47,48,44,88,13,9,43,164,9,48,95,9,51,39,44,49,13,49,49,71,49,108,45,13,9,51,124,9,45,65,78,93,13,18,60,153,41,89,39,110,122,120,42,138,57,17,13,9,55,58,118,13,120,122,128,36,23,79,13,18,96,126,13,9,46,65,59,99,13,42,80,120,13,63,89,92,54,143,13,9,41,28,105,13,9,51,47,29,13,48,52,49,13,24,9,55,52,23,13,119,29,102,17,30,15,25,73,81,13,9,54,99,44,52,23,13,122,29,102,17,30,15,25,177,105,46,86,13,9,52,118,53,102,92,52,23,13,83,145,23,13,144,95,23,13,49,56,37,87,128,49,9,60,129,9,51,49,72,154,94,39,23,13,91,41,51,50,65,143,138,58,107,124,25,21,82,97,104,106,54,123,25,30,186,25,118,21,26,43,51,49,43,43,59,64,65,63,131,50,110,21,26,173,21,26,42,132,50,30,21,69,156,21,26,140,21,26,24,62,13,9,88,142,68,9,74,25,140,13,9,55,65,49,13,117,60,71,17,22,55,17,13,9,114,48,42,43,126,9,58,94,70,65,106,13,108,9,11,111,115,11,63,90,46,48,64,99,62,46,38,118,9,59,83,78,170,109,9,54,19,82,170,77,23,13,69,177,23,13,99,42,43,141,89,48,50,52,13,47,122,188,69,13,18,100,13,9,11,126,98,11,53,52,48,117,9,131,130,39,13,53,79,76,99,124,33,68,38,21,26,61,112,89,21,19,13,90,106,13,35,9,112,72,23,13,72,51,97,96,40,40,26,94,45,55,13,34,110,79,56,82,21,129,122,75,64,17,79,56,82,21,75,64,17,13,44,44,52,13,146,9,64,63,105,77,9,102,141,75,158,109,9,11,41,22,20,23,60,57,61,103,11,42,99,28,13,47,52,64,13,42,67,62,119,38,67,23,158,238,13,25,9,52,56,35,13,31,9,71,76,40,78,13,18,76,111,13,9,67,59,35,13,42,75,13,18,84,51,30,51,66,17,110,13,9,43,96,68,118,49,13,9,49,59,93,13,18,92,76,84,32,65,17,13,37,52,97,99,94,57,14,97,97,76,104,79,31,32,50,17,168,13,77,44,9,44,39,103,108,9,64,31,64,13,50,139,109,17,57,124,17,59,123,127,22,111,140,35,80,144,90,123,17,22,136,17,13,9,38,107,23,13,72,116,82,64,13,49,124,13,18,119,13,94,32,71,58,202,13,9,48,83,47,62,17,13,46,31,57,99,13,18,105,13,9,47,83,47,62,17,13,30,44,13,46,94,82,9,84,111,58,13,91,44,13,42,90,86,9,46,155,53,9,42,53,91,34,46,68,21,146,17,22,123,17,13,64,69,34,46,68,21,146,17,22,123,17,13,18,119,13,9,30,61,61,143,9,41,61,29,13,50,34,67,100,57,63,116,110,34,58,56,58,67,115,64,64,73,128,118,115,77,68,61,106,114,176,21,17,13,24,9,5,45,93,52,58,144,9,14,27,9,5,59,39,79,105,57,186,5,41,25,48,48,28,45,74,43,68,20,29,9,5,64,18,23,37,16,29,91,28,13,45,79,154,67,33,94,42,43,21,17,13,9,21,5,73,51,67,20,47,9,121,61,9,98,5,20,16,7,16,263,31,42,77,66,70,20,43,25,40,128,21,29,47,49,21,18,47,25,44,128,21,29,47,49,21,18,14,38,28,27,17,44,27,17,45,64,96,58,31,27,57,55,42,61,58,49,21,56,46,21,76,49,21,77,52,21,17,62,45,17,69,55,17,55,41,17,63,49,17,13,47,39,62,13,47,62,13,57,50,13,43,37,13,51,43,42,43,13,44,46,47,45,46,13,48,75,36,50,17,64,83,43,43,17,61,63,13,53,44,65,64,47,13,44,66,82,38,44,41,17,86,43,46,17,91,43,46,17,82,35,35,17,13,42,30,33,17,54,47,33,17,50,38,32,17,48,74,37,56,17,62,93,86,92,91,72,43,91,44,21,19,29,13,9,5,53,20,15,7,16,44,29,25,23,24,23,21,30,94,96,90,66,75,69,83,88,58,62,61,75,59,69,67,77,86,96,44,26,35,68,70,66,54,21,30,60,76,74,76,44,18,27,50,70,70,70,72,71,71,75,80,72,72,73,75,73,73,78,82,68,59,81,69,60,82,60,58,55,115,113,32,90,79,83,71,93,81,98,87,90,79,83,71,91,79,96,85,90,79,83,71,91,79,96,85,92,81,85,73,81,69,78,67,82,71,82,71,86,75,76,66,93,69,81,16,67,73,38,50,39,39,39,41,40,43,40,43,8,50,41,41,42,44,42,44,42,46,8,31,40,76,122,92,104,114,90,110,102,64,18,27,54,62,64,82,82,79,79,115,91,38,27,36,94,88,94,82,76,56,26,35,66,70,70,84,88,54,23,32,60,64,64,60,48,28,37,92,92,92,92,58,23,32,60,64,64,60,48,39,48,78,78,80,19,28,54,62,40,75,27,36,82,82,96,72,87,92,113,56,26,35,66,80,78,88,54,30,39,74,112,100,62,26,35,76,76,78,82,54,55,37,37,39,42,8,28,5,26,23,5,30,23,33,25,9,23,5,29,34,25,37,27,9,25,5,33,61,58,54,74,5,51,58,53,77,93,78,57,35,57,40,27,57,41,116,19,15,23,11,98,98,98,94,58,10,99,99,96,30,41,34,63,59,69,26,28,26,40,35,35,28,24,50,49,56,70,63,85,95,92,98,98,116,86,88,112,66,113,84,66,44,46,45,74,42,95,43,43,68,74,70,168,34,94,88,90,96,19,23,93,105,111,60,83,58,52,48,46,58,18,88,88,84,45,43,55,55,59,70,63,90,14,45,93,81,44,134,119,14,61,53,124,85,57,28,37,17,65,108,135,14,136,142,53,53,142,73,39,63,43,52,70,68,14,48,87,63,77,63,43,45,51,57,47,55,99,89,63,63,93,83,79,63,63,76,14,52,55,111,91,14,56,55,72,14,66,55,82,14,68,77,84,14,56,70,14,50,55,62,14,59,79,77,14,79,80,99,14,88,108,14,72,92,14,85,105,14,86,106,14,93,116,14,77,100,14,90,113,14,91,114,14,71,43,51,64,72,28,37,17,84,119,75,42,24,76,55,74,79,17,67,75,42,24,81,55,74,101,17,30,14,73,86,89,14,78,80,83,14,65,78,70,14,51,81,57,86,107,14,102,120,14,57,65,67,49,77,65,14,68,107,104,14,84,86,91,14,67,88,90,14,59,74,75,14,65,43,45,58,77,79,284,49,65,52,71,64,14,148,174,129,77,56,84,85,14,45,39,51,53,45,39,45,56,62,62,49,45,65,64,92,89,58,68,58,66,60,66,97,105,51,37,37,45,85,67,77,95,85,103,192,182,91,81,101,61,165,77,180,14,104,49,72,130,14,63,69,69,94,125,14,69,68,55,73,14,58,70,63,14,61,132,71,41,17,32,21,109,107,41,43,50,42,88,112,121,143,147,25,23,56,17,25,50,17,14,66,21,46,45,17,25,50,17,14,117,55,55,69,77,10,99,76,50,99,46,23,9,38,38,45,46,46,46,44,46,48,46,45,49,36,47,70,79,45,38,62,63,67,66,76,110,80,74,81,84,162,83,127,69,142,71,71,72,79,86,77,84,47,38,54,45,49,40,56,47,76,78,69,73,79,113,81,84,90,72,90,89,72,126,155,136,120,123,67,95,64,138,121,55,120,105,78,70,121,127,125,52,50,51,52,100,154,160,160,170,95,92,32,71,72,70,10,80,94,135,43,62,62,48,62,62,78,64,49,100,105,159,10,42,57,57,43,57,57,73,59,79,94,99,129,10,52,34,46,56,32,11,60,127,56,11,34,46,29,31,39,38,28,36,29,29,30,29,27,25,26,33,47,70,90,81,52,56,39,54,38,42,51,53,39,39,47,40,50,51,44,44,52,45,51,41,51,48,40,37,40,37,79,30,30,32,41,36,25,34,26,55,47,89,35,35,41,32,40,31,29,27,32,31,30,31,33,33,35,35,41,46,47,44,34,58,68,58,31,31,31,33,33,36,12,44,26,30,43,43,49,46,46,44,40,52,73,92,71,98,97,35,29,27,29,29,27,29,80,29,31,10,32,23,44,27,60,27,60,61,66,25,76,48,120,135,88,63,136,29,25,75,37,66,110,25,21,26,75,48,78,25,21,17,13,33,40,49,112,69,44,93,21,17,58,96,17,13,37,159,13,33,9,45,41,46,13,52,28,84,115,68,43,108,17,13,9,40,48,90,9,65,93,84,58,32,9,80,37,87,79,58,27,32,13,18,44,34,13,9,81,78,39,30,9,73,27,87,79,9,67,84,40,30,9,60,26,44,13,18,126,13,9,88,44,55,31,79,17,40,60,237,23,13,238,9,106,78,36,111,55,13,30,9,74,154,32,151,13,93,50,30,9,45,94,9,84,117,75,9,113,45,140,105,74,9,56,26,76,48,26,9,48,27,52,67,55,70,41,51,43,58,42,56,39,53,43,57,46,59,44,57,46,59,42,54,48,58,48,58,51,61,47,57,44,54,26,9,53,34,45,30,13,51,9,38,72,89,42,40,66,43,50,31,60,31,60,47,26,9,11,108,109,11,62,70,73,76,40,133,87,34,17,65,63,59,38,21,57,17,116,160,110,55,17,45,46,76,17,70,37,40,64,85,17,37,40,64,85,17,38,55,17,13,65,103,100,41,50,224,17,13,27,102,137,134,101,64,109,109,98,98,58,142,142,160,110,153,120,23,126,123,23,41,96,41,97,17,22,41,103,41,103,17,13,26,58,42,86,42,52,21,17,13,9,95,61,93,15,9,88,162,73,50,197,47,38,70,132,104,246,38,110,14,88,41,37,13,9,53,76,30,79,29,50,46,47,28,9,67,70,56,50,118,15,9,54,27,55,132,93,86,90,83,23,13,67,77,13,18,59,93,99,97,32,140,36,27,17,54,73,64,95,92,92,91,86,119,115,65,77,25,97,87,21,26,224,133,141,132,76,97,81,33,29,25,77,21,17,22,93,138,17,13,9,60,56,50,35,46,128,17,22,49,17,15,60,128,13,9,41,56,30,41,76,9,37,41,78,9,43,94,9,52,26,64,29,142,49,38,21,61,58,140,81,42,25,21,17,13,58,9,11,109,55,79,41,11,85,58,59,110,123,52,57,13,129,9,73,70,56,80,46,115,53,43,64,82,32,17,45,114,77,32,17,56,92,13,187,46,68,129,94,46,145,70,21,114,129,17,78,119,100,17,62,150,141,17,65,112,137,17,94,115,115,94,83,17,28,13,90,44,35,97,127,104,116,48,63,40,151,97,28,13,113,84,28,13,108,28,13,73,106,57,135,136,17,22,32,17,13,25,47,144,13,94,57,53,48,50,72,125,89,40,25,30,17,84,60,133,13,77,68,52,38,21,53,36,21,68,59,21,99,46,96,52,62,87,48,33,147,68,104,97,131,149,56,41,37,33,29,34,148,140,48,33,29,25,21,33,19,13,115,121,61,50,33,17,89,108,93,47,38,21,40,53,40,59,116,66,108,151,48,45,55,59,65,59,48,40,49,29,32,41,21,19,68,13,9,83,65,44,44,40,42,75,78,143,55,49,48,68,47,63,77,133,21,65,17,13,25,48,59,89,13,54,36,49,54,55,47,52,37,53,47,47,54,68,55,85,57,88,25,68,28,98,85,59,25,121,59,25,48,41,89,17,13,9,11,123,121,39,10,97,11,131,70,83,149,9,146,27,149,23,29,42,47,75,46,41,28,43,36,114,71,74,45,108,88,135,115,82,111,87,125,85,121,71,84,92,89,85,88,44,29,76,122,103,54,33,89,119,139,113,105,47,84,78,108,33,29,25,79,113,71,75,25,40,39,25,30,47,25,21,17,110,40,46,69,34,50,36,53,143,192,118,67,86,92,114,47,33,51,29,100,107,132,61,121,122,122,86,114,119,72,71,47,77,169,38,29,25,134,143,195,51,29,34,43,29,25,30,51,182,39,25,30,55,66,107,105,117,105,84,53,83,54,94,116,78,33,29,25,30,52,51,56,147,147,128,132,94,88,51,38,29,76,74,120,125,123,49,29,39,25,102,58,78,57,43,29,25,30,63,104,120,67,152,58,135,33,49,29,25,30,116,57,22,56,73,102,26,22,56,61,113,98,123,153,49,29,25,30,49,100,97,88,34,25,36,53,47,47,47,55,81,53,39,25,30,54,81,53,39,25,58,61,84,57,43,29,25,30,45,103,85,26,44,38,134,30,26,94,55,25,26,44,38,131,30,26,129,26,45,59,104,42,141,55,25,30,51,52,48,96,61,35,51,25,30,45,85,99,94,102,29,25,30,50,85,99,133,102,29,25,30,45,67,76,86,71,43,29,25,30,17,56,57,17,40,135,147,40,13,127,191,148,113,47,13,26,35,80,124,51,21,17,38,60,17,13,26,101,112,45,21,17,13,26,64,41,111,87,104,97,100,111,100,48,97,113,269,71,55,29,45,80,132,209,105,91,126,81,66,175,33,29,25,42,42,85,42,108,33,38,103,33,29,25,42,21,17,33,13,73,60,146,126,128,101,75,224,37,17,108,45,36,48,48,29,53,87,84,83,52,36,61,141,93,174,93,21,17,120,159,57,201,242,21,17,176,174,80,113,119,116,190,21,82,255,257,21,17,206,82,46,92,115,116,80,140,21,17,13,26,9,100,37,34,245,9,63,110,133,98,237,13,65,29,13,111,95,28,13,73,9,48,32,51,48,52,47,52,77,32,24,33,13,9,42,119,9,78,38,82,38,64,117,51,148,25,21,17,13,25,9,84,164,29,13,96,37,30,54,71,39,30,21,62,71,67,169,36,21,51,100,75,107,68,149,40,25,21,17,43,13,25,9,74,79,105,136,28,13,25,9,11,91,83,11,59,32,41,56,101,59,69,47,21,32,24,37,13,9,91,114,47,191,50,29,53,142,64,100,39,260,40,25,21,157,32,17,13,25,9,87,72,193,71,170,32,17,13,25,9,44,140,9,84,103,129,28,13,25,9,87,79,48,153,32,17,193,77,70,63,227,21,70,185,21,26,129,21,32,17,13,25,9,48,71,125,15,62,59,144,13,25,9,52,24,31,30,27,31,27,31,32,13,25,9,98,100,202,29,128,32,17,13,105,227,29,127,32,17,13,25,9,74,19,142,147,60,23,13,76,218,42,113,130,47,103,65,146,17,57,130,17,64,129,17,22,76,71,133,21,17,40,151,17,13,9,96,80,59,88,11,67,92,129,9,43,32,55,32,44,39,47,46,47,53,24,37,13,9,54,101,9,11,75,32,35,40,44,44,43,42,48,50,25,41,36,11,49,66,69,70,58,58,58,58,95,149,46,57,48,78,67,70,108,84,9,47,99,9,77,73,41,106,67,137,32,13,116,170,72,110,34,13,112,87,28,9,93,150,93,86,38,119,120,45,57,58,95,143,13,9,88,85,132,73,113,28,9,43,157,9,51,128,9,86,95,9,49,61,101,9,87,69,50,109,67,34,17,92,13,48,29,13,54,50,111,238,107,33,17,151,42,143,144,86,33,17,146,147,122,28,13,160,43,63,13,162,174,9,66,19,92,31,49,70,55,17,22,125,17,122,90,133,86,66,137,104,83,172,47,240,25,21,26,67,21,17,65,127,144,118,36,17,138,43,13,9,61,27,115,183,13,18,127,134,33,133,35,89,216,23,40,158,21,17,13,9,69,69,77,125,104,28,9,69,62,96,144,104,28,9,103,72,10,38,34,31,31,18,14,36,69,14,40,35,14,10,110,67,70,80,37,13,81,35,13,101,133,68,45,71,35,64,36,65,26,9,79,51,84,77,116,32,13,9,54,50,66,37,103,17,13,9,77,23,74,100,98,109,41,33,13,178,134,31,39,74,44,21,52,119,121,156,21,26,99,21,77,93,110,105,130,153,156,25,21,116,90,63,34,83,79,100,55,76,167,62,171,29,25,30,131,167,29,34,111,29,25,21,34,17,13,9,97,23,183,47,30,135,43,162,115,17,22,175,196,132,51,141,161,36,21,17,13,18,107,13,9,97,53,137,125,54,13,18,42,168,156,58,17,22,163,160,87,17,13,9,69,107,73,107,54,78,119,13,124,28,9,50,120,40,13,9,80,93,124,28,9,78,63,85,117,124,28,9,70,88,88,124,28,9,79,51,64,13,89,33,13,162,28,33,13,46,59,9,78,46,86,9,76,144,33,13,93,9,76,86,32,55,51,92,44,81,47,84,47,84,47,46,84,47,147,48,48,85,58,95,59,166,50,87,55,56,85,24,43,13,9,11,92,80,11,52,114,24,29,179,9,58,96,9,39,103,47,32,47,63,26,43,63,55,59,17,22,110,17,13,56,45,13,32,9,42,47,51,44,13,29,9,11,85,82,97,93,10,98,99,99,36,10,80,96,91,112,115,111,113,107,11,121,85,29,74,52,65,75,59,63,28,13,53,103,100,9,110,27,159,178,135,209,13,63,9,103,54,56,33,13,47,58,9,47,47,46,25,59,143,32,56,17,13,9,131,131,116,54,47,36,40,63,26,43,109,113,28,71,55,88,48,68,21,17,13,9,105,106,57,47,45,49,13,9,62,93,90,52,14,47,62,51,119,47,13,58,112,117,13,18,42,83,94,158,13,9,68,252,9,55,53,35,13,24,9,51,51,114,26,33,13,53,51,80,30,37,17,35,13,26,9,11,62,11,93,41,33,13,115,23,52,196,167,189,30,66,17,13,113,95,91,126,60,37,17,55,37,17,49,64,75,61,80,89,86,36,90,51,61,25,21,17,111,30,40,77,80,118,61,186,45,25,119,129,60,54,85,83,47,199,45,25,96,149,53,295,49,29,25,122,21,37,17,13,18,78,13,134,162,153,13,96,9,11,130,118,45,117,11,76,52,86,40,142,17,13,9,57,176,28,23,13,45,110,104,67,29,72,17,13,153,104,63,29,72,17,13,92,60,92,97,70,29,72,17,13,53,48,50,57,13,9,63,54,24,33,13,105,96,30,39,9,11,76,10,98,96,11,43,47,156,33,13,136,23,55,33,62,17,13,9,95,112,42,145,93,129,9,127,76,68,148,28,9,118,43,76,60,113,86,77,13,98,32,37,13,69,67,26,125,137,168,137,250,148,188,96,117,43,131,71,29,104,43,109,17,40,128,112,21,197,216,100,237,25,148,117,25,21,97,62,17,42,61,97,17,33,13,40,130,30,108,111,111,34,131,39,61,21,59,17,13,76,253,40,152,93,17,22,141,17,147,33,13,38,71,37,101,35,152,41,21,17,43,109,17,22,80,132,95,109,82,38,124,108,80,27,103,84,27,65,146,25,82,21,66,82,110,71,165,21,126,135,89,70,78,71,43,226,25,30,227,25,21,26,79,21,17,13,29,9,84,81,90,52,49,322,57,53,208,53,232,28,216,9,50,77,9,51,55,9,78,99,123,117,65,13,29,9,66,162,32,13,49,40,45,13,102,64,47,56,13,61,58,27,114,15,60,50,9,119,116,125,115,85,46,162,79,56,44,215,34,17,65,115,55,134,55,113,42,95,21,65,85,52,90,25,148,122,94,25,21,17,13,26,9,11,97,11,77,72,89,42,35,55,40,66,43,50,31,60,31,60,140,143,26,9,58,88,9,58,68,9,64,66,73,48,57,75,68,17,13,27,9,69,59,52,49,36,17,15,73,48,57,75,80,48,23,17,13,9,72,63,30,51,13,9,85,79,25,30,13,73,48,33,13,53,122,9,93,81,80,97,58,57,9,45,154,79,51,9,51,53,109,9,11,157,107,11,79,24,23,56,51,27,50,36,49,52,45,87,27,21,17,132,63,65,77,21,26,79,21,17,15,9,57,36,96,69,55,125,96,36,93,27,17,57,94,82,34,63,53,51,95,46,103,72,101,25,21,61,75,142,124,35,25,131,66,271,25,23,64,17,31,13,9,42,23,106,9,40,83,9,44,87,9,80,78,47,47,24,103,31,13,59,99,85,43,56,146,123,40,33,83,29,33,65,17,41,121,35,17,13,43,48,13,138,51,89,44,47,29,48,68,25,29,50,13,71,9,11,99,76,11,79,54,91,76,126,127,103,43,73,126,226,17,156,129,94,58,85,53,84,64,138,41,29,27,35,229,61,59,27,13,78,115,53,17,232,128,74,21,68,81,17,15,41,33,13,151,69,97,13,9,73,142,141,144,94,126,182,61,17,13,9,79,59,116,102,9,66,58,83,30,13,115,63,104,81,33,13,56,56,67,29,13,65,65,36,17,15,9,11,90,11,51,126,26,13,9,65,126,9,40,186,9,51,39,80,43,93,34,17,13,9,36,50,24,34,75,102,13,26,9,42,44,9,72,60,40,47,43,24,9,56,55,43,33,37,40,44,49,40,24,9,37,90,9,46,62,23,37,24,9,111,94,111,94,45,55,52,52,53,53,9,43,23,51,48,59,17,15,43,9,53,79,9,59,50,63,68,9,107,32,39,48,53,63,45,139,41,63,28,9,104,148,9,74,54,28,66,73,146,65,28,180,73,77,28,9,76,23,47,114,71,134,49,21,17,40,46,71,34,25,36,53,60,141,151,49,194,53,25,30,52,51,56,111,108,125,79,147,147,128,36,82,114,104,103,29,27,144,53,25,30,17,14,93,48,48,41,13,100,9,56,104,99,9,131,93,76,33,13,47,100,129,134,157,33,38,13,41,69,39,73,13,114,35,26,15,175,15,111,69,37,17,93,42,30,13,71,112,99,134,182,13,100,178,166,91,99,113,111,13,86,82,124,36,17,65,88,73,93,88,166,102,144,199,135,125,75,129,89,134,40,45,25,21,121,144,44,25,21,19,146,152,13,116,103,51,17,124,73,80,155,128,88,17,13,9,76,32,84,88,97,45,56,33,17,88,55,41,32,17,87,232,60,35,32,17,52,29,15,27,9,62,68,82,45,47,59,57,51,51,37,32,41,21,17,28,13,25,9,75,171,63,9,76,172,63,9,85,160,63,9,144,36,23,35,40,66,36,69,143,44,48,136,52,57,21,17,35,101,64,51,129,127,133,131,37,25,99,32,61,26,21,17,112,75,24,29,39,24,20,38,103,78,121,120,94,226,35,40,17,13,34,24,53,18,13,37,24,57,98,167,18,13,9,11,138,10,56,80,92,155,11,111,141,9,131,49,149,29,34,17,85,119,103,43,99,75,82,32,65,99,82,110,26,21,17,59,24,57,91,18,13,57,9,58,77,49,9,55,144,9,76,158,9,82,37,142,33,13,101,59,27,57,84,98,74,42,116,71,77,21,122,127,81,87,21,111,80,70,73,21,262,78,182,108,155,98,101,21,49,33,17,28,13,70,113,134,70,54,63,102,17,28,13,9,72,67,24,65,90,76,31,73,13,125,79,67,56,47,13,18,66,44,13,68,177,101,61,13,49,108,53,67,42,14,9,87,71,56,58,63,13,65,74,13,69,76,13,59,69,13,125,122,51,105,52,273,102,98,30,13,9,90,59,128,54,30,68,112,17,22,116,17,218,102,102,153,30,13,9,74,133,72,97,191,39,67,116,55,70,52,98,96,42,126,68,74,13,26,9,59,152,157,39,59,61,13,39,9,51,106,9,67,147,9,44,59,64,9,44,247,9,38,20,87,145,18,114,196,18,115,173,18,102,177,18,102,154,18,108,168,18,103,155,18,104,156,18,123,175,18,14,76,27,128,31,63,49,128,189,173,100,86,172,106,72,132,146,98,104,124,40,44,46,44,43,51,40,18,96,48,81,161,17,76,13,76,57,786,38,71,53,25,72,37,62,25,38,26,57,34,38,21,41,38,71,53,25,58,58,23,17,13,53,39,46,190,13,58,90,69,17,76,60,28,88,56,59,21,51,82,17,73,48,17,47,43,158,21,50,163,21,51,142,17,51,86,17,50,51,85,17,50,51,85,17,51,51,85,17,73,51,86,17,97,70,96,73,42,21,64,71,142,21,58,106,160,21,66,201,21,26,107,21,17,55,85,17,59,73,226,17,59,43,69,215,17,60,98,106,17,60,75,144,17,61,83,97,59,94,25,82,82,25,21,52,145,17,52,51,83,17,57,51,88,17,52,51,85,17,54,51,84,17,55,51,85,17,63,51,85,17,51,76,115,60,25,74,74,25,21,51,59,17,197,93,121,118,109,17,58,54,74,124,17,104,116,93,149,21,85,66,93,70,76,141,21,119,38,83,124,17,70,39,17,86,109,49,71,21,88,60,159,21,26,121,60,25,59,21,17,75,74,58,57,17,55,48,51,83,100,17,67,45,45,81,296,51,93,17,65,76,97,17,63,88,86,51,97,17,62,116,17,63,72,17,63,58,86,78,80,90,74,112,114,52,125,17,67,35,59,119,91,64,178,29,79,25,124,21,63,17,61,74,145,145,54,75,58,178,183,21,26,125,21,163,142,189,177,52,79,17,56,27,41,45,33,112,71,118,85,25,92,62,66,186,86,64,85,25,115,116,77,44,100,95,29,34,83,29,25,30,93,25,21,26,79,66,21,64,31,114,118,94,76,88,145,36,79,84,225,253,25,21,17,65,31,41,144,116,99,103,42,117,115,48,60,21,53,59,21,107,84,32,88,21,163,39,54,54,25,78,66,21,30,29,65,41,79,25,63,21,53,64,49,78,83,49,53,25,57,156,21,56,29,59,21,34,57,96,40,25,152,21,17,61,74,66,21,70,85,102,59,128,25,107,71,130,49,25,107,76,133,49,25,21,158,54,93,92,79,95,56,108,78,91,131,64,99,107,65,47,106,100,25,89,21,51,71,76,47,84,51,132,43,17,56,63,101,78,99,151,25,90,84,149,21,71,168,55,68,111,56,77,92,80,483,70,37,33,38,109,80,66,211,136,77,37,33,143,154,29,25,105,120,150,25,56,59,21,92,55,71,94,61,21,26,82,34,48,50,70,50,118,46,100,36,40,124,118,94,100,115,64,98,118,60,108,33,29,25,55,55,106,116,25,50,86,116,46,100,21,17,59,52,53,63,55,40,61,98,29,34,163,29,25,58,47,54,80,47,103,25,125,21,26,53,63,53,56,92,25,30,155,25,58,47,54,80,47,84,25,97,21,17,46,45,33,53,49,43,21,39,31,17,72,57,149,21,42,94,47,126,21,99,47,63,37,131,21,90,42,212,21,61,38,44,21,30,97,62,28,91,81,41,29,188,144,29,25,96,207,111,34,25,88,21,74,17,13,66,47,62,127,17,78,13,79,23,106,132,108,109,107,61,86,79,106,125,13,86,27,110,93,72,76,57,151,54,73,56,62,73,149,114,33,29,34,107,29,25,21,124,102,21,17,190,89,72,88,144,173,158,97,57,187,81,21,17,22,50,83,87,21,26,54,92,76,25,208,54,61,25,21,135,36,55,21,137,77,17,51,27,127,176,78,42,215,25,21,63,69,82,21,32,17,13,65,37,57,42,108,25,52,36,72,142,86,30,25,21,98,118,109,38,30,82,47,28,91,153,100,45,58,29,34,25,93,75,39,52,86,106,29,25,21,36,89,84,92,91,89,73,64,61,72,60,81,46,46,67,33,94,92,96,33,29,27,57,21,36,17,13,50,30,58,74,13,95,69,87,78,42,41,52,62,43,32,88,17,98,52,17,63,55,161,13,95,35,82,32,103,136,35,34,152,182,17,22,175,17,102,108,501,87,36,54,17,35,75,36,138,74,34,135,131,56,107,114,17,22,73,80,259,21,44,96,21,17,100,97,63,104,17,138,141,359,398,175,331,319,178,151,290,311,410,394,256,99,36,83,17,28,13,73,46,90,17,44,76,60,69,52,51,64,131,21,17,13,94,54,159,62,73,111,50,109,13,76,95,93,95,13,138,105,86,113,17,69,99,67,17,221,94,17,177,239,159,106,77,175,189,73,52,51,168,108,74,109,43,87,37,49,65,68,121,102,25,186,59,139,55,25,61,68,25,109,21,17,13,89,49,27,71,78,212,27,96,17,13,85,109,92,13,91,121,26,80,185,104,63,17,22,37,17,29,126,70,175,41,49,182,52,160,51,80,113,82,48,31,87,57,99,114,65,129,50,109,125,140,94,76,46,37,162,42,33,29,25,21,48,53,21,24,128,33,83,96,123,147,35,25,40,21,51,61,61,55,76,80,94,145,29,46,77,42,29,73,37,25,33,21,17,13,81,39,59,106,204,17,42,13,70,23,77,42,51,115,37,17,116,39,113,46,56,80,159,149,21,26,104,21,17,42,13,15,43,15,55,65,71,17,27,13,67,23,81,28,168,47,99,21,17,60,58,43,17,28,71,94,54,87,50,91,29,25,21,76,94,21,17,91,129,76,94,21,205,17,107,51,99,33,67,129,133,134,43,80,182,310,119,74,17,33,13,53,112,134,13,88,220,62,99,64,126,114,83,221,142,118,56,84,93,25,21,106,82,92,97,73,43,107,61,25,112,21,26,82,70,170,21,17,89,61,80,17,31,70,17,22,93,60,53,88,17,77,148,46,50,35,38,76,79,94,76,21,26,67,71,76,142,85,48,33,31,25,21,38,79,21,71,100,107,111,55,89,62,157,25,30,213,25,21,146,47,42,89,52,126,25,79,21,38,17,13,82,164,29,94,37,21,32,17,29,13,57,27,111,81,33,38,21,17,111,59,83,17,81,53,141,39,177,28,65,21,43,89,21,135,66,150,125,121,17,30,13,80,72,59,48,94,52,17,80,72,93,46,38,76,21,79,38,76,21,146,47,146,17,13,67,72,80,72,93,46,38,76,21,79,38,76,21,61,140,108,21,76,114,73,62,150,51,161,21,26,65,88,65,25,48,106,193,25,69,86,25,42,150,55,25,135,21,17,13,39,54,58,13,51,54,184,13,68,127,106,35,40,17,80,115,147,13,72,93,63,31,75,55,132,87,25,88,113,25,126,21,69,135,21,17,13,55,52,109,116,121,123,94,30,36,49,49,60,49,55,49,88,17,55,100,17,54,98,17,96,31,13,85,244,13,113,199,13,15,104,111,15,126,65,116,174,63,101,163,119,43,48,29,25,21,17,45,61,221,75,17,65,41,30,13,111,73,115,131,72,175,152,119,41,46,29,25,21,17,59,13,83,27,44,59,272,43,76,17,124,26,182,47,21,26,210,126,21,48,64,210,101,155,21,17,72,13,98,90,69,17,37,60,87,31,37,17,122,61,91,95,86,21,54,90,21,55,178,21,55,181,21,58,85,21,55,117,21,54,109,87,117,208,70,371,28,21,125,112,21,133,97,54,92,58,57,67,199,21,55,65,46,354,54,200,190,25,30,222,54,200,173,25,21,332,114,21,59,75,49,41,29,82,90,101,160,118,25,282,21,83,150,63,46,42,25,21,176,66,21,111,67,156,21,116,73,106,75,54,21,66,38,88,94,49,127,56,83,142,151,38,109,83,33,29,25,30,111,125,48,105,33,29,25,35,21,17,13,88,171,269,130,38,110,128,54,72,33,50,47,41,253,116,88,118,91,70,67,33,29,92,90,29,41,32,96,70,71,140,19,45,81,103,57,145,80,17,46,57,60,71,17,59,60,143,21,104,17,69,86,83,78,84,164,63,164,166,145,45,43,55,274,58,57,278,75,175,25,163,115,41,170,114,204,70,168,31,179,25,21,38,17,62,67,187,49,158,124,54,53,180,68,21,94,190,51,167,65,62,57,131,164,75,66,65,219,46,33,30,93,59,49,29,25,21,38,17,60,90,207,37,59,105,50,155,71,139,161,134,78,101,37,53,33,29,37,27,55,81,70,25,30,94,286,25,21,38,17,63,76,69,67,174,56,47,171,159,75,21,38,17,54,56,55,57,54,138,58,48,17,50,105,67,17,53,85,67,17,100,53,65,21,59,88,23,53,90,110,76,107,91,27,52,21,17,78,121,94,61,70,50,21,64,148,140,216,49,67,95,57,133,25,45,38,21,17,152,54,122,65,67,62,92,112,97,84,31,87,83,158,155,56,64,158,21,126,233,149,233,75,41,21,139,81,123,76,171,129,149,21,64,78,21,114,126,120,78,68,59,75,46,86,48,63,63,29,25,30,63,86,131,183,106,29,34,219,157,101,77,54,153,154,144,72,33,163,167,168,158,81,62,61,180,127,33,38,170,219,59,127,75,143,104,46,58,63,46,143,65,46,58,68,46,139,77,80,46,58,63,63,46,109,85,66,65,183,71,71,37,33,29,25,21,56,73,21,56,59,54,84,92,147,159,156,111,25,30,111,25,21,201,75,21,102,96,78,21,61,107,21,113,62,21,66,69,94,50,94,50,107,52,45,279,29,25,21,49,236,21,54,69,50,49,205,21,17,55,80,31,102,133,143,143,138,145,107,134,78,54,114,23,139,17,65,172,123,17,144,67,52,60,84,166,71,149,58,155,63,25,84,115,188,162,64,25,178,66,25,47,123,25,21,39,17,80,27,71,75,125,134,149,49,63,72,66,82,82,128,68,406,45,68,17,80,82,98,126,64,101,156,125,140,92,240,68,46,288,17,70,118,17,54,154,17,77,78,164,144,79,83,160,165,69,49,82,163,21,51,100,82,102,54,53,207,43,88,79,97,227,211,53,33,130,66,151,146,35,69,50,132,21,17,75,63,321,54,129,128,83,171,149,117,83,40,17,100,77,97,51,90,237,108,21,101,142,92,125,21,17,67,80,168,64,25,94,124,71,25,21,49,17,118,43,87,103,122,52,27,88,143,140,35,64,48,54,46,54,28,151,119,149,151,66,42,104,229,70,71,59,49,37,61,46,110,49,45,211,128,45,57,51,45,67,205,50,49,211,214,195,104,21,17,47,108,196,17,59,70,31,72,57,48,62,82,183,29,57,150,50,69,29,25,128,103,89,29,50,72,42,25,23,59,38,21,37,17,77,31,127,68,80,98,126,78,60,110,113,98,61,174,48,67,34,397,119,81,82,83,45,59,124,23,82,82,83,45,59,121,23,74,66,62,54,101,70,48,57,38,168,145,312,132,124,128,73,52,65,85,76,179,114,92,64,80,46,434,17,74,71,81,71,25,83,95,76,66,29,25,58,149,66,64,55,29,25,41,23,17,77,43,78,64,89,67,30,47,117,34,31,21,146,146,198,170,128,69,21,87,124,40,54,188,74,123,69,77,58,193,261,75,38,29,92,207,34,67,185,65,120,29,34,59,71,82,59,85,94,119,60,83,58,57,168,50,83,58,57,172,38,29,89,63,125,118,139,70,38,29,81,83,123,79,54,53,103,112,201,34,66,54,87,113,119,34,52,73,54,175,156,123,94,123,71,34,55,73,54,286,71,34,55,73,54,53,217,34,55,73,54,83,50,87,65,189,128,71,34,55,131,61,79,131,43,258,34,56,66,34,56,64,63,116,85,63,136,70,29,34,80,29,34,32,126,21,17,85,65,46,45,219,17,19,100,19,64,65,37,21,81,79,69,93,46,102,114,95,97,118,135,200,137,82,129,224,133,171,51,71,25,110,117,119,119,102,67,84,69,75,54,127,25,30,62,73,83,29,74,117,29,34,97,74,83,58,57,187,72,29,25,63,36,21,26,73,66,128,113,103,99,143,168,25,30,146,225,47,136,77,163,67,52,25,69,75,54,108,40,25,52,68,40,25,37,21,17,99,115,120,130,86,105,75,203,173,173,94,163,130,186,152,17,96,84,47,88,76,119,142,66,38,25,64,83,119,151,126,38,25,105,76,271,77,44,68,100,154,62,61,73,205,167,29,68,82,100,259,167,29,42,25,108,113,106,66,393,109,101,210,25,80,58,85,57,70,259,52,245,29,47,105,59,96,108,47,146,115,35,166,80,29,45,25,140,112,22,17,75,102,17,81,70,53,120,121,25,39,159,92,135,140,29,72,51,75,200,54,46,37,33,46,123,33,29,25,49,101,53,48,142,29,25,47,92,121,51,81,25,21,37,97,51,93,99,77,21,35,17,68,37,93,42,39,86,43,82,81,33,29,25,120,21,35,17,69,81,30,35,21,79,138,145,39,55,135,17,64,33,34,127,93,110,122,100,21,108,93,21,36,97,21,17,54,80,30,35,21,35,158,21,17,55,31,70,29,66,71,25,21,33,70,21,30,41,111,28,67,21,102,29,67,21,33,17,68,148,50,76,86,46,166,21,64,47,21,74,47,21,188,37,17,67,49,62,67,21,74,136,67,37,17,13,9,92,93,136,58,626,18,73,102,101,30,13,9,42,28,26,52,33,33,56,88,122,67,62,172,54,47,41,29,25,21,35,17,13,41,38,46,43,35,9,44,44,33,13,47,35,13,28,9,51,104,91,67,49,17,13,29,9,63,41,61,68,9,52,90,9,63,59,27,71,51,128,94,21,84,53,21,32,17,65,95,17,13,9,11,51,110,10,102,122,11,60,145,91,73,117,43,119,197,33,13,68,186,81,44,113,53,21,109,71,91,144,86,55,46,29,25,21,62,17,35,110,17,102,79,17,43,51,54,49,127,60,25,125,17,13,68,69,9,45,23,47,52,74,17,39,13,25,56,36,52,51,48,79,174,144,50,72,55,61,57,104,41,25,36,53,52,56,56,55,51,59,73,68,40,25,67,118,84,161,62,25,131,60,55,53,47,47,53,51,98,83,41,25,92,36,47,54,49,50,45,47,48,51,47,49,45,45,45,52,53,52,65,88,69,48,51,51,37,57,49,74,36,46,62,36,88,52,37,28,37,17,13,9,60,29,81,210,13,70,156,13,23,24,31,39,55,64,13,26,57,65,84,40,67,21,26,46,60,21,82,67,82,93,199,54,85,80,29,25,21,19,13,9,11,116,115,118,121,118,40,10,83,101,11,59,96,49,36,56,76,49,17,29,13,43,51,55,24,9,70,69,80,30,17,101,29,17,13,22,9,48,35,34,57,41,69,42,65,57,64,48,55,53,60,51,58,47,54,13,54,9,11,116,90,11,38,36,42,43,9,48,81,36,55,59,51,48,51,48,37,28,36,17,22,9,56,52,93,137,103,82,157,9,107,54,53,60,9,64,19,169,9,34,60,9,36,119,95,90,9,108,41,66,47,104,13,47,141,9,58,100,52,39,13,53,100,13,95,42,44,86,34,121,77,113,52,52,17,22,73,17,13,81,52,82,83,90,107,17,61,34,17,58,37,37,17,87,13,49,119,54,89,13,121,63,26,9,61,153,9,44,209,80,9,115,47,48,48,61,52,44,108,82,65,60,94,9,50,60,56,66,31,107,157,124,50,47,51,54,21,60,34,17,13,9,47,46,36,46,50,63,54,66,51,48,48,42,13,9,53,37,107,82,13,116,61,13,54,9,51,60,114,9,61,56,102,98,94,9,79,89,40,34,13,45,139,122,60,13,146,165,84,13,21,66,49,60,95,108,41,21,44,83,45,54,86,25,21,87,17,22,123,76,73,118,81,17,13,18,108,108,76,192,68,49,94,109,55,63,98,53,17,55,66,133,138,81,17,22,39,17,13,43,28,13,102,112,49,177,13,183,9,69,57,28,54,13,29,9,42,85,139,9,44,85,96,9,63,62,61,93,9,86,96,104,65,119,153,139,13,119,100,87,103,82,63,76,13,58,61,13,106,96,120,61,62,76,31,76,13,64,98,127,87,113,70,154,36,17,116,39,94,41,17,13,46,46,104,83,117,33,82,75,77,61,65,82,25,73,21,17,49,78,31,38,17,68,168,27,82,17,13,98,63,92,81,161,46,51,21,17,126,68,13,105,126,142,57,85,104,136,38,89,17,22,111,114,136,38,89,17,13,49,119,70,32,13,102,74,56,122,13,60,29,9,56,124,126,35,92,51,72,64,149,68,73,164,132,23,17,59,13,25,9,46,111,48,54,125,90,9,50,39,23,13,78,41,98,108,37,17,13,13,9,96,56,70,79,187,47,193,112,38,84,13,58,42,50,78,9,66,69,86,68,95,53,111,62,53,64,72,93,149,17,83,58,29,17,50,13,9,64,69,86,68,107,58,49,60,68,89,145,13,79,96,9,57,97,120,53,33,76,9,81,130,86,28,56,48,67,17,138,102,13,21,45,40,124,98,56,89,13,24,35,42,43,86,49,129,143,42,42,179,25,68,87,74,148,73,60,29,34,55,29,25,63,125,25,41,229,25,21,37,17,28,44,78,21,170,131,42,76,39,89,56,25,21,171,70,17,13,127,141,68,31,13,27,9,63,23,113,33,13,49,88,48,128,59,17,86,13,42,118,53,13,105,53,24,9,106,19,80,27,73,36,32,17,118,140,17,13,96,99,33,114,43,75,21,17,13,32,9,90,104,50,37,181,17,83,80,32,37,17,76,30,65,33,64,21,17,76,30,65,33,74,21,17,31,13,83,31,13,137,51,49,70,70,55,64,49,64,68,17,79,27,61,65,104,129,131,46,30,60,52,30,136,130,101,194,97,213,236,236,29,91,109,85,109,55,25,30,80,25,21,26,47,21,19,192,115,115,137,170,17,30,13,48,60,36,13,24,9,74,62,73,121,9,57,97,135,88,66,71,129,9,80,66,49,50,83,95,76,15,9,118,119,50,89,38,119,120,27,182,151,13,52,99,13,85,52,13,113,113,113,105,73,9,63,95,49,32,98,55,52,39,97,27,17,68,60,77,88,27,17,61,93,55,95,42,56,15,148,46,39,41,80,13,26,9,62,94,44,59,147,80,102,13,177,178,165,69,39,52,41,80,13,26,9,118,120,120,118,119,120,25,89,82,66,66,94,94,9,126,129,47,10,42,10,127,124,122,86,175,9,50,47,94,69,9,87,23,172,104,67,17,35,64,17,107,168,40,17,44,13,90,102,105,31,77,57,17,13,24,9,72,58,91,61,9,63,74,27,53,13,9,65,47,30,80,92,92,41,34,38,17,13,30,9,71,40,57,58,13,63,43,31,13,90,98,71,101,39,43,48,74,39,68,39,68,53,47,105,13,44,62,54,83,78,45,78,17,53,76,88,13,48,83,53,43,17,116,13,53,60,173,106,64,17,54,13,21,66,167,13,58,46,210,70,13,63,60,47,54,51,53,56,98,52,50,173,135,64,17,66,68,76,13,60,108,13,54,102,13,69,139,13,61,125,13,48,56,54,56,51,60,106,13,123,66,57,60,13,52,51,13,50,131,13,18,157,13,39,173,106,64,17,54,13,24,9,57,27,62,87,48,17,22,102,48,17,13,29,9,53,62,53,9,62,63,49,9,56,84,9,45,47,150,9,47,47,109,9,60,56,60,33,13,63,39,31,36,88,232,17,13,24,9,58,56,80,80,78,26,68,35,73,17,13,44,50,78,32,70,17,13,82,62,29,67,13,102,62,29,34,13,111,40,71,75,13,45,25,54,195,17,31,13,30,139,54,192,17,31,13,29,60,70,55,63,17,28,13,9,53,111,97,176,30,9,55,47,38,30,129,30,65,33,84,48,21,17,93,13,30,9,61,54,96,31,13,87,53,78,70,13,146,73,48,68,41,21,105,148,47,62,21,34,17,13,68,48,74,95,13,18,113,13,9,46,47,84,9,41,47,30,56,150,238,100,99,61,98,83,249,80,53,101,44,13,30,9,54,47,30,64,50,17,88,43,58,17,34,13,30,9,49,54,99,65,154,33,13,95,105,221,13,98,102,95,27,9,58,47,30,63,69,171,13,30,9,63,47,70,63,69,186,13,35,9,11,88,86,88,85,85,61,11,47,54,56,77,32,37,17,13,58,49,32,37,17,13,54,9,53,54,56,27,32,17,13,43,9,42,54,56,63,13,52,59,13,51,53,13,56,60,13,71,70,13,131,60,13,52,51,13,54,50,13,53,46,13,29,9,52,106,9,50,37,39,70,42,9,38,84,9,117,47,31,34,95,53,88,17,67,54,17,29,13,9,129,125,47,69,95,53,129,13,34,9,108,65,26,87,58,104,79,111,64,143,66,25,21,17,28,37,17,36,52,51,56,49,54,51,48,51,53,55,53,54,49,56,52,51,48,52,46,53,97,65,135,25,75,101,25,146,58,189,94,117,21,53,79,42,64,25,30,50,97,40,176,50,21,17,13,9,107,67,152,126,55,9,112,36,78,39,23,13,23,78,34,67,63,62,44,43,43,113,17,13,26,9,123,48,62,145,9,118,40,47,74,42,38,101,72,100,17,13,25,9,42,74,28,13,58,63,74,13,25,9,47,71,61,9,85,60,55,230,9,97,96,79,177,9,11,57,62,90,66,63,66,11,54,52,75,73,64,36,76,17,85,37,17,83,60,133,57,17,101,108,85,70,17,43,168,72,17,152,154,81,93,53,41,93,45,82,29,25,70,275,25,21,72,17,71,13,52,9,43,56,43,87,45,94,45,33,124,61,71,59,76,75,29,34,77,29,25,21,17,13,43,9,53,181,9,37,42,74,59,74,21,89,65,58,25,69,62,25,21,26,73,21,75,95,53,137,74,29,25,21,17,46,13,42,9,41,174,95,9,48,60,91,114,62,13,60,25,128,98,69,159,128,116,106,13,63,47,13,18,130,131,82,142,43,130,66,17,69,13,40,62,13,59,52,96,235,113,62,13,81,209,62,13,68,89,114,118,93,41,13,62,9,57,105,110,63,38,60,59,91,13,24,9,86,40,58,63,33,55,17,13,123,90,133,98,9,52,77,43,87,45,123,112,46,85,57,64,92,87,80,41,46,82,41,37,42,82,37,33,38,170,33,29,25,21,17,13,9,11,90,10,90,67,65,11,46,39,28,13,78,41,74,69,37,21,82,40,110,59,77,126,152,49,33,29,25,21,17,13,24,9,60,47,38,38,93,128,29,80,44,17,108,91,102,131,134,130,132,37,123,58,99,67,67,55,86,39,69,64,52,52,17,13,38,9,53,19,47,38,119,81,72,37,17,198,112,81,80,42,101,41,120,114,62,60,86,21,17,22,37,70,145,21,26,196,21,17,42,13,38,9,49,47,28,13,64,99,13,25,9,46,42,24,63,13,32,44,44,60,32,53,67,69,41,116,48,58,24,33,13,9,38,47,47,38,13,44,38,82,45,73,90,48,99,72,29,63,59,29,25,21,17,13,92,9,53,159,9,48,47,37,42,13,58,28,40,42,86,49,77,94,52,71,164,98,93,29,25,21,17,44,125,65,67,51,21,59,17,13,53,37,49,9,54,47,38,80,42,50,17,13,38,9,57,47,92,9,49,47,110,9,50,67,9,53,71,65,13,56,58,13,60,62,13,48,53,13,52,59,13,53,54,13,29,9,11,120,115,35,11,39,32,42,46,45,45,45,46,45,45,43,48,44,43,32,41,60,45,91,13,25,9,102,48,76,61,9,11,93,106,11,58,67,82,9,11,102,94,56,11,58,65,80,107,75,62,9,11,110,110,107,110,55,11,37,74,57,34,47,59,57,82,57,55,51,51,51,82,21,17,13,25,9,121,128,82,48,80,43,131,13,26,9,60,92,42,91,50,17,13,9,55,144,9,47,43,41,57,67,82,60,65,56,102,105,72,13,24,9,11,67,11,51,77,9,11,76,55,44,88,88,106,11,43,90,29,13,99,50,143,9,40,55,52,51,9,11,76,11,44,53,54,9,11,108,11,40,73,9,11,92,11,49,71,9,11,61,11,48,57,40,13,83,68,13,35,9,11,97,97,19,11,79,109,40,62,39,47,13,60,49,13,51,95,53,17,13,9,11,89,88,19,10,98,100,101,81,10,30,10,32,10,26,27,14,10,99,95,96,86,10,62,69,67,42,11,74,87,43,40,101,68,51,83,157,55,67,56,127,65,36,122,105,98,41,83,96,109,63,149,164,202,93,93,21,47,83,44,117,21,26,51,21,61,17,13,40,9,78,47,41,92,65,89,39,92,94,49,69,68,57,99,38,67,34,92,55,109,90,29,25,21,17,70,34,67,82,49,85,91,117,87,145,94,86,25,21,17,103,13,41,9,11,92,10,67,11,45,65,102,49,9,11,94,32,10,67,11,45,112,51,93,97,64,77,51,21,26,51,21,17,71,13,26,9,80,62,41,59,84,124,73,17,13,63,136,80,13,67,9,88,23,24,31,36,27,90,126,63,73,55,13,18,73,140,94,104,86,13,49,35,85,78,17,105,69,90,51,146,92,125,140,186,162,17,13,101,9,55,103,9,52,61,90,55,141,88,9,158,52,42,48,40,46,56,62,52,53,35,35,48,42,23,9,38,147,110,39,39,65,53,26,9,67,51,57,55,38,38,26,9,70,81,33,13,56,58,13,86,60,120,9,73,227,51,43,26,9,65,49,60,76,44,94,17,128,134,17,13,36,85,62,81,71,134,103,106,64,92,85,96,80,34,19,86,13,9,59,79,93,83,103,46,206,13,65,59,81,56,28,101,51,91,71,109,212,71,55,106,37,17,13,26,9,116,98,44,175,29,17,13,9,79,43,112,99,36,37,17,65,159,41,21,17,35,13,23,61,110,58,188,29,37,17,58,13,26,9,113,111,114,61,53,23,39,61,51,41,51,142,17,80,43,106,158,99,46,46,90,61,76,148,74,187,120,33,85,64,29,62,25,21,17,13,70,147,122,141,81,115,49,54,52,56,161,317,39,43,25,21,18,105,58,55,44,30,17,33,13,43,9,77,70,29,13,49,28,13,70,59,45,45,38,29,166,174,33,132,123,158,102,13,24,9,61,34,37,13,124,125,134,121,56,9,62,52,54,65,58,73,111,102,83,52,72,40,81,17,87,40,81,17,95,111,104,96,99,67,43,47,38,170,98,40,13,40,91,97,40,89,17,55,13,26,9,63,73,28,62,90,83,13,47,74,104,86,85,46,118,55,154,30,186,13,26,9,44,60,30,32,48,49,103,238,21,18,96,49,35,17,30,13,33,9,48,113,82,183,145,60,106,9,47,89,9,36,139,67,125,81,52,13,30,9,67,32,52,34,42,17,41,115,17,13,51,9,55,115,95,31,36,27,35,47,83,41,38,108,106,106,108,45,37,79,62,70,58,123,41,27,21,92,17,104,167,14,52,28,13,157,9,62,43,223,60,17,14,98,46,30,13,30,9,62,29,61,45,59,255,42,21,17,13,50,9,11,55,11,52,54,30,106,140,120,130,102,105,13,61,106,57,93,96,63,105,13,18,67,43,40,37,57,54,54,54,69,65,29,27,45,21,17,54,101,52,78,87,134,97,95,21,63,110,21,17,73,34,73,17,22,51,85,21,114,136,80,21,17,115,101,101,102,94,77,72,17,68,52,80,156,59,180,228,43,21,54,89,21,67,17,13,9,72,38,54,83,161,9,56,72,68,82,97,203,49,91,34,124,124,62,70,66,80,93,95,148,143,91,75,118,60,77,17,22,62,70,17,60,13,94,9,90,93,90,47,51,51,92,13,58,47,51,71,51,135,21,17,28,13,51,61,13,58,91,13,24,9,40,57,9,107,84,34,62,13,43,31,13,18,88,38,114,41,21,17,13,9,67,49,49,27,87,102,102,42,69,71,74,82,110,65,112,67,50,136,13,18,89,13,111,51,138,106,13,71,105,78,63,73,84,89,91,61,39,100,93,21,26,161,90,142,90,128,142,93,242,47,53,47,44,65,135,123,98,25,52,21,17,115,105,92,41,121,125,88,17,13,9,48,31,51,64,52,37,17,98,126,69,118,129,100,208,109,33,43,170,37,17,35,13,31,9,55,40,119,9,56,41,120,9,50,46,129,26,9,54,39,60,191,31,9,62,92,9,67,102,75,74,9,55,38,71,107,109,95,141,17,22,115,117,89,83,83,161,180,17,13,38,9,47,47,161,157,9,49,57,106,9,57,61,69,117,9,44,123,9,44,126,9,53,32,55,63,58,21,75,61,21,75,62,21,69,58,21,66,55,21,17,60,50,17,67,57,17,13,24,9,84,50,51,69,13,33,9,95,75,11,54,51,66,56,54,34,17,13,9,63,43,53,73,41,95,42,61,108,47,76,29,25,21,109,101,104,30,21,17,67,13,43,9,44,48,67,62,48,9,54,48,60,99,61,52,21,19,13,9,75,38,50,94,124,110,119,15,9,57,48,59,63,13,47,74,45,103,57,50,93,70,33,57,21,17,13,48,9,44,97,95,100,54,9,62,123,9,53,105,9,54,72,80,9,55,57,116,82,84,13,80,72,120,36,41,17,13,82,75,107,13,29,9,62,50,127,145,133,96,82,76,189,13,50,9,67,110,105,111,109,42,112,114,121,120,116,44,85,86,110,66,143,69,44,21,17,13,29,9,57,115,9,55,107,9,77,28,46,74,36,61,106,92,60,142,69,21,37,73,44,68,25,21,17,69,49,17,13,105,103,74,44,112,78,82,44,72,68,25,21,17,56,13,29,9,48,175,65,121,13,86,9,11,142,121,11,48,57,9,53,78,9,11,116,114,51,11,50,46,51,13,27,113,52,49,82,54,21,40,117,117,116,119,119,72,112,38,96,36,21,47,67,72,44,142,150,171,33,29,25,56,21,75,17,49,13,43,54,94,13,47,59,71,56,36,54,17,66,40,39,42,82,49,65,39,54,49,29,53,25,30,45,25,21,37,33,21,121,115,38,17,52,47,17,64,40,78,123,17,62,63,96,17,60,62,124,90,105,21,73,71,157,85,17,59,73,71,17,60,59,17,25,13,9,58,137,9,65,41,43,94,132,17,22,93,65,196,118,73,96,60,21,17,13,70,102,63,13,41,9,11,54,10,94,98,45,11,61,77,120,9,68,93,9,11,83,11,57,174,9,52,120,9,60,64,61,76,89,108,17,13,24,9,57,118,92,9,11,106,107,23,11,40,119,92,93,77,75,135,85,148,97,97,114,54,9,47,108,116,113,82,73,9,109,23,27,24,27,69,91,80,56,60,45,79,37,52,78,96,94,31,38,83,25,30,55,25,42,46,25,55,130,118,115,130,176,139,135,138,162,29,34,47,59,85,33,59,55,58,33,29,25,64,59,25,71,60,25,127,96,92,90,57,70,25,21,39,108,40,112,147,25,122,64,78,25,30,63,25,21,17,13,162,114,101,33,13,82,43,143,167,131,84,173,60,55,35,17,22,38,17,13,80,29,26,25,31,27,38,54,74,39,45,66,17,100,57,17,76,49,33,37,61,17,59,55,100,17,46,61,17,72,59,17,54,60,17,37,13,47,105,51,74,64,57,58,72,17,13,47,39,39,133,62,55,56,62,13,18,97,33,108,17,13,26,9,111,110,112,113,61,96,23,143,141,28,108,31,283,51,17,13,28,9,102,105,70,107,9,11,122,122,124,119,11,39,110,106,13,63,87,84,145,17,96,13,24,9,49,75,51,33,13,53,54,54,13,27,9,47,91,9,52,110,71,61,125,69,9,53,113,101,9,62,122,115,32,299,17,118,34,313,17,13,29,9,11,124,125,46,10,54,68,11,83,48,51,66,56,54,34,17,54,37,86,81,89,38,35,79,35,40,21,17,71,13,65,107,13,29,9,60,60,66,102,13,33,9,11,123,80,11,50,85,9,53,93,9,63,107,32,31,32,89,44,50,43,17,72,42,46,21,26,93,21,17,13,117,116,58,273,49,101,34,9,56,115,98,56,82,125,9,54,60,66,43,13,33,9,44,79,9,127,80,52,69,9,124,80,52,19,105,9,57,126,9,56,79,9,60,146,9,122,36,64,23,112,34,96,13,26,9,42,28,51,48,40,17,15,26,9,49,43,107,71,70,89,119,20,9,70,62,33,13,91,89,82,9,44,118,28,13,35,73,74,53,129,116,67,133,13,79,23,36,43,82,13,25,9,54,72,9,55,51,29,13,85,111,9,81,108,9,11,92,22,11,58,41,33,65,70,53,21,17,13,40,9,121,62,37,26,13,60,129,72,84,76,42,17,90,76,85,165,46,21,135,17,54,30,13,58,9,59,50,43,36,41,41,43,45,83,87,57,49,66,61,50,49,65,17,95,99,29,102,58,51,128,91,118,148,53,21,83,48,53,21,26,53,21,70,57,21,95,88,96,85,56,49,61,21,17,128,113,51,60,127,97,32,81,21,17,76,97,32,127,146,54,17,120,130,46,17,114,112,13,43,9,11,90,95,13,126,11,76,95,29,13,71,142,85,125,15,104,143,40,68,33,13,49,24,9,46,73,77,33,51,165,9,61,56,27,33,57,120,9,47,56,68,9,58,50,65,64,60,17,22,82,17,13,52,37,26,33,36,45,134,55,53,47,47,80,51,60,59,57,54,58,28,140,17,13,9,48,48,37,28,66,50,45,29,120,116,120,41,62,118,33,21,17,63,13,26,9,59,66,28,82,43,65,17,13,27,9,52,42,64,13,9,57,51,39,92,158,17,57,165,17,22,109,48,72,90,77,89,25,21,92,83,58,17,67,13,117,9,76,51,67,62,161,246,9,74,122,9,54,48,81,37,17,125,222,77,132,65,55,17,71,49,17,43,48,92,39,112,25,49,68,76,39,252,29,34,231,29,25,21,35,17,52,13,48,9,59,61,101,13,60,93,13,70,27,53,13,93,113,32,37,17,106,66,33,38,17,13,55,9,62,126,9,52,67,9,55,55,105,108,76,13,29,9,108,238,41,121,38,77,79,89,115,52,17,13,41,9,99,103,50,55,33,111,13,33,9,73,134,9,70,77,9,48,45,119,26,9,51,98,125,9,51,45,128,26,9,54,112,115,118,116,119,92,226,9,46,58,33,51,56,17,66,177,147,87,129,69,96,17,108,80,167,13,29,9,58,107,105,108,59,51,96,146,64,44,48,83,87,48,55,13,51,9,41,94,9,61,58,9,74,102,9,48,53,89,9,58,43,38,55,62,66,45,97,108,218,33,31,25,21,18,87,45,42,17,36,13,33,9,44,124,128,9,49,161,9,68,19,27,99,96,45,74,106,106,106,93,203,75,60,98,49,100,68,113,61,108,109,108,94,107,112,144,101,75,91,41,37,33,29,25,126,93,106,70,108,93,25,128,38,90,75,25,127,38,132,84,25,126,133,58,97,147,139,64,81,87,325,25,21,17,13,65,9,117,64,44,43,94,141,17,22,88,49,121,21,26,78,146,160,52,137,25,56,21,17,13,104,9,64,92,125,49,9,39,28,24,44,26,38,46,34,93,32,21,40,38,21,38,36,46,21,31,17,13,26,9,62,151,9,117,115,112,94,66,27,74,39,51,54,17,13,58,9,61,50,53,24,74,52,118,37,59,13,24,9,45,48,40,50,40,70,24,9,101,31,62,90,122,13,74,33,29,33,43,57,24,9,41,23,46,79,164,17,37,59,175,101,71,42,124,17,22,186,270,17,13,46,9,46,57,9,11,76,11,69,72,58,33,69,83,47,61,128,131,79,44,104,86,44,106,98,122,92,32,170,41,21,17,154,89,17,120,123,45,189,64,13,73,9,100,55,140,70,13,47,54,96,61,33,298,13,33,9,11,127,127,111,11,62,70,77,59,53,35,76,53,67,52,17,35,13,55,71,33,69,83,106,80,82,164,37,17,113,113,113,59,66,139,163,13,73,9,43,19,118,76,9,45,32,45,41,59,93,59,47,58,36,21,32,13,29,9,40,128,9,57,81,78,25,46,23,120,122,34,106,57,30,127,49,57,17,30,13,33,9,81,59,24,37,13,72,64,86,9,53,43,33,13,56,71,74,13,56,67,13,100,57,22,105,13,82,77,32,37,17,22,96,70,51,17,13,29,9,11,84,53,11,63,43,43,56,41,46,105,92,103,80,21,17,51,13,43,9,60,85,32,13,87,51,25,30,13,65,39,43,46,26,9,45,83,9,69,166,138,30,9,59,28,33,91,41,140,115,58,43,17,91,99,150,102,37,73,21,17,30,13,117,9,45,137,9,53,37,166,29,13,24,9,62,49,50,52,34,51,42,34,51,42,35,51,43,32,51,40,37,51,45,32,51,40,36,36,51,50,33,108,35,122,34,64,65,79,78,172,125,29,43,25,51,68,17,13,9,57,54,85,9,49,43,38,99,93,57,94,17,36,34,48,49,71,32,96,55,98,25,30,108,25,66,21,17,28,69,62,17,120,60,46,42,13,38,9,59,67,9,49,43,38,58,88,63,77,132,87,13,38,9,55,49,55,35,103,61,51,60,64,59,51,25,21,17,13,26,66,13,55,54,137,66,13,59,139,66,13,24,9,59,131,9,58,129,9,70,135,25,102,52,48,81,110,121,37,17,13,26,9,61,103,152,9,59,65,93,9,57,143,207,9,54,143,197,9,44,143,167,9,54,58,88,80,63,98,51,57,73,41,139,13,58,9,63,181,9,67,151,9,71,169,9,54,152,9,53,152,9,57,164,9,66,150,9,68,196,9,59,170,9,59,170,9,67,194,9,60,173,9,54,155,9,54,155,9,62,179,9,55,158,9,65,188,9,66,191,9,56,48,92,66,9,43,143,164,107,9,40,143,155,101,9,55,118,184,107,9,52,148,9,11,109,11,84,132,9,66,107,9,51,113,9,57,120,9,45,32,44,44,40,57,48,66,77,45,24,44,13,9,48,88,9,50,63,60,30,76,13,75,117,123,9,105,90,77,163,97,97,9,100,102,48,46,37,34,49,48,45,41,48,49,47,44,41,41,57,52,32,13,25,9,104,27,44,32,45,142,41,32,44,103,49,44,48,49,49,52,51,58,40,112,41,48,68,49,103,47,106,98,13,25,9,56,43,38,61,50,57,17,200,115,88,17,22,160,93,17,13,38,9,47,94,9,97,58,165,71,96,32,9,86,78,53,76,13,164,39,142,43,24,115,13,24,9,104,52,10,108,10,105,63,89,44,128,31,32,34,24,50,49,82,48,43,63,170,166,54,50,21,17,13,48,72,52,47,13,18,38,56,63,63,13,42,75,49,49,54,47,78,31,61,50,44,44,49,56,61,52,45,39,43,72,47,37,70,24,9,71,150,9,66,27,65,83,65,13,58,87,193,40,162,171,34,17,13,126,125,132,122,103,35,35,42,39,36,45,41,43,51,47,108,70,144,21,49,62,78,79,106,114,56,25,94,215,21,26,92,210,21,17,22,63,129,17,14,59,42,48,41,13,96,57,56,56,13,82,101,263,99,99,182,13,103,71,88,32,59,47,61,17,65,58,17,64,67,17,41,42,58,59,17,22,53,17,13,9,60,62,37,70,117,123,131,9,48,215,9,83,52,95,65,9,81,50,125,9,52,87,9,34,27,9,44,82,9,42,82,28,46,28,13,25,9,58,35,46,123,13,48,48,65,57,68,42,63,72,87,74,17,22,45,138,36,56,21,17,13,28,9,97,73,60,74,39,67,13,28,9,56,42,54,24,29,13,117,122,116,209,35,24,26,27,20,38,96,123,123,68,147,119,34,115,84,50,48,51,119,120,116,80,79,63,226,137,53,33,29,36,157,97,111,45,33,29,153,94,69,65,38,29,25,21,17,13,49,25,9,84,33,27,20,33,36,160,83,85,90,106,80,29,53,17,13,9,71,67,35,37,44,24,37,163,57,21,18,31,31,17,13,9,41,93,9,53,76,37,52,42,91,56,21,76,66,21,17,13,9,68,49,33,26,9,106,111,111,109,101,108,109,95,80,37,33,13,37,32,13,29,62,50,54,51,92,125,17,85,106,84,70,21,17,215,105,17,103,75,17,57,90,35,41,21,17,43,137,149,38,17,13,60,37,51,38,45,107,45,21,18,84,42,32,17,92,42,17,117,114,128,79,100,50,52,21,100,17,13,110,99,109,9,72,22,27,89,43,60,108,62,33,21,26,121,21,17,28,64,52,41,21,17,22,33,17,38,13,25,54,33,13,72,109,9,48,78,9,86,106,37,33,13,37,32,13,58,94,105,203,75,42,24,55,122,35,37,47,61,131,51,51,17,41,13,24,9,49,43,38,66,166,13,38,9,65,35,53,77,13,51,71,67,58,17,13,18,51,46,67,17,79,77,69,45,21,59,93,102,103,68,25,62,21,17,65,13,28,9,107,104,67,76,40,103,13,28,9,65,33,27,20,33,94,85,87,90,29,53,17,13,9,91,93,26,54,89,41,51,87,75,80,87,46,74,37,21,17,13,24,9,11,165,11,58,33,108,27,20,33,65,29,87,44,49,68,57,30,21,55,36,21,17,13,25,9,53,162,9,46,52,92,13,9,98,98,80,57,27,124,28,29,13,30,84,36,38,33,72,74,53,17,22,24,17,13,74,30,29,13,91,90,43,29,28,89,41,70,35,49,63,50,25,21,17,13,62,90,24,9,81,64,106,33,45,59,26,9,114,116,113,99,10,121,120,116,118,75,78,49,79,67,70,33,42,73,76,76,76,72,69,48,91,13,173,136,134,122,124,130,122,33,13,144,33,13,41,90,13,71,83,13,82,82,84,89,65,13,98,99,13,62,70,13,39,35,13,39,34,13,90,51,26,53,67,116,114,89,95,21,85,191,71,152,21,80,66,138,21,26,129,132,72,63,45,25,81,126,125,213,118,21,17,22,94,17,50,13,26,9,50,162,9,48,55,33,226,117,29,13,24,9,54,56,35,45,49,26,61,63,57,58,68,53,21,17,58,52,42,13,33,9,56,43,38,66,156,13,38,9,53,57,31,45,26,9,46,63,31,26,9,64,32,126,114,9,11,134,126,130,58,137,11,82,69,71,74,50,121,38,13,30,67,50,96,109,87,58,118,168,17,22,163,80,73,17,13,18,89,13,108,65,13,152,88,175,170,38,13,26,51,138,165,113,95,13,9,130,129,126,130,77,54,74,89,43,194,123,147,138,108,108,46,13,9,55,47,33,13,114,135,9,78,130,77,28,78,107,154,17,51,32,17,13,29,9,54,175,9,77,179,137,165,124,95,81,9,69,75,40,169,166,213,133,66,74,107,277,9,45,35,28,13,60,115,9,45,69,81,9,52,43,38,40,48,90,30,49,87,98,40,30,51,76,30,28,66,17,13,38,9,52,43,38,262,13,38,9,55,132,34,54,145,30,13,51,36,13,30,30,32,42,34,13,40,50,13,32,149,34,13,162,52,24,99,13,24,45,56,37,100,66,45,21,73,43,56,41,45,21,91,41,44,44,21,26,37,21,17,28,13,9,49,70,72,97,109,38,9,58,67,31,31,24,9,53,150,93,121,29,9,50,65,65,65,91,93,13,23,9,67,81,52,26,91,13,26,9,56,67,35,31,26,9,111,63,41,39,43,43,57,24,9,11,70,62,54,68,62,117,153,11,40,32,79,13,65,28,13,51,61,13,58,60,13,60,65,74,13,25,9,66,58,52,61,116,71,30,9,60,73,125,54,122,17,164,13,24,9,129,19,128,138,41,57,94,17,67,27,178,266,93,21,43,139,129,163,45,25,64,75,25,88,44,25,21,57,114,76,33,17,112,161,84,54,214,25,30,164,25,21,94,61,82,123,23,17,13,175,76,38,17,130,87,124,32,102,47,165,25,41,21,144,84,121,135,21,61,131,17,59,37,17,50,35,17,77,58,117,185,49,25,87,91,65,31,81,25,21,207,167,21,153,100,68,253,25,78,169,25,30,52,133,63,194,33,29,34,134,65,212,33,38,59,83,219,37,91,117,208,37,89,199,37,89,199,37,99,237,37,251,125,33,29,25,21,37,17,13,46,31,13,29,76,92,137,17,79,154,17,22,117,17,13,39,33,13,29,63,160,133,17,13,9,62,106,88,96,35,9,56,102,9,45,125,9,38,49,9,44,87,9,43,87,9,46,65,80,77,119,17,71,13,59,80,77,102,17,71,13,172,232,9,51,109,103,25,9,80,50,50,40,71,142,131,13,9,80,48,48,56,142,82,13,9,105,104,39,64,82,30,83,13,49,117,114,73,71,48,48,101,39,58,13,123,68,54,54,44,106,44,63,17,13,39,176,104,106,89,91,178,34,53,17,13,116,117,44,50,158,13,38,9,62,43,47,64,66,109,127,171,64,17,87,37,17,13,132,174,37,17,120,65,17,13,24,9,11,120,11,52,106,9,65,97,79,94,9,120,71,174,9,54,54,64,62,60,46,59,21,17,29,15,9,131,71,76,36,13,112,90,176,39,13,136,74,102,56,120,123,123,121,118,81,113,112,144,62,38,17,74,77,136,54,28,158,17,28,13,95,81,110,72,97,35,43,78,35,196,35,49,21,43,105,41,21,26,112,46,21,17,37,37,17,52,85,96,13,176,9,57,43,38,70,68,69,159,84,57,54,76,13,38,9,50,43,38,74,40,67,91,42,110,70,54,13,38,9,46,59,37,13,115,70,123,13,24,9,60,132,9,45,162,9,11,99,101,60,11,68,117,9,84,23,27,30,114,118,116,117,92,26,41,116,39,26,17,76,140,69,121,81,40,17,44,47,122,49,112,113,83,130,21,115,118,118,106,17,98,168,115,84,115,113,114,99,242,101,76,151,25,115,77,83,77,59,137,47,41,29,70,41,29,25,70,30,21,110,117,87,99,89,187,81,66,69,37,25,73,30,21,17,106,64,35,75,79,39,55,69,147,22,13,85,117,121,122,43,57,78,47,54,94,142,105,128,152,43,51,52,59,54,44,29,40,25,21,17,29,13,9,55,145,9,56,148,9,63,230,9,47,23,30,55,68,84,21,19,13,26,9,48,115,88,9,55,43,38,68,66,85,101,193,28,31,41,71,85,70,61,46,45,58,18,84,42,55,100,17,13,38,9,49,43,38,105,13,38,9,43,40,30,13,18,76,13,9,50,43,38,117,83,57,58,17,56,81,57,58,17,167,97,95,41,57,58,17,110,56,71,56,41,57,94,129,132,131,100,48,107,112,36,174,66,25,68,75,48,21,111,17,22,61,111,21,26,79,107,135,78,61,55,21,17,13,38,9,72,55,50,49,135,13,18,147,13,9,78,43,38,88,66,81,62,17,22,81,51,90,74,53,21,46,17,13,38,9,50,35,166,35,13,76,9,57,100,9,47,86,9,66,280,9,74,54,28,13,82,81,13,120,29,28,13,140,29,28,13,54,52,110,53,88,38,114,52,21,58,128,79,137,133,64,72,54,62,21,17,128,106,30,13,9,11,86,111,52,11,76,72,31,13,80,35,13,50,29,13,51,28,13,75,51,60,116,32,13,77,52,60,116,32,13,206,28,13,74,46,33,17,106,106,99,62,43,59,92,166,21,17,58,13,49,53,119,85,39,115,69,17,59,93,17,13,84,38,105,29,17,56,70,63,68,105,98,79,138,53,55,59,76,66,21,17,22,91,17,13,186,147,26,9,107,45,19,96,107,151,9,50,116,76,28,13,82,125,84,52,60,42,26,9,59,126,9,71,41,33,31,51,24,9,50,50,38,97,52,47,17,38,13,24,9,52,71,138,25,9,43,82,9,46,21,51,112,9,46,21,51,112,9,46,21,53,49,111,9,60,21,66,49,129,47,98,9,51,62,32,13,43,38,96,13,38,9,51,61,33,107,24,9,51,54,51,51,113,13,32,9,36,87,55,103,46,111,95,17,13,43,177,110,13,36,49,105,172,108,13,54,92,94,13,117,29,9,48,43,38,55,13,38,9,48,88,9,48,32,49,62,41,53,48,130,70,25,21,26,41,44,13,29,9,54,43,62,69,111,9,44,87,9,50,32,42,44,48,35,46,39,45,38,45,38,45,38,46,39,45,40,43,36,48,41,43,164,36,44,37,45,115,48,47,40,43,198,57,43,60,45,58,45,73,59,58,41,58,41,41,65,44,61,41,58,48,65,49,66,49,74,48,63,49,52,51,58,40,57,49,62,44,47,43,48,49,46,87,44,61,49,66,42,59,47,64,41,58,51,61,42,59,127,81,178,41,45,56,59,80,24,37,13,9,63,40,56,40,60,42,70,44,58,72,25,38,21,17,13,25,9,50,67,9,60,77,9,60,77,9,53,146,9,46,34,36,73,35,49,49,62,50,66,25,21,32,38,45,39,36,65,150,13,9,54,76,9,56,79,9,47,58,9,66,70,9,44,68,9,11,86,84,11,60,182,9,55,100,9,53,97,9,61,152,9,60,152,9,50,149,69,45,9,52,67,42,26,9,62,147,9,79,36,67,106,104,85,91,117,120,55,39,17,13,78,115,28,230,46,122,38,35,26,9,52,47,71,101,81,30,13,66,116,115,50,38,66,13,98,76,220,54,42,35,35,42,66,13,33,49,13,26,9,92,109,50,84,78,59,34,107,110,109,95,105,51,94,98,17,70,120,196,168,35,59,13,40,114,113,83,79,120,69,129,106,45,57,145,17,59,30,84,173,144,111,58,17,30,13,24,9,52,130,122,9,62,113,113,120,93,65,67,152,36,21,17,47,13,24,46,36,44,47,45,114,120,45,36,53,51,59,78,74,72,17,66,13,9,51,71,61,78,70,40,17,13,29,9,87,110,49,93,83,97,97,105,108,111,49,64,31,79,58,94,197,61,56,162,154,124,33,60,108,33,53,124,33,29,111,25,33,56,17,13,106,188,9,61,116,9,97,113,117,115,85,61,84,72,73,64,94,110,15,118,127,9,76,113,57,139,9,76,61,84,143,15,63,166,146,33,93,69,123,9,79,102,111,57,197,142,29,9,90,97,53,54,44,77,79,58,112,51,13,33,35,65,125,26,9,97,33,43,115,113,83,120,100,57,30,96,53,117,109,110,79,154,193,95,56,17,30,13,24,9,48,143,9,90,51,28,13,78,124,124,123,253,112,33,13,38,33,33,94,33,26,9,87,35,53,51,13,46,51,95,72,79,95,144,21,65,74,21,101,17,28,13,60,88,115,63,77,32,17,69,129,114,90,99,13,46,72,13,58,96,13,56,93,13,54,69,129,210,13,53,135,13,54,75,71,104,17,22,71,159,45,21,31,17,13,24,9,61,75,74,28,13,78,64,28,13,136,31,36,13,139,9,51,109,121,9,52,100,28,13,48,53,13,85,113,116,133,136,90,99,49,9,53,120,9,113,48,43,105,32,50,45,49,127,75,55,72,54,70,53,63,59,48,142,90,50,64,55,63,45,171,46,124,55,76,17,47,93,53,74,17,13,25,9,66,127,102,9,60,108,166,9,72,159,64,9,49,51,66,92,83,54,60,58,63,54,34,17,13,63,89,13,24,9,24,52,69,9,56,101,9,57,103,9,56,100,9,50,68,9,53,71,9,80,74,84,78,87,71,78,33,52,135,131,152,126,132,186,9,11,55,130,10,138,47,113,96,90,11,53,71,9,51,88,9,123,141,9,11,160,118,11,132,186,9,161,58,28,139,138,13,25,9,50,158,9,124,59,29,86,149,28,13,32,45,55,144,48,54,50,49,147,21,26,55,128,54,127,45,128,45,128,13,25,9,146,75,85,96,40,54,65,161,21,63,112,83,236,32,17,13,25,9,119,37,40,29,13,58,55,29,13,59,29,29,13,77,47,29,13,45,67,96,101,197,33,38,17,59,149,39,81,227,21,73,123,80,73,130,183,21,32,17,13,25,9,85,72,22,27,13,53,63,27,75,17,13,9,92,49,17,99,13,21,48,13,9,11,131,176,93,11,121,119,38,88,142,104,90,80,87,36,29,92,109,181,41,38,102,67,64,143,124,278,50,54,25,30,154,154,97,117,157,78,157,148,29,25,47,93,132,126,58,46,89,139,61,185,33,29,165,159,90,353,33,29,25,21,17,13,33,9,46,29,52,35,27,56,50,53,37,27,71,38,103,52,160,27,34,37,27,29,48,50,17,15,9,70,55,52,35,27,54,50,41,30,37,27,81,49,74,107,59,51,27,34,48,27,39,37,27,28,48,50,17,15,9,94,33,45,61,103,38,62,78,21,40,138,42,53,43,51,92,24,82,13,9,119,147,38,93,59,95,127,78,88,90,48,34,17,75,98,130,46,61,110,112,164,21,126,41,38,242,87,107,25,21,17,22,64,53,129,37,113,51,73,43,50,62,33,120,25,21,126,41,38,258,87,107,25,21,17,13,26,57,45,76,99,131,114,166,239,17,45,13,9,61,39,52,35,27,55,33,50,30,37,27,64,174,92,52,48,57,52,59,109,27,34,37,27,28,48,50,17,15,9,118,54,29,42,160,13,62,95,49,41,17,101,49,53,171,17,29,13,21,49,13,9,54,39,52,35,27,56,50,53,37,27,71,38,56,52,123,73,52,25,39,37,80,80,86,96,87,25,48,119,27,34,48,282,27,34,48,27,51,37,27,29,48,50,17,15,9,119,54,29,149,9,11,55,127,11,104,122,9,77,135,151,9,11,99,11,36,140,155,55,9,11,61,11,165,74,36,37,13,41,37,13,56,79,173,42,37,13,91,55,119,13,56,61,61,51,96,13,82,78,37,13,86,130,85,39,64,64,68,37,63,121,86,35,43,108,25,45,21,38,17,13,136,83,50,118,118,47,121,124,123,119,119,120,122,41,134,134,147,130,45,274,193,122,204,48,21,35,43,243,25,45,21,38,17,13,59,99,60,89,159,59,52,34,17,89,159,59,152,78,42,82,46,149,21,81,43,122,25,45,21,17,22,120,123,70,146,87,79,86,21,17,13,26,9,107,46,35,126,152,17,37,13,98,70,39,153,156,21,41,17,13,71,99,34,60,148,13,27,9,83,66,60,80,74,74,45,90,93,103,13,25,9,41,43,44,48,53,42,9,42,141,65,95,107,34,9,51,115,122,9,55,210,121,22,9,81,48,28,13,81,45,115,53,13,170,72,29,13,63,109,38,58,97,90,44,236,84,25,30,65,25,37,21,17,13,52,24,9,81,33,33,94,28,39,29,69,28,76,79,46,28,63,28,76,79,46,28,65,28,66,28,72,28,123,28,75,139,32,71,52,123,32,13,115,28,84,28,75,28,85,36,32,104,106,106,219,32,13,25,9,60,45,44,13,45,44,13,36,28,13,48,196,32,17,13,18,50,33,60,32,13,91,128,44,59,17,13,133,93,13,25,9,59,119,9,51,26,69,137,95,114,109,41,65,31,26,25,13,24,9,11,80,60,61,144,110,143,118,91,100,11,133,26,28,26,28,28,31,32,32,46,33,127,32,34,40,116,110,36,42,13,27,247,165,43,99,17,13,33,45,57,32,80,42,21,17,48,127,75,62,95,136,43,128,296,149,25,21,17,112,34,95,17,43,99,17,81,42,17,13,116,109,13,44,44,44,56,60,68,48,13,53,24,41,53,135,65,111,18,13,79,76,72,104,13,48,52,46,43,44,41,56,31,62,115,21,27,17,123,50,30,45,38,74,39,88,67,61,61,29,51,111,52,54,29,72,105,72,29,89,85,67,29,85,34,77,29,34,25,102,107,122,129,52,120,118,52,144,116,33,154,121,33,91,29,34,139,147,44,41,154,147,40,44,95,29,34,25,132,173,34,25,143,193,34,25,32,92,21,17,27,61,101,100,17,22,141,48,17,120,88,73,121,81,69,17,27,58,111,17,13,67,45,38,46,57,27,99,13,49,45,35,41,17,22,43,17,13,67,38,46,109,47,55,92,73,130,90,17,64,69,53,158,262,21,26,46,165,21,17,31,58,84,21,57,148,21,123,193,21,26,107,112,48,174,39,29,25,84,21,17,111,49,87,214,17,72,13,80,167,167,77,77,79,108,145,17,13,15,70,67,68,30,15,80,19,47,154,113,154,101,19,42,82,43,168,25,37,21,70,17,83,39,164,21,33,17,42,47,17,28,13,70,79,13,15,43,70,94,55,15,128,81,70,87,103,99,114,130,45,21,39,120,21,41,17,110,106,110,67,82,81,38,41,52,54,45,64,45,71,120,17,111,120,109,114,56,106,41,17,118,109,113,45,108,137,38,81,80,46,49,21,17,145,108,41,137,186,59,80,47,127,29,49,25,21,134,148,114,109,108,125,43,114,114,82,92,150,160,168,29,34,135,29,25,45,21,71,143,148,48,103,112,126,128,104,22,134,22,65,111,22,99,80,26,22,126,115,175,325,47,128,48,21,35,40,21,17,35,100,17,37,13,102,91,91,97,97,62,36,44,17,95,49,87,53,52,21,17,98,78,17,110,143,17,125,51,98,108,102,128,50,31,21,17,22,86,17,52,55,122,27,17,65,13,73,34,27,17,127,59,59,133,77,31,21,76,76,56,124,48,51,48,51,101,100,27,21,17,13,60,65,27,49,167,181,58,18,114,13,72,23,129,167,17,104,91,125,33,17,43,31,57,144,115,17,48,114,106,47,113,63,105,102,102,67,47,70,157,146,153,200,130,131,79,37,72,127,117,53,168,37,42,141,37,33,38,129,196,60,257,84,108,68,72,68,112,41,37,67,233,37,42,197,37,33,29,51,25,164,47,131,29,51,25,21,18,90,38,49,52,45,17,29,13,67,138,13,100,109,109,108,57,60,140,139,17,57,198,17,64,126,17,121,119,123,118,50,95,88,55,66,75,103,25,21,17,110,118,113,103,101,13,64,43,47,96,55,100,35,45,21,38,17,30,13,74,47,57,60,45,21,83,32,105,38,43,25,21,17,96,49,100,34,39,21,17,35,93,92,43,101,21,17,37,13,93,43,47,96,55,142,35,45,21,38,17,30,13,93,47,94,41,17,45,47,163,34,39,21,17,37,13,73,141,66,95,120,78,17,30,13,93,43,47,141,133,97,62,52,207,153,156,172,169,172,221,40,48,37,25,21,142,35,45,21,38,17,30,13,107,68,68,72,89,41,17,96,43,50,103,100,55,96,72,109,59,43,43,52,67,141,149,143,156,25,66,130,25,70,130,25,66,103,103,107,73,94,43,134,29,25,30,101,105,78,130,42,135,29,25,39,49,25,42,21,17,30,13,134,138,136,141,94,110,31,41,17,111,118,45,42,96,128,116,21,26,61,144,69,70,107,29,69,105,29,25,89,21,17,33,35,37,37,17,22,122,127,42,171,58,114,115,49,25,21,69,40,45,21,17,44,43,29,56,54,54,34,115,57,17,54,54,34,115,57,17,36,49,53,69,80,126,63,22,17,27,54,164,44,86,44,86,43,48,23,43,17,22,196,102,93,17,53,69,17,54,34,17,54,34,17,52,29,95,83,130,123,75,105,29,25,48,21,17,22,100,77,120,44,17,30,13,95,64,125,17,27,38,48,67,47,47,52,93,74,81,39,82,25,40,21,60,107,21,68,127,130,46,29,25,21,67,88,129,138,182,188,58,41,37,33,29,25,21,68,119,21,63,45,21,17,126,113,38,21,151,116,114,117,117,115,116,114,113,94,130,119,143,130,187,164,128,161,62,46,29,25,21,118,97,124,104,135,137,71,97,160,45,21,17,114,114,58,109,93,108,74,54,47,21,141,55,46,21,17,140,104,168,237,34,17,63,135,194,90,85,121,116,46,29,25,21,17,61,51,78,60,116,42,25,21,52,117,94,128,42,25,21,26,106,95,85,41,102,106,103,54,148,53,29,25,69,152,66,176,85,95,52,105,142,113,114,54,146,222,180,133,29,34,74,29,114,53,29,25,21,17,69,68,101,108,117,114,25,37,58,42,25,43,58,25,21,99,54,93,59,57,95,92,105,128,121,45,72,82,66,33,109,50,33,127,85,167,33,29,25,21,39,54,21,17,88,117,69,77,67,65,77,117,134,96,49,25,59,102,98,136,83,121,86,127,155,159,182,187,47,87,86,91,91,168,144,113,156,130,54,37,33,38,156,172,130,131,153,135,136,153,67,81,65,107,60,103,128,126,54,37,33,29,58,58,25,21,17,68,133,81,83,54,45,21,35,117,120,63,90,128,143,158,153,161,162,41,62,46,29,25,21,17,73,72,62,123,25,122,129,97,21,77,45,21,17,63,120,116,69,122,114,144,62,46,29,25,197,162,58,42,25,195,246,58,42,25,71,136,130,88,50,155,66,50,33,29,25,21,17,61,106,54,38,21,17,113,75,73,142,58,42,25,21,17,71,105,105,58,42,25,21,26,73,117,58,42,25,21,17,68,133,81,83,54,45,21,67,119,120,51,75,63,44,43,120,133,141,87,48,25,83,159,188,164,29,41,62,46,29,25,21,26,141,140,155,53,117,62,46,29,25,21,152,102,90,44,108,58,42,25,21,17,22,103,153,45,21,54,58,93,62,46,29,25,45,21,85,56,57,51,21,59,45,21,156,156,115,112,105,68,125,123,72,58,51,25,143,59,50,25,21,176,60,177,25,30,136,139,49,25,21,158,72,215,45,21,111,62,119,120,97,128,94,129,146,37,112,41,121,45,149,33,29,25,60,166,25,42,42,25,21,102,102,99,80,128,154,75,100,43,48,29,25,21,17,37,57,30,33,136,17,114,144,38,21,113,144,68,136,70,54,54,41,21,130,67,113,109,112,111,115,109,54,82,110,114,114,113,113,46,120,123,166,49,25,113,114,96,54,54,21,17,13,51,128,77,17,25,13,49,128,76,17,25,13,97,100,78,72,174,106,39,34,83,224,114,138,152,190,25,21,17,37,13,69,104,107,101,111,109,69,18,144,38,67,100,46,41,84,81,79,79,76,40,135,72,93,47,62,255,45,21,17,75,89,54,75,69,87,95,50,47,71,17,108,117,92,39,55,41,86,42,53,77,101,48,56,66,50,121,257,112,68,43,56,29,26,83,54,46,70,29,25,78,40,21,36,56,21,18,135,69,56,52,45,17,83,43,102,51,122,33,116,37,125,88,127,129,127,53,158,29,25,21,34,38,21,17,30,13,72,67,38,27,61,77,37,55,25,21,39,56,21,17,44,13,132,111,132,74,143,13,152,91,91,93,86,43,105,145,29,34,272,29,25,45,21,17,64,69,43,259,25,45,21,17,64,39,179,21,41,17,102,140,31,39,129,21,41,17,93,131,62,83,78,73,81,42,42,39,180,21,41,17,31,13,108,50,92,54,80,86,36,62,107,123,86,103,103,325,31,21,17,147,123,166,128,17,41,69,196,68,154,21,61,48,21,17,95,86,270,21,26,229,21,61,48,21,17,113,13,111,52,85,17,43,42,69,136,49,25,72,72,125,88,96,70,79,47,135,29,49,25,79,47,138,29,49,25,95,47,72,135,33,38,133,33,29,49,25,75,75,186,201,75,63,109,174,76,102,51,137,33,53,29,103,51,168,33,53,29,102,51,137,33,53,29,132,58,105,68,33,172,45,33,29,92,183,112,68,142,98,157,43,91,133,177,37,42,215,37,33,53,29,46,25,38,21,74,45,21,17,209,143,40,39,110,21,41,17,50,133,48,87,73,78,51,150,33,53,29,25,21,17,166,60,61,82,112,44,54,149,73,70,193,43,53,29,46,25,21,17,30,13,80,98,41,17,112,112,74,41,17,43,111,60,93,38,45,21,89,35,45,21,38,17,30,13,78,27,52,71,17,79,41,17,109,109,122,41,122,41,103,92,92,64,108,114,112,56,43,134,25,45,21,120,45,21,17,43,155,66,66,144,136,111,116,116,63,71,193,39,49,25,42,21,17,90,113,112,111,111,66,115,69,69,167,123,247,79,145,26,177,99,38,21,17,22,122,55,75,71,65,119,59,134,42,50,62,47,29,58,25,52,208,25,45,21,17,30,13,72,83,222,17,198,13,77,83,227,17,203,13,15,68,15,100,317,13,66,73,73,74,41,17,43,67,196,35,45,21,38,17,30,13,82,43,49,155,78,43,69,61,33,21,133,71,172,38,83,101,39,47,130,29,49,25,42,21,17,90,38,71,89,39,49,25,42,21,17,30,13,79,104,47,68,123,21,26,163,21,17,31,13,115,52,70,17,61,120,43,93,54,133,175,104,35,45,21,38,17,30,13,98,84,33,84,17,102,105,87,17,35,152,17,37,13,65,62,62,64,41,17,96,55,84,154,45,21,17,37,13,107,83,32,17,149,149,98,62,32,17,91,108,32,17,77,89,32,17,35,189,17,29,13,9,60,87,102,39,48,29,13,65,85,13,60,59,56,75,17,13,88,9,73,59,37,46,177,9,66,123,9,51,136,9,67,81,101,80,63,59,54,9,115,77,104,85,101,99,86,103,29,17,26,75,38,81,85,100,21,26,49,21,24,17,13,70,31,36,13,62,85,38,87,40,17,89,13,39,9,11,87,84,11,35,51,66,143,148,13,58,56,13,25,9,80,86,34,90,32,17,13,25,9,101,64,63,132,56,26,9,44,47,101,137,61,28,15,9,102,104,97,99,96,78,27,78,44,29,341,85,48,31,46,45,43,68,148,96,98,76,85,81,109,101,99,101,101,81,140,55,21,64,53,43,61,25,41,60,25,21,45,18,105,50,33,17,44,89,13,29,9,37,97,115,38,13,89,9,109,84,69,56,127,32,17,13,25,9,53,98,9,51,81,9,60,196,9,97,36,38,57,57,102,71,46,54,52,49,85,35,63,83,66,44,62,55,29,50,37,25,121,81,47,21,83,79,33,21,41,17,30,13,9,11,123,51,11,97,73,34,32,30,13,75,111,96,76,9,107,38,50,61,88,35,67,67,33,38,21,17,33,13,34,9,103,42,132,9,114,57,56,72,97,9,93,37,64,56,56,81,15,9,100,60,138,93,9,101,46,80,138,100,9,123,128,124,127,57,122,126,110,122,67,125,57,67,54,36,60,30,35,49,37,65,117,97,49,36,52,44,29,25,42,21,17,13,25,9,123,122,114,117,124,94,45,123,88,80,114,112,39,37,17,123,122,124,39,17,40,72,39,17,13,58,35,13,59,110,20,43,67,28,13,58,80,33,13,24,9,64,102,9,74,56,89,120,44,37,13,137,137,70,37,13,42,82,41,17,13,18,116,41,17,13,80,37,13,90,9,68,65,65,69,69,75,75,116,45,64,68,68,28,13,116,25,83,28,13,25,9,11,61,11,125,74,36,37,13,71,37,13,85,88,37,13,107,102,40,92,72,53,53,177,159,45,21,17,92,13,39,35,68,37,72,41,83,39,49,25,42,21,17,13,54,49,53,53,49,31,41,17,34,13,37,78,78,70,108,101,13,26,9,79,99,61,89,38,9,54,31,76,37,59,38,46,17,68,33,17,13,24,9,97,95,32,45,37,32,13,56,37,96,9,44,36,50,13,108,40,120,53,9,80,42,99,9,36,147,9,44,110,9,46,113,9,50,77,9,40,106,103,127,9,61,129,33,13,87,132,13,75,37,60,66,134,76,162,37,17,13,45,37,33,13,55,153,13,212,87,110,13,71,68,9,43,98,9,48,62,68,9,40,71,9,47,66,9,51,69,27,32,13,47,106,13,29,9,50,76,9,35,54,9,39,94,51,9,40,108,9,38,57,130,37,9,49,93,135,71,76,81,108,41,9,46,121,95,99,104,109,105,41,9,53,74,96,25,9,83,67,81,13,24,9,121,43,81,87,54,88,13,24,9,139,43,81,121,88,13,24,9,11,63,106,11,36,110,9,43,89,9,56,85,9,47,83,9,52,56,57,9,87,62,56,68,33,59,38,54,45,128,17,96,13,29,9,55,77,154,9,35,33,45,9,46,27,76,37,43,13,26,9,118,116,76,38,88,104,107,115,150,72,9,51,71,111,21,9,52,63,9,53,66,56,67,52,49,128,88,87,96,38,9,11,71,76,79,11,47,93,41,89,83,70,9,52,62,46,126,9,62,120,120,71,86,54,151,13,120,73,94,28,9,43,89,9,46,80,9,49,76,9,71,128,9,66,98,85,29,9,54,99,9,44,149,9,53,129,9,11,69,67,67,10,67,66,10,70,26,10,66,65,18,10,36,10,24,24,11,63,104,97,9,11,130,48,11,55,58,70,32,143,60,169,9,53,117,54,42,31,35,42,66,13,59,27,43,13,26,9,50,49,90,38,57,42,125,13,27,9,11,88,90,74,11,54,101,28,13,47,30,35,13,32,86,151,46,87,42,30,9,72,117,9,48,36,36,99,38,52,87,35,77,51,31,25,21,17,46,13,36,9,50,46,41,92,35,107,93,46,62,25,21,17,74,13,46,9,52,51,91,56,28,13,49,114,75,85,9,45,67,25,30,13,65,52,62,26,9,63,49,90,34,81,13,26,94,38,57,82,21,17,13,239,161,26,9,39,74,9,59,74,60,40,17,36,72,37,17,53,74,17,60,136,170,101,103,96,134,17,67,89,17,66,114,17,54,42,17,38,13,24,9,11,96,94,94,51,10,105,105,106,93,11,51,38,78,55,65,45,21,26,81,43,64,53,29,25,21,17,61,89,39,60,49,25,21,17,48,98,39,51,87,65,179,29,49,25,21,17,13,33,9,69,66,130,90,23,13,27,39,48,51,49,194,26,41,44,54,149,70,140,115,85,115,161,31,21,61,206,191,26,46,91,41,116,31,21,26,49,150,27,51,49,47,43,43,50,45,61,70,196,25,30,164,25,31,21,146,151,113,26,42,40,114,21,27,24,198,13,150,9,76,202,107,56,71,17,13,9,66,56,56,62,62,84,109,64,33,68,37,61,17,13,50,85,13,33,84,13,9,63,74,74,186,77,13,18,93,13,9,89,147,9,61,58,176,9,91,27,39,37,29,43,117,127,14,27,9,53,48,57,46,52,52,58,49,21,55,17,13,21,9,52,89,49,41,55,17,13,9,53,20,45,38,44,40,36,31,31,39,14,9,48,20,55,81,99,53,45,45,43,52,14,9,54,83,38,142,26,9,48,45,9,92,92,76,50,54,80,81,13,72,202,230,113,191,61,141,13,26,9,49,63,108,201,13,25,9,65,47,158,176,9,111,63,49,44,59,27,17,64,71,43,31,69,77,17,47,15,144,101,9,11,104,100,92,96,11,80,54,33,13,72,46,51,13,55,75,56,46,24,9,100,105,107,108,49,81,159,95,9,70,98,82,140,33,13,102,46,38,141,13,38,140,93,130,47,133,13,103,52,113,37,41,49,28,9,55,47,30,115,13,30,9,73,110,69,63,62,66,9,113,93,52,35,27,65,58,37,27,81,54,166,76,52,25,182,87,66,57,27,34,48,27,82,65,93,65,175,57,27,34,37,27,29,48,50,17,15,9,111,127,29,36,9,64,124,137,9,59,82,114,111,132,135,9,50,95,94,30,9,51,60,9,53,100,9,74,121,46,46,66,66,76,70,87,106,9,41,82,31,72,37,40,49,40,13,48,28,49,76,120,132,148,9,75,85,28,13,57,41,94,99,120,13,65,41,127,13,54,9,68,139,64,113,100,30,9,69,79,146,9,49,125,9,127,125,125,129,10,126,127,128,129,87,10,115,51,51,43,122,127,122,72,91,57,49,61,43,57,49,61,114,103,33,103,29,24,45,55,43,39,32,32,34,63,35,34,28,53,45,30,21,35,40,17,59,43,17,49,41,17,22,37,17,13,77,27,43,87,13,37,43,74,207,40,24,24,13,9,98,54,68,34,32,56,55,24,28,28,46,59,53,57,27,17,46,111,112,104,62,45,51,58,27,17,115,106,88,136,27,17,92,115,38,79,39,45,21,27,17,57,110,38,195,101,103,76,136,47,31,21,51,47,112,111,111,110,99,85,31,21,51,17,250,115,114,117,74,150,41,64,123,192,75,35,25,62,62,21,17,102,59,17,64,104,114,110,108,106,113,102,218,31,21,68,36,89,35,25,49,100,65,71,58,62,29,66,74,116,96,66,94,118,74,37,33,89,102,70,33,29,190,59,66,29,25,82,31,21,161,82,48,59,21,74,95,179,137,77,164,74,69,29,25,21,17,200,52,110,124,17,100,51,61,51,17,122,79,51,82,51,17,116,73,71,17,120,58,65,21,17,70,60,47,57,111,43,17,69,71,17,76,77,17,62,95,51,100,59,59,21,17,74,63,17,22,52,142,69,136,134,54,171,158,144,148,147,141,143,82,68,74,25,48,21,92,73,21,17,13,69,44,40,47,40,13,57,54,57,43,76,27,17,85,62,56,116,55,56,66,66,61,53,61,53,54,77,77,43,38,38,17,22,61,17,52,52,87,13,72,35,35,84,42,88,46,44,49,82,82,25,21,17,24,124,124,18,13,82,110,49,114,84,21,26,71,21,17,13,66,80,51,51,51,17,22,51,17,13,52,62,97,57,63,45,25,21,17,33,13,72,33,80,44,146,67,41,21,37,17,36,13,73,42,56,51,95,62,53,102,103,101,33,88,46,57,50,48,25,30,70,78,72,62,67,56,122,103,29,25,21,50,111,109,89,107,55,107,25,31,21,105,108,108,43,75,118,47,87,35,25,21,17,22,104,105,62,88,46,57,48,25,30,54,25,21,17,99,101,102,64,113,88,46,57,84,25,21,17,13,72,65,39,87,42,83,21,34,17,65,114,115,114,112,81,99,109,43,113,111,71,145,71,63,25,21,32,17,72,114,66,107,113,108,112,34,81,102,36,21,111,60,89,155,127,32,17,29,13,61,64,71,75,115,117,17,22,48,86,120,76,44,17,13,65,80,41,125,128,124,128,122,76,97,60,83,21,17,13,59,200,110,124,27,17,81,117,51,117,113,75,75,57,71,17,98,81,76,31,21,17,105,64,69,50,76,76,72,74,132,106,102,71,97,33,39,29,135,214,69,67,93,29,160,116,85,93,143,33,29,34,89,160,96,104,94,96,170,160,37,33,110,143,124,120,170,141,33,106,155,168,51,92,37,33,29,66,65,129,29,35,25,50,64,35,25,21,56,70,75,56,17,13,58,67,93,54,87,37,97,21,17,13,64,73,73,56,56,72,100,47,171,17,13,73,38,50,94,111,154,87,46,17,67,13,58,128,141,61,61,97,58,43,98,46,152,69,137,29,25,98,46,90,58,29,25,47,98,25,21,17,93,54,88,37,86,21,17,13,9,48,78,176,9,47,124,90,9,47,64,275,9,44,73,9,51,102,9,67,40,87,44,85,138,17,13,30,9,55,174,9,62,117,88,49,91,113,111,86,81,128,108,83,31,110,51,91,63,51,49,9,50,54,42,42,50,32,129,53,116,121,122,135,91,21,55,63,21,65,93,55,21,26,100,95,102,100,63,95,42,92,89,158,25,21,17,22,67,17,124,87,33,102,142,87,21,17,13,42,9,65,62,9,44,28,65,57,13,26,9,35,59,39,32,31,155,25,48,203,148,32,29,26,28,48,250,188,31,31,30,30,48,197,144,27,27,31,30,31,31,32,37,41,31,37,45,38,46,30,31,37,38,154,29,59,113,21,32,24,85,145,21,26,65,21,13,9,42,43,40,65,181,63,13,40,9,38,54,85,116,195,9,88,89,89,72,82,32,41,54,61,235,21,32,43,161,49,55,102,45,100,71,56,55,65,49,109,59,21,13,29,9,54,34,55,49,74,48,109,154,13,34,44,65,70,79,41,48,57,63,121,122,126,43,65,44,66,49,55,74,56,55,59,94,82,45,59,87,76,48,157,13,25,9,50,29,97,191,163,111,38,9,60,51,43,58,32,17,13,25,9,65,48,43,58,32,17,13,25,9,53,59,70,81,68,53,100,70,21,57,17,13,25,9,71,23,107,60,81,33,52,33,21,46,17,13,26,9,109,111,108,69,53,35,26,44,128,75,39,59,56,25,48,64,79,55,44,50,29,64,57,51,29,27,41,36,21,17,14,76,40,45,48,41,13,78,9,114,110,48,40,86,97,148,33,13,58,115,37,70,102,145,34,19,104,84,60,13,92,9,114,73,67,19,150,63,9,70,64,93,81,9,79,64,147,107,92,81,9,64,100,9,61,39,83,42,77,36,21,17,13,84,93,28,13,25,9,38,42,37,29,13,27,9,56,56,58,13,71,31,52,32,17,13,25,9,117,119,33,71,48,62,40,17,124,104,162,17,94,94,93,59,68,39,17,13,32,9,45,101,108,62,94,91,9,52,68,35,41,104,13,50,48,41,111,99,13,59,104,13,50,46,41,108,96,13,42,104,13,51,48,41,108,96,13,43,106,13,48,41,137,125,13,46,36,129,17,96,112,48,109,104,13,69,52,13,43,47,13,51,103,13,54,103,13,45,36,13,55,128,116,13,46,135,13,53,112,113,97,69,13,38,9,64,110,47,41,48,69,31,55,31,32,13,97,9,50,96,9,62,38,99,21,9,60,19,64,54,33,57,199,9,65,90,153,26,9,57,22,28,61,53,21,9,62,150,9,58,155,121,53,71,48,9,58,104,104,9,70,108,9,58,87,9,60,90,9,69,115,9,40,37,34,46,38,46,74,48,69,48,41,54,78,45,69,50,71,59,80,13,29,9,55,38,60,72,91,38,99,70,62,9,45,99,100,71,43,67,9,60,35,62,13,71,34,13,71,82,13,29,9,39,64,59,53,9,47,85,56,108,59,9,46,32,55,66,48,54,50,56,68,66,68,49,69,21,13,24,9,41,37,71,139,138,48,9,48,55,91,13,29,9,56,54,37,39,96,40,74,17,13,37,9,81,31,92,36,59,68,63,33,21,41,17,34,75,13,29,9,53,160,9,49,114,9,54,53,75,35,57,37,21,17,28,13,107,28,13,54,9,39,90,9,36,87,9,37,88,9,46,102,9,38,51,39,51,41,32,17,41,39,67,121,120,121,119,71,51,132,104,58,53,25,109,21,17,150,13,81,9,47,79,9,35,76,9,54,50,28,13,54,36,13,37,97,28,32,76,37,106,52,29,39,47,21,26,49,21,17,13,124,9,82,68,108,38,9,49,85,9,118,120,118,116,46,86,139,196,65,200,233,135,145,19,13,38,9,41,40,9,48,67,9,51,116,9,91,93,99,64,55,67,45,26,9,52,133,9,97,96,22,71,124,181,9,52,59,31,73,70,33,9,104,55,144,9,50,102,9,58,100,9,49,45,76,37,54,76,37,21,48,17,13,40,9,103,110,55,46,37,121,63,51,66,90,45,68,76,48,56,109,64,9,64,144,61,199,9,62,114,47,13,71,69,56,68,55,21,17,58,34,79,55,21,127,66,113,45,101,127,25,21,37,172,21,17,13,9,104,99,103,95,56,65,36,45,101,135,47,57,48,58,62,84,35,49,46,63,51,53,33,132,29,34,81,29,85,25,41,21,59,80,17,13,9,44,43,51,42,109,104,109,53,38,73,94,17,75,51,147,21,26,75,21,17,121,106,105,34,142,13,74,9,63,63,137,9,70,104,74,13,82,123,9,47,74,58,85,184,9,44,81,32,43,26,9,42,85,233,131,9,64,26,44,49,17,39,48,40,53,62,150,21,41,17,99,43,17,50,67,36,79,107,98,92,45,29,25,93,41,25,21,43,17,55,81,132,17,53,55,80,37,21,103,42,17,58,103,94,115,37,21,43,17,58,73,45,45,61,58,100,57,34,17,22,58,17,13,9,108,31,58,26,39,48,40,53,62,144,21,41,17,124,43,17,50,79,36,21,43,17,55,85,127,17,53,105,47,17,58,45,61,58,94,57,34,17,22,84,59,17,13,9,44,32,43,57,127,17,56,55,130,136,13,25,9,104,71,71,20,33,30,39,33,13,28,36,13,34,50,79,46,122,125,117,36,188,267,36,13,83,80,41,31,31,17,32,98,13,46,41,118,107,179,48,54,37,17,28,31,30,43,52,116,113,60,81,62,44,58,29,25,42,21,38,54,61,36,51,37,25,21,54,55,36,51,37,25,21,58,60,21,62,59,21,54,60,55,37,25,60,60,57,21,63,64,36,51,37,25,21,62,49,65,62,66,61,21,53,104,50,71,84,83,71,54,37,25,75,43,21,26,93,95,62,21,37,84,70,64,42,21,32,32,17,13,53,37,140,42,54,13,52,37,107,96,59,53,52,21,80,74,127,21,86,59,67,25,97,108,21,67,102,21,40,17,98,96,95,44,65,53,52,21,107,105,105,74,124,70,25,21,40,17,64,174,111,17,54,33,13,56,89,58,48,17,63,87,105,21,75,127,21,17,67,13,46,63,32,75,128,74,92,136,241,37,119,21,89,52,21,17,33,13,55,82,41,71,52,45,86,74,65,80,53,73,93,53,100,33,29,34,182,109,94,107,33,29,125,25,40,21,17,33,13,51,66,57,54,36,17,96,97,95,95,97,96,70,77,70,86,55,36,17,76,13,50,59,66,57,59,122,17,119,112,17,22,43,78,224,25,138,262,25,21,75,33,142,21,17,68,13,53,41,45,43,31,79,44,134,108,48,33,21,65,61,95,101,99,104,80,36,21,59,101,105,91,62,48,21,49,46,21,17,33,65,61,105,107,107,122,84,40,25,51,66,52,25,53,50,25,21,17,154,13,51,92,67,45,86,45,27,101,40,17,44,29,34,17,95,96,95,100,95,99,97,46,69,106,131,21,17,95,45,41,45,40,79,44,42,47,100,59,87,21,26,100,92,60,58,71,40,62,50,65,58,40,104,102,59,54,39,44,25,21,61,59,101,105,91,62,48,21,99,101,75,48,30,21,17,103,33,128,56,71,17,39,30,13,101,99,49,75,53,112,17,106,157,40,17,30,13,67,106,134,130,84,48,61,66,206,47,25,21,17,55,109,74,36,21,17,49,57,50,66,91,166,97,59,25,96,91,67,191,85,51,29,25,21,17,33,13,72,98,55,78,33,67,73,42,25,21,17,33,13,73,63,45,32,17,131,146,32,32,17,81,60,54,90,132,19,13,98,160,67,97,103,40,149,142,41,25,21,17,141,13,118,146,106,149,52,41,21,17,165,13,69,59,92,104,17,104,83,17,71,29,169,17,28,13,73,61,27,84,17,90,13,64,52,80,51,145,114,17,28,13,75,50,46,52,64,62,119,52,57,58,63,63,68,70,104,95,25,104,95,25,67,91,25,68,90,25,47,82,111,29,88,110,29,25,83,41,115,25,85,42,115,25,67,94,25,68,93,25,30,53,78,45,64,103,25,71,64,71,83,149,78,127,29,73,81,29,25,30,45,72,125,126,55,58,43,123,146,46,43,145,124,17,28,13,90,63,62,32,17,71,80,43,32,17,48,137,50,59,88,13,94,131,140,141,148,149,135,134,142,141,126,171,59,127,147,152,103,13,78,47,32,17,121,45,17,59,200,67,17,172,99,41,21,64,48,21,32,17,61,44,36,21,127,46,103,60,85,92,177,17,33,76,129,82,96,17,44,127,17,28,13,90,108,121,45,17,74,62,145,87,21,32,17,78,32,17,94,130,134,85,119,17,40,85,86,84,137,13,125,160,106,13,102,65,68,68,71,72,42,32,17,76,104,74,51,69,47,95,66,58,29,25,65,66,76,29,69,25,30,40,25,21,107,17,65,88,152,40,36,17,175,113,13,64,31,36,84,34,112,28,59,17,13,113,115,119,119,119,39,59,40,59,36,21,59,41,21,68,82,69,74,25,21,32,18,13,92,110,46,32,17,109,120,140,36,32,47,114,119,37,113,96,109,101,88,122,17,22,84,118,17,39,118,17,18,65,52,0,67,68,50,0,26,37,36,43,37,36,43,19,0,70,50,0,74,0,67,69,69,65,59,18,178,108,13,59,104,159,68,13,86,58,229,32,17,117,69,92,32,17,97,87,41,32,17,132,71,86,103,32,17,140,38,37,17,104,96,58,132,122,120,113,106,106,63,21,111,59,17,13,69,60,60,108,87,21,32,17,88,64,72,32,17,31,82,40,68,83,60,59,21,17,95,112,32,17,34,96,61,157,40,17,110,75,125,51,36,17,88,13,78,34,95,17,109,99,55,108,71,46,21,17,103,107,109,107,29,69,64,73,67,13,83,69,132,88,114,102,21,17,144,63,114,152,67,148,123,25,21,17,28,13,93,98,141,96,44,80,102,25,125,88,91,25,92,37,164,25,21,17,28,13,118,66,57,103,63,155,75,17,36,45,130,128,87,65,58,74,173,50,103,50,50,33,29,25,36,47,48,60,59,78,50,82,59,53,77,52,84,57,74,79,25,30,17,28,13,73,59,132,17,71,29,194,17,28,13,9,62,51,102,106,101,70,104,78,47,17,120,61,115,36,21,17,13,135,88,13,92,98,93,94,73,53,9,48,65,102,58,57,64,15,9,70,43,43,29,13,79,45,67,63,62,48,17,13,46,9,55,67,141,15,9,44,52,50,57,70,49,21,17,13,18,59,13,9,42,120,9,132,79,79,69,63,46,74,103,36,125,13,18,59,36,13,9,51,37,113,114,89,72,89,98,148,9,57,151,9,63,138,9,71,108,82,106,81,136,134,71,72,47,68,9,76,113,115,110,115,112,107,109,90,67,117,162,9,55,61,38,43,34,17,52,83,17,51,74,17,29,15,9,56,143,50,56,110,107,74,58,111,68,60,21,26,63,21,17,13,9,60,54,30,121,122,120,121,80,18,34,57,58,18,60,44,47,26,44,51,26,22,18,126,123,118,63,157,59,167,59,81,77,100,78,157,65,155,78,53,33,102,29,25,21,17,129,129,128,93,18,95,18,78,44,47,26,44,51,26,22,18,126,126,127,39,130,50,111,79,147,94,136,148,119,103,29,25,21,17,13,43,9,51,45,49,13,49,43,33,13,103,115,126,123,120,53,45,70,104,37,17,63,55,69,176,21,83,185,21,17,77,47,13,97,131,114,50,13,85,87,131,91,13,67,76,113,114,50,67,57,64,53,83,108,99,34,25,69,21,17,74,99,93,79,95,69,63,143,112,103,29,34,25,100,21,17,13,56,74,66,33,70,98,142,126,137,140,145,105,73,37,17,60,71,120,21,26,130,21,37,17,13,74,108,59,63,58,32,17,13,31,66,13,18,28,13,31,28,13,72,112,116,67,94,76,62,73,183,79,113,109,70,116,136,140,71,13,114,110,51,176,150,93,67,101,58,127,77,42,90,114,111,62,105,74,40,219,136,21,54,17,13,143,109,70,28,13,82,9,81,234,9,71,211,9,55,186,9,62,52,88,43,59,80,23,13,72,126,95,140,88,92,88,46,33,108,67,55,117,78,99,39,63,94,131,74,69,119,33,29,25,21,62,122,21,17,119,143,51,113,125,107,21,17,77,101,13,29,103,13,9,54,43,99,9,66,39,31,79,41,13,73,35,49,34,13,141,42,116,13,30,29,13,74,96,125,9,54,60,111,49,69,13,18,69,13,9,43,48,53,62,9,11,78,34,75,11,57,57,73,87,60,9,75,55,86,91,87,84,99,51,17,13,9,100,89,166,124,13,9,44,56,62,56,88,48,59,151,13,74,61,94,47,13,84,37,49,104,125,26,47,94,125,26,43,78,103,129,21,26,52,102,26,13,103,100,52,13,85,33,73,75,112,17,33,99,131,54,70,78,160,25,21,17,13,35,9,71,75,113,45,47,110,125,121,82,32,79,46,76,108,85,25,21,58,103,21,87,17,31,66,17,13,51,63,119,58,13,45,65,56,64,69,17,61,91,41,17,45,61,17,13,9,44,87,47,71,46,76,17,13,51,63,115,13,9,61,84,66,58,98,61,68,42,46,37,13,45,70,78,65,97,63,13,55,71,73,85,72,104,70,13,77,84,82,71,60,57,160,72,70,90,124,78,13,67,77,81,57,50,139,65,63,76,117,71,13,9,58,50,78,50,62,59,93,85,17,13,51,52,67,13,9,76,175,9,45,116,90,47,49,123,36,81,90,80,17,13,81,34,41,87,50,28,41,20,147,81,103,17,44,142,17,161,137,17,22,159,17,33,13,89,166,13,61,54,40,93,107,94,93,33,92,98,116,25,23,17,13,18,56,13,54,136,126,136,79,14,137,146,119,14,109,14,21,19,37,52,27,17,19,14,21,19,31,56,68,23,77,68,33,23,17,19,14,135,111,14,21,19,55,50,17,19,14,21,19,33,56,73,72,22,77,56,23,17,19,14,140,123,14,137,120,92,92,17,22,85,17,13,43,113,89,73,59,13,78,55,150,37,17,22,78,35,17,13,83,56,75,92,33,13,91,72,33,33,13,114,130,96,33,13,58,58,77,63,33,33,17,39,54,88,68,17,22,47,57,181,78,133,122,53,84,79,75,75,83,89,25,30,84,79,75,75,83,81,73,25,21,17,29,13,9,51,64,54,126,134,30,9,44,137,9,54,47,128,15,9,55,56,33,13,72,71,42,74,40,62,21,17,13,43,41,73,40,117,118,62,92,52,46,34,75,39,123,25,83,34,25,56,72,21,116,114,61,138,17,108,55,76,119,45,56,59,134,66,76,124,49,29,25,81,21,17,13,29,9,94,63,40,73,33,13,72,41,59,74,47,134,17,47,53,55,59,84,78,49,28,13,67,38,101,102,71,69,13,9,75,74,27,53,13,39,41,74,46,75,51,51,90,21,118,13,9,66,51,68,83,193,94,33,69,85,30,37,80,13,64,55,61,65,13,9,77,106,28,33,107,9,83,113,93,102,89,105,86,127,80,42,85,86,29,34,17,210,126,17,13,29,9,61,54,23,73,43,66,100,129,125,46,45,25,73,78,21,101,78,105,140,21,90,17,13,29,9,71,71,33,82,132,13,29,9,57,54,23,62,73,43,45,46,148,17,13,29,9,73,45,68,112,32,17,91,48,17,35,13,25,9,65,80,77,39,105,33,13,29,9,56,116,121,71,29,34,13,125,131,91,76,59,13,80,23,47,13,29,9,141,64,61,137,107,9,76,46,52,93,32,13,103,81,150,75,87,13,60,82,154,55,9,95,78,93,13,29,9,72,47,125,41,42,60,48,58,116,42,52,124,125,126,122,63,81,133,57,54,41,106,24,37,13,9,11,94,88,11,44,27,32,13,37,44,13,51,64,160,13,29,70,108,112,13,9,112,152,78,23,73,27,34,42,82,71,126,153,99,88,146,93,21,48,74,21,88,38,80,92,21,162,73,61,74,21,26,83,38,45,25,88,90,48,74,25,67,52,142,47,148,50,89,64,124,37,33,49,29,25,110,21,45,39,47,136,32,43,149,108,82,55,57,59,59,24,54,13,9,67,89,48,28,13,124,29,13,63,144,124,9,79,41,66,59,108,32,62,31,36,21,17,13,83,121,33,13,70,72,110,9,51,146,9,74,47,23,45,72,99,113,87,80,21,17,66,58,31,98,21,41,65,86,44,25,21,208,17,33,38,9,123,123,95,78,60,62,102,33,13,80,9,82,47,130,41,46,13,84,23,47,99,94,35,58,120,17,35,82,133,220,17,13,29,9,121,127,128,21,84,109,193,40,9,126,77,42,142,9,70,94,154,101,127,33,13,72,57,108,121,41,85,17,22,29,17,39,9,58,41,52,41,45,78,32,9,62,149,83,150,47,87,67,37,17,101,13,18,59,13,9,102,105,78,52,32,44,44,43,60,43,43,43,41,48,32,56,55,72,45,92,13,25,9,82,975,9,82,979,9,128,69,70,65,77,54,97,149,101,167,154,37,13,9,96,90,80,98,65,107,91,103,108,81,75,110,21,101,91,56,107,21,17,13,34,9,103,105,53,61,60,53,13,51,136,13,58,129,13,24,9,11,57,10,68,86,71,49,10,83,99,10,107,103,10,77,57,11,56,62,102,33,13,38,43,13,37,34,51,41,51,49,46,89,45,47,70,47,68,47,82,46,45,70,55,44,139,48,81,50,59,90,48,74,56,46,91,116,17,53,86,44,89,91,57,149,93,75,140,73,17,49,67,45,69,44,50,68,49,53,87,13,29,58,47,13,9,44,96,57,9,76,117,150,129,38,50,13,64,9,76,66,67,64,9,65,93,117,85,49,72,13,29,9,83,42,149,149,151,153,149,33,86,43,71,46,40,21,91,36,31,21,43,17,110,13,61,120,9,67,60,90,84,67,13,65,58,95,30,37,17,84,67,13,27,9,92,64,29,149,80,64,75,49,123,75,21,17,73,147,74,17,13,34,9,61,48,71,67,153,82,45,122,51,90,87,34,75,91,188,17,35,13,103,44,52,38,13,18,88,60,99,58,119,70,70,184,73,17,89,53,102,17,46,13,9,55,76,68,57,153,40,18,28,9,68,34,37,13,124,125,89,114,56,9,69,52,54,65,58,73,111,102,83,52,72,40,81,17,87,40,81,17,88,111,104,96,99,67,43,47,38,170,98,40,13,40,91,97,40,89,17,55,13,26,9,70,73,28,62,90,83,13,47,81,111,86,85,46,118,62,154,30,186,13,26,9,109,108,57,69,109,119,9,107,52,41,93,68,122,26,17,13,94,39,13,112,9,73,109,97,46,28,9,100,108,108,105,59,47,105,63,35,40,13,80,24,33,13,54,62,13,30,35,76,43,74,32,41,87,52,21,189,66,41,21,26,76,54,21,17,13,115,32,125,13,9,57,51,136,13,82,120,9,49,91,9,40,84,111,9,65,41,47,34,34,71,69,54,45,52,36,57,59,141,21,90,54,54,60,21,54,57,40,47,26,96,98,98,97,97,97,96,69,91,165,40,59,56,21,26,132,56,21,17,96,48,51,56,17,22,123,114,103,98,17,13,41,67,13,110,120,13,79,201,95,9,47,65,28,13,47,31,74,112,13,31,9,38,32,52,55,41,69,44,44,62,24,33,13,9,46,94,70,97,9,50,54,38,149,123,114,58,17,70,129,67,142,91,96,54,134,122,108,90,94,104,21,17,109,77,70,144,90,117,17,13,38,9,50,19,98,147,9,49,19,98,141,104,9,79,31,62,41,78,78,79,67,17,13,104,77,9,52,103,47,41,63,26,43,107,13,41,9,54,69,31,78,91,57,37,41,71,86,150,54,67,79,51,82,53,54,50,50,50,105,110,37,74,34,72,57,17,13,27,74,40,57,115,75,71,80,59,130,120,123,69,256,76,41,90,40,79,45,25,69,113,25,21,91,131,41,136,102,35,49,21,49,125,72,137,130,41,66,25,21,151,119,114,96,42,86,25,132,201,25,21,60,48,50,72,21,37,41,34,139,17,74,59,77,21,53,124,45,65,58,58,58,21,86,50,103,49,97,25,56,50,37,25,109,21,26,109,43,21,29,17,22,55,84,88,81,106,124,50,17,111,87,79,61,25,86,61,25,30,61,25,53,65,25,21,17,22,68,17,45,13,115,98,119,41,94,98,38,113,70,196,25,68,51,21,17,13,38,33,13,45,49,120,41,61,54,54,17,130,119,13,45,48,36,46,106,46,106,46,108,121,120,40,63,17,52,95,17,45,42,17,30,13,9,42,87,142,101,9,59,62,9,63,36,56,9,48,31,77,93,72,59,13,18,61,13,35,9,52,36,56,9,41,78,120,134,62,127,99,54,149,112,13,35,56,9,44,48,9,11,114,11,52,102,9,53,35,80,78,9,11,143,10,63,128,137,117,42,11,95,59,91,57,44,41,32,59,55,115,80,43,50,55,79,95,108,71,59,50,83,21,52,52,86,161,85,66,21,17,22,89,51,134,65,21,110,46,48,21,54,117,49,98,25,21,26,120,21,17,13,36,47,130,17,13,40,121,139,103,72,101,112,97,133,61,179,21,104,142,191,101,93,134,73,70,223,82,84,62,82,202,17,13,35,31,13,67,70,13,107,15,72,109,75,15,48,54,130,120,30,13,9,52,35,72,35,120,95,54,63,55,21,17,87,95,17,22,92,17,13,33,9,64,84,35,63,60,31,200,150,21,17,13,9,11,160,96,65,11,54,89,9,45,56,69,84,80,9,11,97,100,101,71,11,46,43,40,89,58,36,55,47,107,40,72,68,21,52,99,45,74,83,21,35,146,64,17,22,40,181,21,64,17,13,40,9,70,68,51,70,33,13,60,56,13,133,42,33,13,112,40,147,93,102,104,24,67,13,26,9,46,59,46,42,13,57,92,80,66,164,17,40,151,67,36,59,25,41,21,17,28,47,17,13,34,120,38,51,13,39,9,11,111,117,10,159,94,11,100,84,145,82,146,93,152,60,121,77,30,17,124,54,82,84,17,129,86,208,17,13,29,9,63,52,121,9,40,86,66,59,85,60,123,9,66,122,9,76,53,38,13,67,105,37,142,41,17,22,94,43,17,13,64,61,86,42,63,81,13,90,116,154,13,30,9,82,166,27,47,56,89,54,55,129,36,58,17,95,41,46,17,33,13,126,27,9,108,47,91,42,214,17,13,53,83,38,108,212,17,13,27,91,83,63,27,17,84,200,13,50,81,143,13,9,11,105,132,60,11,76,68,43,58,57,69,105,17,76,67,114,17,22,78,17,13,58,9,53,67,34,33,24,9,48,58,9,57,63,33,64,13,9,11,76,11,54,78,80,9,51,42,73,96,13,63,36,140,17,13,9,68,76,43,45,13,40,67,131,134,140,64,88,51,43,89,164,17,36,97,90,68,80,115,67,21,17,81,52,60,71,44,148,21,17,13,43,46,67,52,151,13,9,11,117,33,77,57,69,89,46,84,61,48,114,11,78,57,117,117,51,64,70,90,76,122,32,17,13,119,79,35,77,36,21,17,13,25,9,52,142,59,103,110,9,54,44,34,71,84,87,17,28,13,18,33,13,9,55,88,9,11,74,98,11,46,105,28,13,57,60,65,90,13,9,11,64,80,46,62,111,66,11,94,63,54,68,63,116,103,9,11,90,80,98,62,105,121,66,138,11,116,80,26,50,93,105,127,74,94,125,55,62,40,150,25,37,21,17,49,104,91,93,50,36,187,21,33,17,13,91,86,210,108,97,36,213,21,33,17,13,58,69,28,13,73,91,42,108,78,36,175,21,33,17,28,13,62,87,26,28,13,106,46,98,100,118,15,122,34,92,51,43,133,36,214,21,33,17,71,140,13,60,42,28,13,68,97,222,13,82,32,241,17,29,13,24,9,56,93,118,9,56,108,9,47,65,9,39,100,9,51,74,9,72,82,69,61,56,9,78,82,92,84,79,9,72,67,70,33,13,100,23,40,49,93,13,24,9,47,102,9,54,59,55,73,13,31,9,65,100,147,9,60,60,87,226,9,54,186,114,9,46,76,35,13,92,9,51,82,150,52,82,120,27,32,17,13,9,66,49,123,13,54,51,243,17,133,89,108,17,13,25,9,59,60,73,25,116,13,27,9,66,47,33,13,45,53,111,13,40,9,90,86,9,99,142,79,31,59,29,58,55,146,48,36,21,19,13,49,33,91,94,84,26,112,92,151,86,79,52,100,242,313,36,21,17,178,28,13,25,9,64,112,111,9,103,65,66,149,88,21,48,56,58,91,21,62,90,21,17,114,170,147,17,32,48,84,21,56,123,39,21,17,127,94,108,37,17,22,132,83,98,21,17,13,18,32,64,64,21,80,21,17,74,13,122,34,106,123,230,56,13,25,24,171,95,53,112,70,39,21,63,161,167,25,49,154,25,39,21,95,132,21,37,17,103,123,17,167,112,170,17,13,18,111,89,17,73,91,57,53,116,79,121,37,17,147,13,89,9,11,98,93,51,80,79,11,76,52,23,170,158,114,95,144,17,13,25,9,92,99,99,44,66,54,101,13,23,92,92,68,32,13,40,57,13,80,102,106,104,76,44,148,64,79,52,74,170,55,25,21,17,13,73,71,87,99,43,13,126,143,130,70,32,13,82,9,75,57,86,23,13,34,51,63,67,91,79,107,127,13,76,63,68,79,118,13,36,152,13,9,66,60,36,55,36,54,53,47,47,52,56,48,49,48,49,54,53,63,50,37,49,55,127,28,74,17,15,9,11,129,133,11,58,56,29,13,57,26,73,33,33,17,83,70,32,17,13,9,43,44,33,33,13,42,9,85,26,28,150,83,41,141,187,30,21,17,13,78,68,60,216,13,18,76,92,190,115,17,22,79,65,111,54,262,21,26,108,55,74,191,130,180,25,30,94,136,85,162,25,21,17,13,99,30,65,13,159,9,68,83,207,50,9,66,116,103,9,58,51,59,56,89,49,76,97,37,17,13,9,89,67,29,33,13,59,56,89,49,59,87,119,37,17,13,9,78,111,9,81,60,43,43,62,142,17,39,13,81,9,85,69,65,126,118,32,152,9,76,92,59,9,87,91,230,85,63,153,79,135,27,34,31,42,189,65,40,83,17,22,64,17,110,15,26,9,82,100,63,9,77,158,9,72,88,59,9,89,56,36,69,27,74,120,17,29,13,13,78,44,33,13,90,43,45,13,18,52,13,30,9,82,119,110,9,11,153,103,10,80,83,82,36,30,70,104,87,82,60,11,71,77,50,61,57,37,17,48,41,17,60,59,57,45,21,17,33,13,9,90,108,36,23,13,96,163,63,23,13,130,23,13,35,156,108,75,27,17,13,131,9,49,54,124,9,60,32,56,176,45,140,42,123,13,9,11,83,102,83,105,111,63,63,58,11,76,147,49,135,9,83,57,34,28,13,61,98,9,11,62,57,58,69,95,73,68,43,11,89,57,44,28,13,100,86,120,83,130,13,106,9,11,105,11,47,47,73,59,70,53,17,13,64,54,13,29,9,11,86,11,48,100,9,11,106,87,11,63,45,49,50,54,37,43,34,69,55,70,92,40,25,37,43,21,17,13,25,9,54,99,103,9,59,60,87,182,9,74,148,58,61,76,34,13,96,119,33,13,118,59,140,44,132,172,9,63,125,9,43,63,123,96,67,13,67,47,13,56,49,13,57,64,46,19,13,32,9,41,37,36,9,101,115,88,78,44,55,22,102,72,27,27,32,22,38,28,44,89,49,93,83,59,62,42,21,26,44,44,21,17,22,72,114,56,40,17,36,111,54,58,39,51,115,107,33,34,17,22,40,17,128,13,9,40,129,9,47,56,9,33,50,9,54,108,9,85,94,25,116,71,75,67,39,74,100,100,116,111,17,22,110,92,64,56,101,72,17,13,57,70,13,56,68,39,32,17,77,190,162,13,39,80,71,60,13,18,86,83,67,139,66,42,167,17,13,58,94,29,13,79,100,76,28,13,72,59,157,33,17,13,24,9,72,99,87,72,89,45,108,9,120,47,82,9,58,84,84,9,63,51,66,107,133,58,21,138,63,21,17,13,29,9,119,114,114,124,125,76,69,164,115,89,125,63,15,36,94,89,19,13,131,9,77,86,114,69,45,9,56,36,32,13,69,107,106,37,9,80,51,82,13,117,105,114,37,52,201,37,105,102,69,65,115,88,105,110,110,89,90,107,86,87,105,167,41,82,103,115,112,112,114,110,115,118,96,179,17,13,58,108,74,116,27,128,17,13,61,27,67,96,13,48,34,63,68,104,71,17,13,27,114,69,13,45,9,51,97,113,167,68,9,93,40,45,44,119,55,109,105,17,13,27,27,27,52,34,44,125,54,47,53,21,26,172,49,21,17,22,127,109,197,131,49,17,88,52,17,13,128,9,94,68,58,180,23,64,132,81,33,211,121,34,85,21,60,224,41,21,17,13,37,9,44,57,37,13,73,77,41,13,72,40,13,33,9,11,107,92,94,78,11,165,116,123,69,86,138,202,85,66,23,70,194,17,182,31,32,17,83,52,32,17,56,31,32,17,140,37,32,17,65,84,49,32,17,52,38,153,105,51,63,90,54,33,118,63,55,66,141,25,69,57,55,25,21,17,47,117,108,32,17,51,114,57,74,68,66,21,17,59,114,17,35,269,143,45,169,21,83,103,21,60,46,21,17,29,13,9,131,80,51,170,132,72,17,33,13,61,93,108,115,84,67,77,86,123,152,143,72,17,13,105,58,108,48,34,63,68,127,116,123,119,131,199,142,79,76,21,17,13,27,128,58,59,47,61,142,158,143,78,72,17,13,29,74,117,79,58,31,21,78,104,157,21,17,13,9,11,95,11,46,87,88,29,65,52,45,17,13,9,85,104,44,41,26,9,11,99,11,50,67,45,104,69,72,53,23,17,30,13,52,60,13,51,166,13,55,59,35,74,65,45,38,113,167,64,82,35,74,252,63,27,21,26,50,21,18,65,32,17,39,13,24,9,11,74,11,55,37,39,34,48,47,93,68,28,97,22,41,87,58,45,28,155,65,67,22,51,49,43,43,103,109,64,119,28,93,96,137,22,13,35,9,11,97,11,61,39,48,47,29,51,29,49,43,43,98,103,41,29,24,43,13,9,76,22,23,58,65,88,39,84,13,18,89,45,90,13,76,9,82,44,128,109,13,18,89,13,9,51,80,29,132,95,199,29,13,96,37,29,110,61,9,64,19,59,35,166,13,75,74,124,124,33,89,43,60,58,52,41,39,43,17,50,114,74,44,74,44,13,82,55,45,26,97,207,68,57,69,194,13,41,92,100,251,32,190,125,214,73,17,34,13,18,64,76,50,49,34,26,17,59,132,13,9,77,48,33,42,40,72,56,203,13,30,42,41,89,43,72,56,39,67,17,42,65,17,13,76,257,13,219,9,110,84,64,84,73,30,31,51,101,126,66,17,13,54,71,70,37,35,128,17,46,13,55,103,97,14,101,99,67,14,100,49,14,97,96,103,161,92,93,93,94,89,61,14,49,91,40,29,14,91,87,88,49,14,92,40,34,14,43,47,46,23,114,123,166,30,104,105,80,105,41,14,109,104,89,40,126,13,26,129,13,25,30,13,107,63,105,55,31,49,107,103,36,68,133,120,25,179,36,90,52,98,156,33,79,51,29,25,30,82,25,21,26,48,36,53,41,36,53,225,156,42,62,59,51,33,68,61,29,34,93,29,34,26,149,69,40,25,102,117,173,169,161,130,42,167,104,175,25,30,100,25,97,46,21,17,58,105,17,57,128,17,22,159,78,100,21,44,115,21,45,87,21,17,13,96,78,27,79,87,85,202,72,179,31,74,82,105,236,21,17,75,83,81,13,116,98,55,59,58,50,50,120,41,21,168,65,41,21,37,17,100,63,152,33,21,48,50,51,55,53,117,53,74,41,29,25,30,174,153,148,25,196,105,101,137,76,37,25,21,26,51,21,171,119,111,33,21,39,103,106,108,54,47,126,200,109,105,141,80,41,29,25,175,123,115,37,25,21,64,42,17,33,13,9,102,96,88,36,119,64,108,131,71,72,9,72,101,30,40,118,13,124,32,41,108,91,78,54,168,14,55,28,13,156,37,52,128,100,50,13,60,49,13,62,123,39,98,66,9,53,56,84,9,64,105,9,72,126,65,9,72,96,81,24,133,53,27,140,50,58,34,33,13,114,48,140,103,49,32,9,85,69,66,36,13,66,208,13,33,9,103,152,157,78,9,66,36,31,57,46,62,86,29,17,45,43,39,17,13,34,9,77,66,70,43,81,41,109,21,40,17,46,142,79,96,39,144,112,21,17,48,13,31,60,39,91,78,83,49,43,13,18,46,13,127,47,44,13,57,44,58,46,13,100,97,100,46,81,101,32,114,101,111,99,61,67,101,17,48,13,112,107,45,41,45,132,17,22,52,54,69,139,137,25,21,101,17,46,13,112,114,115,117,116,117,114,113,110,112,117,52,141,56,42,13,95,139,128,46,13,100,9,64,103,9,11,28,100,92,11,111,125,123,231,9,76,66,73,39,163,17,13,73,53,44,13,93,93,96,95,48,61,46,58,46,13,32,73,67,44,41,101,17,48,13,100,102,100,46,93,45,77,50,17,101,50,87,83,116,95,50,17,115,90,95,50,17,107,13,99,106,105,73,83,40,111,37,143,108,21,73,136,21,17,33,13,80,42,9,63,47,40,29,13,41,63,44,51,26,78,52,52,41,106,71,44,29,93,44,29,25,21,24,17,29,13,46,28,13,69,9,59,55,28,13,52,119,91,75,28,13,106,84,126,70,66,72,72,100,36,21,17,50,161,17,53,163,17,29,13,24,9,74,26,47,59,101,59,47,42,80,51,76,50,45,40,120,34,25,21,26,75,41,86,78,110,86,92,125,25,44,124,34,25,21,17,37,59,53,77,110,17,33,78,147,185,17,13,18,74,66,99,13,140,69,103,78,87,141,17,13,20,81,107,14,9,87,142,99,30,100,13,58,148,41,45,13,40,141,9,74,39,23,13,83,108,157,61,114,42,27,289,13,9,87,52,56,44,58,46,13,81,101,110,48,13,41,63,238,48,50,17,70,46,13,98,9,11,120,11,71,39,48,47,118,41,122,51,121,49,43,43,119,24,43,13,9,11,64,11,72,60,57,44,46,13,81,101,111,48,13,71,89,155,46,13,83,41,103,102,101,50,118,17,38,74,46,13,111,9,63,52,69,138,49,96,111,437,88,42,48,42,122,64,9,84,57,87,81,252,52,71,205,17,37,13,58,58,44,46,13,83,111,48,13,42,67,150,46,13,94,9,11,75,83,105,11,72,83,58,60,98,15,9,72,32,46,86,45,85,56,96,41,81,49,53,93,13,100,9,11,63,76,147,103,93,11,76,43,106,103,104,56,49,81,30,13,57,97,105,45,48,111,112,56,92,13,26,9,11,90,16,11,40,19,48,29,13,95,132,30,23,77,46,32,86,51,142,13,25,9,49,23,25,51,104,95,82,82,68,93,75,21,93,75,21,131,36,17,74,13,9,47,19,95,185,160,60,9,61,31,33,13,21,21,92,114,37,17,40,35,13,58,45,72,117,43,32,17,128,118,54,49,21,201,54,36,21,123,41,21,17,13,74,33,28,13,119,33,13,41,9,47,31,29,13,37,82,39,13,149,72,68,13,9,11,74,61,94,11,55,19,64,100,51,106,91,41,13,54,66,32,13,56,56,34,65,72,69,65,52,121,40,135,21,35,17,13,108,65,77,13,65,115,53,95,98,13,137,96,56,132,17,54,173,69,17,13,38,84,143,136,73,79,17,13,30,9,60,100,71,102,128,13,9,52,44,32,46,41,45,72,56,65,49,53,69,55,51,56,37,45,45,117,24,32,13,9,48,43,29,39,89,39,13,74,29,13,54,92,34,29,13,161,9,50,46,51,46,62,13,46,65,111,115,61,57,13,154,148,13,30,98,64,137,17,13,119,74,31,147,37,165,137,17,13,58,9,97,53,87,46,65,53,64,114,9,97,74,63,37,49,95,55,17,49,13,29,9,103,19,77,37,47,128,137,46,104,133,71,203,21,26,55,21,17,47,13,24,9,42,85,29,13,56,50,39,204,52,28,13,105,62,29,13,81,47,58,51,38,60,91,66,72,13,25,9,54,55,68,51,80,13,55,54,55,9,39,66,56,107,153,17,13,74,9,54,32,44,60,44,43,43,43,54,55,50,32,55,74,53,43,43,135,89,56,55,47,60,71,54,21,116,13,25,9,77,66,48,65,173,17,61,13,37,89,55,65,59,67,259,17,13,30,9,42,60,87,120,9,46,82,69,9,42,43,61,56,13,64,53,13,59,9,49,40,45,63,42,64,95,24,60,13,9,51,59,29,163,33,13,64,63,47,13,18,56,47,13,9,48,95,94,140,17,13,96,163,13,52,140,92,9,45,47,35,58,68,49,17,13,24,9,42,141,38,9,79,106,35,61,13,82,78,40,81,45,130,13,45,9,71,19,126,33,13,106,35,54,112,13,82,75,33,13,58,40,81,45,126,139,41,57,38,30,13,37,57,13,29,9,67,135,9,53,117,9,67,106,35,70,88,13,82,58,40,81,45,65,13,162,9,52,67,9,55,106,35,69,13,55,97,93,64,81,45,118,87,17,13,29,9,53,59,63,56,56,123,13,27,27,27,56,58,61,91,17,22,41,49,17,71,27,37,17,13,128,9,104,105,105,77,47,53,55,81,44,107,17,13,26,9,56,82,70,88,46,59,106,48,142,118,48,95,25,21,17,53,108,33,21,66,17,40,44,17,65,63,83,30,21,41,17,70,13,54,9,55,55,102,80,13,25,9,50,55,102,45,36,17,53,81,17,13,29,9,49,59,164,9,64,88,9,90,100,9,85,99,43,75,39,82,35,126,21,17,13,57,74,109,112,106,79,112,34,61,109,13,9,69,41,48,70,17,22,112,17,13,40,56,99,37,114,21,105,17,13,99,43,56,85,83,76,17,13,55,110,62,120,86,76,17,13,9,63,42,61,13,79,39,47,13,9,55,50,30,61,114,68,122,53,81,21,76,17,13,9,117,69,65,75,37,55,88,68,77,21,26,70,21,17,13,9,50,81,80,57,126,70,101,78,13,31,9,54,85,88,61,126,70,101,82,13,31,9,62,62,46,51,158,168,33,13,81,51,205,211,13,31,9,60,84,75,98,49,51,71,37,101,9,57,29,33,13,58,64,72,27,26,25,46,87,118,30,112,110,109,73,249,17,13,75,90,35,51,17,50,76,17,131,104,91,13,46,84,29,112,56,84,55,17,41,110,56,83,54,17,65,66,13,54,30,86,31,87,29,84,59,57,55,101,75,122,107,38,147,150,144,21,26,131,21,17,30,58,31,60,29,56,13,30,191,13,18,108,106,108,30,73,55,13,9,95,103,94,105,107,103,59,120,118,28,96,143,102,104,81,77,58,88,21,89,82,43,17,78,71,39,13,107,9,70,32,31,76,77,150,133,29,52,174,73,17,22,66,17,29,57,15,68,9,91,52,90,192,101,160,152,9,11,66,67,64,63,11,78,37,67,63,26,29,75,62,95,17,67,65,42,51,69,17,87,49,95,17,13,66,36,18,69,51,93,17,69,33,49,69,17,13,25,9,52,43,137,9,57,70,82,94,117,101,81,134,58,101,17,155,13,60,39,29,13,57,89,29,13,96,9,50,77,9,153,74,58,37,76,45,77,54,27,115,56,116,114,118,68,227,21,58,52,21,59,17,22,53,17,15,127,33,13,90,118,136,64,13,35,9,39,32,50,45,32,49,82,24,33,13,9,11,57,80,91,75,112,10,119,11,84,38,23,13,58,81,121,80,23,13,132,128,163,23,13,77,72,58,110,13,50,125,71,124,13,92,131,13,57,28,113,104,126,45,31,21,105,83,31,21,17,83,13,9,80,105,36,48,67,13,100,100,153,102,121,75,122,55,52,57,25,80,180,145,85,70,21,17,39,13,31,76,81,47,13,86,58,9,92,43,99,61,71,124,127,53,65,61,131,37,31,21,51,50,77,79,111,29,84,121,103,25,30,140,73,25,21,117,80,60,70,25,21,52,17,13,9,77,105,58,63,78,28,59,118,116,116,114,78,80,17,57,50,17,22,112,109,112,114,50,62,105,47,107,232,129,25,49,126,25,21,17,13,9,86,66,64,80,133,29,13,24,9,53,42,29,13,60,29,13,70,76,28,80,81,103,32,17,114,120,88,126,80,71,96,36,21,17,29,13,66,28,9,43,62,52,46,59,27,81,114,68,122,111,99,52,79,9,77,23,50,86,29,13,43,110,54,50,69,104,62,100,36,21,50,103,104,95,185,197,74,55,60,80,50,21,17,28,13,46,73,63,56,69,63,80,95,21,17,13,25,9,103,94,95,84,53,29,13,54,57,29,13,24,9,46,45,59,47,106,35,13,91,108,13,43,86,25,47,112,17,66,13,31,9,68,47,35,78,135,94,13,9,46,45,30,9,44,45,41,9,45,31,37,81,79,108,17,68,55,70,63,46,93,42,93,314,60,29,305,89,286,60,29,25,21,26,63,70,63,89,213,146,148,75,29,56,25,21,17,77,108,17,13,63,198,122,157,13,31,9,51,60,50,39,13,40,44,44,49,103,48,103,21,26,43,64,79,43,80,28,21,13,36,40,41,41,64,81,141,21,63,82,189,25,42,21,59,47,60,105,71,66,40,44,46,203,29,104,274,21,59,13,29,9,52,60,50,39,13,195,21,96,266,13,51,9,50,70,134,40,33,13,83,30,9,107,70,46,36,28,13,65,39,80,41,51,36,21,17,13,25,9,63,38,28,13,128,29,13,95,93,98,94,86,89,86,96,93,103,9,65,55,120,61,9,46,119,9,44,62,9,78,80,39,13,55,125,138,66,100,39,77,146,13,97,139,168,13,31,9,70,80,39,13,47,56,86,17,98,86,88,113,78,17,13,18,60,59,119,137,172,155,17,13,59,55,63,14,57,52,127,120,42,56,38,49,123,14,120,124,123,68,14,66,69,126,232,154,109,13,31,9,78,45,62,58,13,57,112,13,30,9,110,136,64,45,53,124,41,68,59,65,74,31,78,123,21,17,119,77,149,13,68,60,107,17,22,60,73,21,42,40,110,68,72,70,29,25,21,102,156,83,17,13,18,77,13,9,75,41,89,63,13,104,104,72,175,110,55,51,72,211,17,102,13,30,9,122,41,49,63,63,71,54,109,84,133,172,144,85,86,21,89,17,57,106,17,22,60,139,118,21,26,160,71,107,57,93,21,17,13,29,9,101,23,82,44,55,116,53,43,118,92,21,120,17,47,13,18,42,13,115,57,37,13,68,85,13,67,82,13,75,9,74,64,75,112,118,83,111,117,73,100,13,73,92,13,30,9,11,78,77,74,38,89,77,11,41,44,32,41,44,55,56,50,60,44,43,43,43,43,48,50,47,45,54,55,48,49,53,42,32,53,61,57,48,75,37,21,57,53,53,54,75,35,44,55,48,49,49,40,21,33,53,66,104,93,24,33,13,9,61,101,9,48,122,47,57,49,30,14,54,28,39,39,59,61,17,22,29,45,36,38,58,22,17,84,38,81,33,17,71,55,169,38,176,33,17,29,13,49,34,61,17,13,61,34,56,55,49,61,54,156,76,88,157,25,67,21,17,13,51,34,62,17,13,42,27,33,50,17,22,54,55,57,56,131,17,35,55,57,35,30,13,54,45,29,13,56,50,32,17,77,13,41,57,13,47,57,13,43,61,13,49,78,82,82,29,61,13,9,73,89,72,168,198,17,171,200,17,13,9,114,127,94,46,155,142,13,25,148,70,13,18,60,13,62,111,9,110,46,31,44,52,50,58,41,47,43,49,41,47,52,58,58,64,69,75,39,45,41,47,45,51,88,47,21,64,67,51,88,63,67,68,110,222,42,21,26,99,215,219,41,104,146,107,135,54,25,87,74,47,85,91,58,42,68,74,75,176,37,29,54,25,84,30,67,53,25,48,66,25,44,21,40,46,88,47,21,154,68,71,21,44,174,100,121,48,21,181,121,48,21,191,128,48,21,75,64,123,107,21,79,85,42,21,38,98,100,101,90,145,68,85,81,27,39,21,64,60,21,38,44,47,50,53,70,94,97,74,201,27,21,39,48,53,54,59,165,39,49,87,41,79,54,62,86,147,33,78,59,21,40,17,42,50,85,106,33,66,59,21,40,17,52,60,96,98,33,76,59,21,40,17,42,132,68,60,71,65,65,64,67,82,151,63,25,40,21,26,59,72,21,41,112,62,49,74,85,111,45,78,27,42,118,21,37,24,43,13,53,131,13,66,53,103,42,61,88,56,135,154,162,162,29,25,21,17,13,39,88,13,78,66,105,82,34,45,142,33,17,28,13,60,35,43,49,52,45,51,69,49,55,64,28,41,17,13,57,78,61,48,45,71,119,106,259,119,49,149,126,85,191,29,25,138,115,21,17,13,52,23,31,47,36,49,42,43,51,46,59,75,78,147,28,37,17,13,15,51,15,68,63,60,32,17,29,13,53,23,47,57,32,74,76,106,66,72,17,45,47,55,128,17,119,97,194,17,13,95,29,45,58,52,43,30,63,57,42,17,31,202,17,33,13,9,74,41,43,62,64,50,41,43,13,51,9,45,31,37,62,122,17,77,108,17,13,54,22,31,58,55,137,31,13,64,37,99,44,67,87,17,82,105,69,17,13,80,87,42,63,115,91,89,119,113,125,44,135,13,37,81,108,31,13,34,103,31,13,70,24,31,96,65,71,167,21,17,13,24,9,62,65,96,66,67,65,9,49,37,94,91,9,48,41,27,77,34,60,70,168,17,46,97,13,211,9,56,97,163,9,39,100,177,13,24,9,103,47,60,64,17,56,60,128,121,130,101,156,61,30,13,21,115,127,61,60,64,13,9,57,60,56,13,43,38,110,117,103,54,54,46,42,70,50,50,13,38,9,40,81,69,55,46,9,86,70,63,33,143,69,108,132,60,9,46,51,62,64,88,43,115,185,56,76,54,21,17,13,85,9,70,157,45,50,60,35,17,60,65,40,17,13,27,9,75,33,79,53,112,17,85,106,103,91,92,132,129,131,136,77,17,105,75,224,128,130,130,131,13,25,9,39,37,94,115,152,156,9,97,68,77,46,169,9,59,97,98,34,68,53,13,82,9,60,31,37,97,98,34,68,53,13,99,102,9,87,96,98,108,68,60,102,41,179,89,75,72,55,29,68,122,119,123,121,117,106,110,110,142,117,97,118,148,115,107,147,125,117,35,84,127,127,126,81,39,126,127,113,102,90,142,99,37,33,29,138,25,21,17,13,24,9,58,50,113,104,56,64,13,9,47,64,9,49,48,83,32,17,13,25,9,50,53,94,42,17,13,9,67,28,34,34,101,46,49,123,123,83,71,49,73,87,50,17,22,36,17,13,36,84,114,53,39,17,13,26,9,63,101,9,71,38,121,22,43,48,46,77,41,17,13,9,73,61,57,59,13,9,76,60,87,84,109,9,11,103,100,11,44,97,59,28,33,13,65,74,64,33,38,17,13,59,45,96,63,66,46,78,13,24,9,49,85,48,62,53,53,17,13,44,98,96,199,109,106,27,32,17,13,93,54,13,100,93,45,13,29,9,11,103,100,78,95,93,11,55,43,40,45,13,57,42,17,103,28,13,21,115,127,61,57,13,9,63,199,46,31,35,88,106,46,49,13,42,85,24,9,51,70,42,43,50,116,110,145,99,101,22,196,13,50,77,72,73,124,17,13,9,64,74,62,84,13,63,9,69,33,36,98,73,31,51,54,49,73,17,13,27,41,60,48,66,43,53,44,54,43,44,60,44,86,44,53,87,43,52,75,40,68,24,43,36,43,37,50,57,55,44,54,74,55,63,56,74,45,63,55,63,46,75,63,21,32,45,64,56,63,55,73,47,54,50,45,89,48,55,55,44,48,49,55,44,51,48,55,46,53,47,54,53,60,54,61,48,66,53,71,45,66,49,49,47,54,51,58,45,63,42,60,53,71,43,50,45,63,49,87,13,29,9,50,43,31,34,88,13,48,45,86,67,51,69,121,13,77,73,48,242,13,37,99,13,9,39,31,103,112,61,53,47,54,87,92,117,17,131,109,17,13,84,122,13,131,58,113,17,147,91,17,60,95,17,97,101,17,13,103,104,164,86,13,9,43,54,26,48,127,23,13,64,71,33,23,13,42,51,100,55,13,18,56,131,112,21,26,49,204,150,69,25,21,17,41,49,84,47,56,135,52,34,25,21,44,119,21,17,13,9,47,39,45,45,51,50,44,49,47,45,47,38,21,13,9,128,75,37,54,29,17,40,102,153,32,17,119,133,36,21,17,13,9,50,31,57,49,13,123,150,95,61,58,13,58,53,100,127,86,17,79,117,69,17,95,56,118,72,17,13,80,48,56,68,28,46,13,37,65,73,55,40,58,145,34,53,140,34,21,17,37,68,106,77,54,113,25,30,130,93,30,103,112,30,178,191,180,180,102,25,21,92,75,21,17,106,60,17,13,9,59,45,43,75,50,71,36,60,84,43,115,113,25,21,17,22,61,43,32,33,21,65,102,64,54,42,89,37,46,55,107,38,55,107,38,63,112,38,61,102,38,25,21,17,13,62,43,27,117,97,171,21,26,69,68,55,60,115,29,148,25,76,111,25,30,60,25,21,17,22,45,17,13,9,11,99,88,93,73,10,74,74,106,86,11,65,71,36,49,57,55,91,41,36,38,38,41,41,145,92,82,34,21,17,13,9,64,37,71,36,66,44,43,40,52,52,51,34,49,57,34,32,37,21,48,138,94,21,26,52,21,17,13,9,61,63,55,148,91,123,27,17,13,47,116,133,68,101,55,55,96,106,81,40,69,29,34,118,29,27,21,18,87,45,42,17,62,56,89,53,126,25,21,19,13,9,49,31,89,60,47,56,104,135,151,13,9,47,52,101,13,50,9,47,31,42,60,109,51,105,126,152,13,75,84,101,13,56,9,62,89,164,107,17,96,101,49,56,98,54,95,122,21,17,13,9,57,53,54,9,52,135,44,80,61,60,42,47,78,46,44,57,13,90,46,23,13,38,23,13,86,71,32,17,66,38,36,13,46,98,117,50,73,69,88,62,32,43,127,21,106,65,70,102,145,118,146,53,141,39,87,226,25,135,30,60,95,55,139,67,42,33,124,42,33,29,145,43,67,243,29,25,21,17,45,107,17,13,9,69,86,96,9,61,94,28,13,58,29,13,81,9,49,37,45,94,64,38,48,58,141,74,96,25,21,17,101,102,38,72,57,17,44,62,94,55,88,88,97,74,79,79,104,111,111,25,126,100,123,123,25,74,74,55,176,25,21,17,75,58,86,17,13,42,56,9,48,34,9,66,171,9,69,30,23,30,61,81,33,41,88,81,21,196,17,13,26,9,58,54,37,63,29,108,116,17,13,29,9,47,64,146,145,13,63,54,37,63,81,41,75,21,17,63,29,146,124,21,90,136,21,17,13,9,50,84,35,33,86,32,33,121,157,9,39,43,9,41,57,37,87,57,59,62,13,9,39,49,9,39,45,44,40,79,95,43,79,114,26,17,52,47,59,49,91,30,21,109,47,21,17,48,42,112,30,21,43,17,52,42,111,30,21,47,17,47,111,26,17,13,58,38,9,53,55,38,9,64,62,28,13,86,45,43,97,113,134,127,17,28,13,94,86,65,128,28,13,50,85,37,136,143,174,41,21,17,13,135,29,9,47,48,47,86,9,40,41,51,46,42,29,49,13,55,59,27,84,13,18,75,137,13,9,47,19,85,127,13,9,38,42,9,42,47,42,9,45,54,9,39,153,139,13,51,52,9,49,77,34,46,58,79,13,38,9,40,46,38,9,46,60,105,13,60,194,13,56,157,13,42,38,9,47,165,9,64,55,99,66,67,63,62,50,174,99,44,17,41,13,40,9,59,38,23,13,70,118,75,97,102,100,147,102,13,135,103,77,86,55,135,56,105,57,135,25,63,133,25,86,143,25,66,135,25,23,17,13,138,69,123,56,95,40,131,25,23,17,13,124,45,44,46,44,37,32,46,36,51,79,62,63,27,17,33,80,31,33,21,26,42,21,19,123,126,72,60,80,65,60,55,158,63,169,112,81,110,144,135,82,59,73,134,136,46,171,63,29,35,25,68,141,35,25,21,17,50,36,91,17,22,116,56,76,116,21,26,137,21,17,13,53,58,43,42,31,99,53,39,78,189,54,93,69,45,54,54,54,152,56,21,133,50,21,197,56,96,58,57,99,97,72,63,48,73,29,34,68,29,25,194,83,25,44,51,55,29,25,30,48,25,51,59,65,25,21,17,13,52,73,108,19,13,47,73,129,19,13,107,130,146,65,84,95,76,110,40,37,197,21,19,13,99,87,142,81,13,31,35,129,140,17,38,67,85,99,58,96,275,34,25,21,17,13,9,57,38,23,13,97,42,26,81,84,47,43,114,27,17,13,71,70,23,13,57,60,64,78,31,64,116,65,72,78,21,26,71,21,17,22,70,17,13,67,111,118,136,111,90,82,35,68,58,98,93,215,21,94,168,21,17,13,49,29,33,56,56,85,36,51,52,48,50,53,112,75,54,52,51,46,72,46,98,52,52,39,106,135,69,55,25,39,135,36,59,51,48,53,70,70,65,27,41,55,50,55,104,101,111,109,136,88,105,88,51,28,61,17,13,9,84,73,100,9,11,49,47,117,11,60,14,25,41,66,58,32,27,17,14,34,33,13,37,54,59,13,88,87,13,73,94,33,13,87,42,33,13,112,46,32,87,17,33,13,167,54,33,13,109,62,32,124,17,33,13,163,9,11,45,41,92,101,98,55,11,88,41,74,80,44,9,11,80,11,39,94,94,29,13,69,147,9,51,19,58,83,166,13,25,9,11,48,11,42,88,79,25,9,50,82,56,36,46,49,88,94,34,28,13,125,51,28,13,90,44,67,146,38,158,66,86,40,144,61,99,21,17,13,135,24,9,11,45,10,92,91,95,37,10,79,11,75,94,73,9,11,89,10,38,11,82,34,28,13,116,51,28,13,94,39,52,57,13,81,51,179,81,13,62,31,104,91,93,96,96,22,91,26,22,46,33,72,77,25,22,88,88,65,22,84,45,22,47,33,73,78,25,22,47,33,73,78,25,22,36,150,21,37,17,101,63,47,106,39,35,37,17,71,13,84,82,85,25,14,63,14,41,14,87,92,91,89,91,63,39,32,64,62,17,33,13,60,9,11,83,34,10,89,93,95,95,51,10,45,11,69,97,99,98,97,14,55,14,44,46,45,17,56,14,91,92,39,14,48,14,42,37,45,17,14,65,52,46,27,17,84,114,104,67,232,27,17,13,18,82,57,46,27,17,90,59,217,27,17,132,126,58,208,237,21,26,242,21,27,17,114,75,101,52,238,27,17,268,27,17,104,103,103,38,222,27,17,13,195,9,32,39,55,54,65,49,23,13,28,35,39,48,110,67,76,88,26,51,41,119,50,26,49,43,43,110,64,87,82,26,24,43,13,85,9,11,98,58,11,49,100,9,72,26,23,59,131,162,26,57,44,78,62,56,13,9,11,97,32,101,38,22,11,68,69,60,72,13,9,58,23,36,52,45,89,51,110,53,52,76,49,45,17,13,9,71,33,76,44,119,71,17,63,93,17,184,155,17,87,44,65,78,42,37,17,39,95,78,76,87,61,65,92,41,21,17,22,60,17,13,36,9,62,67,98,9,45,40,35,23,13,120,38,80,23,13,58,229,13,52,71,52,73,13,56,76,130,36,52,79,42,97,55,126,29,25,30,47,47,124,102,168,30,53,86,51,122,25,105,30,55,109,30,45,113,62,101,51,122,25,30,17,13,56,9,49,37,55,47,67,13,9,47,39,116,146,13,28,95,13,52,80,9,46,48,78,32,39,13,9,42,52,9,47,52,9,46,52,9,47,90,49,13,44,9,48,59,102,109,13,9,46,59,102,109,23,13,88,53,42,124,13,84,70,25,89,78,158,17,13,9,57,45,78,111,13,9,62,32,41,32,56,37,24,37,13,9,57,19,34,44,58,97,98,34,81,87,66,53,13,40,88,139,132,51,61,83,112,110,116,64,137,50,48,66,17,36,112,61,17,13,87,37,101,77,126,40,78,53,17,82,113,113,111,80,17,13,133,38,55,138,142,17,13,9,58,165,37,62,104,52,54,103,17,33,140,56,13,9,86,143,62,36,52,51,69,71,30,46,53,41,45,48,50,50,76,30,47,54,55,49,53,47,47,87,80,25,71,30,51,49,54,48,51,56,56,71,30,45,75,30,28,120,17,13,9,69,75,164,103,9,61,89,9,63,71,36,38,53,55,47,47,117,82,34,25,61,48,153,73,189,25,30,47,88,51,120,216,29,25,30,50,57,63,43,30,28,65,17,13,9,69,51,55,179,13,9,65,91,66,66,64,23,80,58,101,57,58,29,57,50,112,77,72,65,50,52,68,90,70,114,151,59,158,21,17,22,110,176,17,13,9,55,163,9,54,48,43,24,37,13,18,51,13,9,55,75,9,61,51,68,23,60,49,23,114,17,78,13,53,206,9,80,150,45,50,47,60,107,105,186,27,17,41,85,49,73,37,25,65,117,25,117,140,83,118,107,29,25,73,100,25,30,125,113,52,190,123,115,37,42,199,37,33,29,34,99,29,25,21,17,15,49,58,53,65,49,136,29,55,81,158,127,17,22,88,51,88,21,17,15,54,68,117,80,194,116,21,26,88,180,127,21,17,22,112,54,162,21,17,15,51,66,82,91,186,199,17,22,103,54,180,21,17,15,9,40,32,41,43,51,52,103,24,54,13,9,46,142,9,49,140,9,35,52,48,60,13,51,68,64,64,13,18,64,13,30,56,13,9,67,86,151,23,13,54,115,149,17,15,9,11,123,117,88,11,74,108,29,13,62,60,60,58,54,54,61,119,29,13,53,54,29,13,110,92,67,33,17,13,51,77,55,29,13,24,9,106,62,54,71,76,42,169,21,26,146,21,32,17,29,15,9,67,54,76,76,42,199,21,26,171,21,32,17,29,15,9,78,80,171,23,13,142,23,13,60,107,23,13,124,55,96,131,210,13,9,77,120,23,13,60,107,23,13,124,55,143,123,237,13,9,84,49,136,57,13,9,49,79,110,211,154,13,9,81,94,76,54,13,9,46,37,45,131,75,40,111,44,30,21,17,13,53,114,105,40,17,13,18,73,123,40,17,13,31,158,215,13,9,64,22,23,72,71,78,75,39,85,60,60,17,13,50,84,13,9,57,43,97,68,42,97,68,100,110,67,108,113,73,102,44,99,41,100,37,21,129,84,21,57,113,23,13,70,111,68,83,23,13,47,64,48,43,184,45,56,81,106,133,124,55,40,95,134,58,105,75,81,73,101,114,110,89,47,78,158,25,21,17,13,9,41,94,9,61,53,19,34,45,46,13,97,29,23,13,75,97,98,34,68,53,39,60,17,13,44,120,65,17,86,101,65,17,58,48,105,89,58,63,72,63,73,79,39,180,178,25,21,17,13,70,49,145,67,17,67,13,125,127,128,23,13,71,49,116,75,67,82,85,47,86,71,75,25,30,161,25,21,68,47,66,117,25,52,71,25,21,17,23,13,78,47,121,39,23,13,65,51,95,78,67,34,77,68,99,95,112,156,21,17,76,158,148,21,17,13,18,118,79,103,74,64,66,129,17,39,173,17,110,144,17,13,107,80,55,108,59,17,67,13,9,129,79,136,138,139,75,117,35,137,13,9,60,102,102,91,28,13,75,29,13,52,36,33,36,35,32,146,9,49,208,50,47,85,9,44,45,54,9,47,31,120,67,78,9,49,31,56,45,9,41,31,56,66,102,51,71,116,13,51,9,87,34,23,36,23,87,98,23,13,65,73,105,36,80,82,79,72,62,73,60,60,23,13,77,46,23,13,149,113,26,32,56,168,17,22,161,17,13,9,84,70,49,69,70,93,52,40,25,94,65,63,69,104,132,118,29,137,127,49,33,77,79,29,117,77,79,29,34,45,29,25,21,17,57,15,9,74,113,80,49,64,64,40,25,21,57,19,29,32,17,35,13,25,9,41,31,56,47,55,9,44,31,56,55,47,9,52,48,103,13,24,9,61,81,9,42,31,63,102,74,17,13,35,82,88,17,22,54,17,13,31,58,33,50,47,30,56,13,9,44,52,77,37,79,134,17,22,71,133,140,87,21,17,13,94,106,72,13,36,117,45,107,59,78,59,13,18,47,67,75,126,107,108,115,85,17,22,60,247,104,101,105,48,39,118,21,17,13,47,30,56,13,9,44,31,52,89,52,50,50,119,102,78,64,69,132,17,59,13,18,54,46,114,106,47,56,126,126,17,90,122,17,22,86,247,17,13,106,98,151,197,13,47,30,56,13,9,75,73,98,67,67,47,13,9,55,85,138,9,86,39,33,13,125,9,11,101,100,102,11,104,85,42,104,33,13,69,93,122,96,84,47,80,90,123,41,41,189,184,202,221,50,41,108,25,21,17,57,173,17,13,38,38,45,97,95,24,54,60,116,76,53,128,55,81,21,17,72,42,17,63,43,56,40,143,49,25,21,114,54,63,111,21,17,13,46,50,98,96,94,95,51,105,148,160,17,138,13,77,59,105,119,38,17,155,13,129,87,23,41,40,160,144,17,115,32,167,17,123,162,17,36,89,73,13,9,45,24,36,36,34,34,33,32,35,35,34,41,32,13,25,9,11,100,11,82,39,33,13,88,105,9,72,99,102,88,64,66,64,95,96,99,56,61,133,131,74,65,38,106,64,17,38,13,88,9,11,54,10,99,97,44,11,47,27,28,26,76,50,90,29,17,59,45,17,77,80,74,13,57,171,13,36,9,58,34,9,71,48,9,11,109,10,126,10,99,104,108,103,108,16,10,86,96,18,10,98,10,96,98,11,68,34,41,13,54,95,60,36,112,21,37,17,40,13,129,70,28,82,34,69,41,102,60,36,112,21,78,37,17,22,87,17,13,113,68,84,9,76,52,40,53,41,129,89,28,62,13,149,9,11,78,10,98,91,47,10,84,49,11,74,34,41,13,57,108,87,37,52,83,39,17,13,56,107,86,37,65,112,66,157,25,21,26,46,21,17,13,57,115,58,42,17,13,56,114,58,65,108,87,48,21,26,46,21,17,13,36,9,11,80,52,10,84,49,11,68,76,9,78,97,95,108,9,11,101,44,10,98,89,94,31,10,84,49,11,66,109,51,52,68,27,111,119,58,104,115,114,41,137,274,13,101,52,86,99,105,274,13,9,64,86,133,137,9,11,101,33,10,96,73,10,84,49,11,77,19,113,119,40,99,13,100,39,98,13,97,153,92,9,83,45,110,100,111,9,11,109,10,96,66,11,73,34,41,13,85,66,75,84,9,11,95,17,10,84,49,11,68,76,9,11,95,43,10,98,89,94,31,10,84,49,11,66,104,56,68,84,86,92,54,58,117,113,106,101,99,166,135,13,98,99,105,135,13,9,47,81,136,87,121,78,95,9,46,57,9,47,58,9,11,80,10,92,92,47,11,58,34,41,13,94,30,35,13,112,90,100,60,172,13,101,61,172,13,85,78,130,80,133,44,105,13,80,108,109,34,164,9,11,89,79,10,96,64,11,83,31,61,62,51,33,13,107,142,28,40,72,95,13,78,110,48,32,58,64,59,61,17,77,13,100,100,101,105,95,98,98,127,98,96,209,229,60,98,51,243,17,13,77,37,34,107,55,78,108,17,102,13,92,47,28,25,41,114,44,86,51,17,51,84,127,86,17,13,112,26,106,113,93,54,32,84,17,36,62,13,18,53,80,13,88,9,11,101,33,10,96,73,10,84,49,11,77,56,77,79,78,15,92,9,11,107,109,113,11,100,40,33,13,110,101,9,89,34,41,13,104,103,85,85,9,54,31,61,59,53,9,62,68,60,130,74,31,9,67,94,122,9,45,19,31,62,23,13,77,75,125,23,13,29,122,23,13,67,65,63,95,104,63,42,82,21,17,68,135,142,21,17,66,141,73,206,35,46,81,95,63,131,21,17,13,159,103,78,13,9,43,49,63,60,126,17,13,45,58,51,84,45,165,13,9,45,31,56,35,50,66,68,66,114,92,59,52,21,26,135,57,21,17,81,60,107,70,70,64,64,65,97,90,21,88,125,126,21,17,66,146,77,17,15,40,66,13,9,46,31,63,65,53,38,21,126,119,36,21,33,19,13,42,47,9,44,31,63,87,100,17,13,34,49,13,9,42,31,56,38,47,30,35,54,70,105,35,128,75,153,25,21,55,139,21,26,69,44,85,79,182,158,33,31,25,21,17,46,13,36,46,13,9,69,55,42,23,13,90,34,79,200,17,13,58,69,86,40,136,78,75,63,154,21,17,13,40,93,48,70,17,13,9,86,52,60,55,23,13,73,166,104,138,44,164,140,138,121,80,233,76,209,17,14,89,44,31,13,9,73,52,78,166,145,44,39,38,164,131,138,115,81,229,82,221,17,14,89,44,31,13,9,57,46,107,39,27,31,29,30,30,31,30,30,28,30,59,13,9,11,89,11,58,79,134,188,13,9,54,91,44,23,43,42,50,62,35,44,53,17,48,50,17,15,69,36,73,118,182,212,17,13,18,66,39,117,31,21,51,35,184,25,21,26,155,21,19,13,9,11,113,11,65,44,40,76,60,45,45,43,47,105,25,47,121,25,53,86,127,29,25,21,17,13,9,100,80,24,34,60,62,66,77,85,139,29,25,21,17,45,13,9,89,59,74,23,13,47,47,51,83,64,27,17,59,90,72,54,103,61,128,21,17,13,9,77,67,81,95,53,98,93,64,107,33,17,61,53,53,93,70,80,37,21,103,75,86,89,80,125,132,121,37,21,102,83,94,76,109,37,21,17,13,24,9,45,44,36,58,9,53,57,52,9,46,170,178,13,82,129,13,44,57,52,9,50,51,34,63,80,51,47,55,61,53,53,53,53,81,78,40,63,13,65,31,75,55,83,17,73,74,66,60,17,51,61,50,82,78,77,64,62,83,160,53,106,38,29,25,21,90,102,140,21,26,89,200,21,81,66,148,25,30,114,182,195,29,25,21,160,129,98,145,182,128,25,21,74,17,13,82,80,39,123,65,123,160,21,56,45,81,46,53,95,154,94,93,114,108,33,29,34,171,29,25,21,17,13,37,52,82,59,50,13,9,88,65,63,178,69,46,52,38,17,58,68,79,142,66,25,23,17,131,55,14,71,36,33,13,9,11,60,53,11,174,65,42,51,47,32,34,13,294,9,11,100,68,73,87,60,114,11,237,43,78,100,80,74,78,74,78,63,69,36,184,36,51,171,199,51,156,155,21,54,17,174,97,52,42,21,43,40,66,38,173,153,38,161,144,66,25,53,21,76,40,196,25,53,21,17,13,49,32,55,43,162,157,17,50,13,30,9,88,153,42,46,42,38,17,114,35,89,93,43,88,227,160,53,25,21,17,14,71,36,33,13,37,81,96,13,9,57,74,36,60,91,95,73,151,21,17,13,9,11,99,68,49,67,11,64,31,34,13,47,55,61,53,65,63,178,69,57,48,72,98,198,63,9,37,83,99,77,9,66,64,106,15,9,70,54,92,121,122,105,100,49,90,105,113,49,86,104,23,70,63,120,56,57,59,29,17,81,34,29,17,58,90,124,108,116,117,39,81,91,119,110,66,157,120,121,38,89,55,59,41,104,97,80,59,29,25,82,212,25,30,223,25,21,17,22,46,100,110,93,33,21,46,88,94,68,81,185,124,109,126,83,37,25,141,141,87,77,140,129,195,25,59,206,45,78,79,82,175,126,66,66,51,65,56,106,232,183,33,29,25,39,33,21,57,95,91,37,25,30,86,161,25,21,65,157,21,26,157,21,185,17,13,9,74,40,34,13,36,49,43,15,86,43,101,95,48,62,70,54,21,17,13,47,9,71,47,39,28,13,36,86,75,15,26,86,43,99,93,48,62,36,89,21,26,83,97,39,82,63,206,191,109,25,21,17,13,22,9,52,107,23,13,63,71,36,77,29,17,83,47,88,76,114,115,185,29,25,21,17,13,9,53,65,48,41,34,9,106,95,53,127,79,113,66,57,68,106,77,36,21,17,13,25,9,86,105,58,49,60,98,70,9,50,31,58,55,53,37,94,55,51,57,46,105,50,63,69,72,80,89,50,185,25,60,21,17,62,13,87,127,162,17,56,15,57,37,59,56,13,9,50,31,53,91,51,53,64,109,137,17,13,18,46,56,13,9,48,47,70,66,34,75,40,70,65,82,17,13,9,56,59,100,13,18,65,87,97,17,13,37,52,13,100,90,163,33,13,109,104,109,88,42,33,13,81,29,9,47,71,60,49,121,38,83,53,108,106,17,13,52,123,25,13,35,145,13,67,127,13,18,101,58,76,235,17,22,147,17,13,25,37,36,57,61,58,52,72,74,74,29,25,30,52,55,57,84,62,76,82,96,108,90,78,81,78,77,78,80,98,29,25,139,48,25,30,48,64,41,48,57,42,59,57,45,46,79,61,25,141,59,60,59,76,84,50,87,65,33,38,134,33,83,29,25,30,17,33,13,65,64,35,68,49,145,67,25,179,33,21,26,123,21,17,33,13,9,47,49,37,29,13,55,110,109,68,9,45,38,23,13,31,53,63,51,50,42,39,114,113,36,14,54,51,82,44,84,61,82,73,99,130,25,23,17,64,76,85,73,37,21,54,58,37,21,69,55,66,182,25,30,71,25,21,19,13,9,40,52,101,13,9,71,51,31,99,57,75,118,71,43,21,17,13,29,9,51,71,71,49,54,13,54,29,13,18,49,13,9,47,37,35,78,74,64,163,17,71,65,109,119,82,117,27,17,64,89,112,21,17,49,71,17,55,51,100,56,40,42,53,98,106,53,114,164,25,77,156,25,21,95,72,98,38,64,93,21,17,46,64,164,74,91,78,152,121,53,95,55,96,29,25,21,63,51,175,25,111,124,25,21,26,51,175,25,30,98,150,125,25,21,17,13,28,46,58,60,17,13,9,77,19,32,49,120,100,42,83,21,26,48,49,140,26,55,49,171,26,46,51,41,52,84,44,71,85,25,30,21,32,48,47,51,52,49,52,47,31,21,55,33,111,52,135,121,85,43,74,186,25,21,26,13,9,59,32,41,32,45,24,41,64,32,56,24,120,45,25,47,64,32,13,9,63,60,62,43,29,13,50,74,29,13,127,88,77,89,97,29,13,94,138,44,68,63,104,93,72,163,33,17,13,75,37,89,40,60,40,119,21,17,33,13,24,9,41,47,46,43,91,102,101,128,153,150,72,131,80,85,54,75,100,96,65,17,51,68,63,76,70,50,44,56,59,69,75,124,56,178,205,143,140,33,145,164,33,38,29,61,122,112,112,109,56,145,180,89,140,43,33,29,25,21,17,49,82,95,107,21,17,13,9,52,160,9,65,54,30,52,47,36,56,63,29,48,30,80,64,103,34,25,30,56,38,44,25,21,17,22,26,17,13,32,9,43,63,35,58,74,57,170,75,13,9,49,19,43,156,91,109,129,131,17,168,155,17,13,9,47,261,114,23,13,94,107,13,63,53,78,44,57,21,53,92,75,228,61,87,29,25,30,102,48,100,29,25,21,17,13,36,9,53,261,114,23,13,53,115,41,68,49,17,86,69,51,64,126,89,139,167,29,25,63,103,25,21,42,104,21,17,22,186,82,247,21,17,13,9,47,261,102,23,13,94,107,13,176,76,13,48,88,84,38,49,81,135,129,84,130,105,21,17,22,42,49,93,82,159,21,49,60,21,178,48,57,145,82,73,87,29,25,30,50,83,25,21,17,13,36,9,54,19,34,121,80,17,22,107,17,13,25,9,71,181,42,61,13,43,9,69,91,67,15,9,73,91,90,15,9,67,55,41,53,79,96,82,9,73,61,74,40,58,84,80,9,64,80,39,129,162,17,13,9,45,35,58,93,13,54,66,125,166,90,186,151,17,22,49,112,99,78,21,17,13,18,61,58,135,78,79,17,13,9,46,59,110,107,80,113,23,13,105,99,42,99,17,22,112,17,23,13,31,94,106,13,77,37,136,13,63,41,124,26,49,138,91,88,95,63,21,17,22,116,17,62,82,17,13,18,55,13,50,102,169,13,79,134,72,191,17,63,72,123,17,13,9,51,104,9,51,53,53,40,77,77,125,125,136,21,17,48,65,32,57,77,48,35,25,136,97,99,35,25,113,95,80,109,35,25,60,76,91,61,69,185,37,33,29,25,23,17,44,13,9,59,31,42,203,9,43,23,50,35,39,47,46,13,9,49,38,54,39,64,19,13,33,36,98,73,31,53,52,56,55,73,17,13,142,130,13,27,45,52,41,48,51,58,49,56,47,44,45,50,46,59,49,47,56,59,66,43,61,43,43,58,45,56,45,52,41,48,43,50,41,48,41,48,41,48,62,49,44,40,57,40,47,44,51,47,54,41,48,51,58,42,49,48,55,48,55,50,57,47,48,44,56,48,55,44,51,49,56,48,55,49,49,32,52,49,44,48,48,51,62,27,49,49,27,51,57,46,49,47,66,49,56,42,49,51,58,37,43,44,49,56,51,58,43,50,43,50,46,53,44,51,46,53,46,53,49,46,63,47,54,45,52,47,54,48,55,46,53,44,51,51,58,46,53,48,55,52,59,52,59,47,54,49,56,49,56,55,62,49,56,48,55,46,49,64,27,50,57,13,9,49,39,116,13,9,47,43,42,104,37,82,67,98,17,23,13,52,103,13,46,52,103,23,13,65,25,61,23,13,62,69,94,13,9,53,54,37,46,92,79,68,82,46,22,138,83,52,40,148,22,60,94,64,74,48,119,53,21,17,13,82,45,13,40,9,111,65,40,34,33,16,109,111,84,42,61,52,55,76,46,13,9,46,46,38,63,13,9,42,201,46,31,35,32,46,45,56,41,49,91,89,37,45,26,50,45,49,47,79,26,43,43,51,26,47,55,26,53,61,26,42,50,26,13,42,85,9,40,175,47,40,46,73,85,9,49,28,29,13,27,35,60,39,64,24,54,13,9,62,89,9,79,46,43,55,71,27,17,35,45,50,55,56,53,64,56,41,58,60,17,120,121,142,50,25,23,17,79,46,48,60,17,58,53,17,53,95,54,17,58,105,59,17,59,88,60,17,56,82,57,17,51,13,9,49,17,105,103,37,39,56,13,21,46,13,9,51,45,29,81,81,65,83,85,44,90,82,77,92,150,90,17,102,97,93,34,89,17,43,13,81,29,63,48,9,41,45,54,9,51,38,109,13,9,35,55,66,102,26,13,49,39,30,73,43,40,34,75,62,21,44,50,63,38,40,57,133,34,55,105,34,55,58,44,69,29,89,140,40,56,60,90,76,135,87,50,120,29,34,58,57,43,69,29,34,21,71,61,21,59,47,17,46,13,15,91,65,90,69,90,15,50,80,48,86,87,78,43,48,21,17,13,51,30,54,52,23,17,13,71,30,54,70,153,56,25,23,17,13,9,46,55,49,62,9,42,32,45,48,52,52,47,47,48,44,32,44,43,47,47,57,24,33,13,9,67,50,66,35,13,64,9,58,77,35,13,78,9,56,23,26,51,26,26,44,26,13,26,9,60,63,130,32,17,92,34,17,29,15,9,60,98,9,79,77,57,13,84,119,13,77,114,13,29,9,64,83,9,79,106,52,45,47,62,42,43,38,69,13,9,50,37,48,30,39,13,94,30,13,29,9,66,45,52,13,38,74,58,65,83,113,58,63,21,17,13,101,139,54,141,59,35,17,13,94,101,102,71,101,13,40,73,41,60,64,67,17,13,90,35,13,58,43,83,81,48,83,92,54,21,17,22,51,17,47,118,39,44,17,13,67,67,13,121,109,78,61,13,44,45,43,37,17,128,125,56,82,72,77,21,159,47,112,40,92,25,21,34,17,56,73,17,117,51,47,52,21,75,76,21,26,65,21,89,60,21,48,17,54,56,17,13,55,118,113,108,13,63,91,13,29,9,11,74,65,34,91,10,85,11,58,40,46,92,149,68,114,17,29,34,17,13,93,90,23,117,87,51,13,9,58,53,92,13,37,44,62,102,33,13,62,62,59,101,61,35,13,73,54,13,52,68,75,17,68,74,51,67,97,46,51,21,17,53,59,94,46,51,21,71,73,21,17,13,32,41,48,56,45,54,79,21,32,43,95,55,73,48,53,25,21,57,60,21,32,40,64,44,56,50,104,61,106,68,21,37,44,60,77,72,71,74,177,171,159,159,83,21,135,55,21,32,44,35,73,113,97,73,40,111,45,46,53,43,56,42,131,44,118,45,42,117,44,56,24,37,13,9,48,115,69,77,107,183,13,29,9,62,86,98,13,29,9,82,60,45,59,71,155,13,18,132,13,9,38,70,33,13,62,102,33,13,99,109,44,65,116,13,44,56,13,55,115,71,76,100,13,42,115,51,55,13,46,55,76,13,41,115,51,47,13,62,55,29,51,17,33,13,44,128,13,64,55,29,71,95,17,13,91,61,13,29,9,88,21,38,16,21,38,51,127,39,42,20,64,74,85,13,48,50,66,74,85,13,60,93,68,87,96,83,123,13,69,73,57,83,146,135,9,93,27,49,16,44,45,71,111,122,103,9,51,70,35,13,74,9,11,79,55,11,52,59,36,46,55,9,58,36,32,41,65,44,44,59,52,67,110,24,71,13,9,99,55,53,41,78,108,97,30,31,76,58,58,21,19,13,48,9,57,70,9,41,56,72,9,50,63,155,13,63,128,61,57,75,13,29,9,44,23,30,56,30,13,26,9,26,50,92,49,29,68,22,29,37,24,29,72,51,41,89,9,68,118,83,97,28,13,78,131,59,69,59,61,94,68,66,65,81,13,48,33,37,61,13,9,56,90,9,125,80,69,19,68,23,87,91,86,84,131,29,67,110,114,55,80,137,45,25,46,21,67,41,189,77,77,155,81,78,25,159,21,17,13,9,119,52,57,50,55,13,68,23,60,94,45,119,63,17,13,29,9,70,42,63,118,9,65,127,51,73,96,117,80,175,71,72,25,95,66,52,106,34,121,43,62,64,72,74,37,148,145,153,72,109,122,165,180,25,30,73,25,21,17,60,13,25,9,116,94,78,68,52,72,27,64,83,55,21,17,13,29,9,122,69,57,69,23,51,29,74,17,13,25,9,48,32,55,73,44,47,47,47,55,110,49,57,83,81,48,92,71,29,13,25,9,68,81,135,86,29,13,72,94,9,49,26,29,13,86,43,28,13,120,64,59,108,9,54,67,9,68,49,51,61,85,32,17,77,84,56,114,97,32,17,13,32,126,13,25,9,51,46,69,128,51,71,122,57,57,90,38,26,55,127,61,94,42,30,100,13,25,9,60,40,50,53,42,91,9,70,38,49,41,90,9,62,40,49,39,9,53,82,31,29,13,54,65,29,13,195,9,57,82,31,37,13,54,91,9,42,19,38,57,25,97,9,43,49,54,9,45,32,42,56,55,32,13,25,9,41,53,48,13,59,64,70,53,52,54,17,13,29,9,39,110,9,74,23,74,76,26,65,27,57,30,69,13,102,35,47,169,221,13,138,130,221,110,137,66,100,84,69,17,70,76,167,17,13,107,30,125,13,59,36,125,13,57,68,13,114,81,13,75,69,13,74,72,13,75,72,13,80,72,13,41,71,13,78,70,13,44,79,13,41,71,13,18,68,13,9,109,94,31,68,13,96,54,100,64,28,57,41,63,13,31,45,13,127,9,119,102,40,68,13,78,158,9,87,68,24,68,13,72,127,9,38,66,9,83,72,33,38,13,37,46,99,57,46,76,63,17,13,208,9,61,57,82,32,69,33,95,21,17,13,29,9,50,106,82,13,25,9,62,171,111,27,34,42,100,98,65,9,57,62,58,9,48,151,9,56,27,60,27,55,60,21,69,104,40,132,60,21,17,13,53,103,13,9,35,103,39,92,32,50,113,47,91,84,31,21,86,31,118,62,69,21,19,13,20,75,79,101,79,60,59,72,71,18,45,80,59,74,91,18,54,59,62,18,101,59,71,79,99,75,83,65,95,63,65,55,57,53,81,69,18,59,77,85,57,63,65,73,98,78,18,97,89,69,48,77,63,84,18,57,73,65,113,124,102,119,120,105,105,28,53,55,49,48,22,18,177,64,62,62,178,18,97,54,138,52,31,142,21,138,18,79,14,59,56,33,33,78,34,33,42,33,62,93,35,36,56,50,94,47,73,64,48,33,29,25,21,17,29,13,47,175,13,58,68,92,39,37,17,142,71,88,71,164,77,17,85,125,13,58,75,92,83,37,17,93,44,82,38,107,69,64,84,53,117,25,30,109,45,25,21,17,47,13,62,147,43,33,17,117,89,37,30,60,33,41,21,26,30,21,17,146,33,17,112,82,38,60,57,36,21,17,29,13,67,51,27,52,83,51,95,74,41,79,21,17,13,9,68,168,138,32,33,13,79,9,42,57,80,34,57,13,49,45,30,80,34,40,29,17,59,110,120,77,136,104,53,176,25,21,59,17,49,74,17,86,110,17,54,91,17,63,84,59,64,47,58,25,23,17,13,126,123,120,119,125,83,32,55,131,102,51,79,54,79,37,62,21,17,13,36,131,73,115,59,107,39,89,91,95,156,154,91,91,93,91,52,54,52,127,122,13,112,144,79,32,58,131,102,51,79,54,78,37,62,21,17,13,57,117,71,50,74,151,150,125,64,105,25,128,65,104,25,23,17,22,122,82,284,284,17,15,46,9,62,104,66,125,83,58,87,122,60,65,133,46,219,33,86,149,260,37,33,87,149,260,37,33,75,149,260,37,33,29,25,21,60,17,13,9,40,29,57,55,51,59,60,54,58,63,57,53,68,56,74,74,69,67,67,74,84,88,89,87,75,69,13,9,56,41,215,13,41,9,27,59,79,9,47,35,29,13,80,96,144,17,22,104,17,13,98,89,94,155,17,13,25,9,46,64,44,35,13,65,37,73,38,66,111,152,21,144,157,21,17,40,47,70,158,25,30,51,131,59,117,25,59,146,25,61,140,25,59,137,25,54,48,30,49,52,50,88,69,116,25,64,134,25,59,132,25,61,134,25,59,131,25,123,145,25,62,77,145,29,34,138,29,25,87,147,25,66,30,49,54,115,25,61,138,25,59,135,25,123,149,25,69,131,25,62,145,25,64,138,25,49,46,30,51,56,117,25,203,135,159,25,51,30,48,53,115,25,59,137,25,62,138,25,59,135,25,63,147,25,69,131,25,48,30,49,117,111,144,25,61,137,25,51,30,50,54,116,25,59,138,25,64,141,25,98,148,25,69,132,25,125,144,25,87,144,25,49,47,30,51,57,117,25,71,70,76,78,70,70,160,29,145,142,29,58,149,29,58,150,29,71,149,29,63,144,29,25,107,145,25,52,30,48,54,114,25,104,138,25,69,130,25,57,144,25,49,45,30,17,13,54,46,139,17,51,161,17,46,137,17,29,13,145,137,13,142,129,13,131,127,13,42,66,13,25,9,11,76,64,11,52,34,23,47,97,32,9,48,32,43,43,43,51,49,49,47,46,49,49,55,49,48,50,45,41,33,24,114,37,21,40,59,91,56,55,94,60,57,60,67,40,55,90,32,44,21,13,9,67,91,9,65,32,49,51,50,45,33,13,110,9,69,86,48,91,13,25,9,70,64,60,84,119,13,25,9,56,46,51,54,46,47,53,142,21,126,157,21,50,127,21,48,126,21,17,58,49,75,134,21,17,75,135,17,13,9,53,171,9,68,52,128,43,86,57,78,233,27,279,207,36,21,17,13,25,9,60,55,52,62,75,61,56,106,9,57,52,71,73,9,56,44,29,13,156,107,186,17,13,69,100,98,146,9,61,47,47,32,129,17,22,119,17,13,132,43,132,13,54,141,13,42,140,13,40,130,13,34,131,13,59,137,193,13,56,164,13,29,111,13,25,9,51,55,106,9,77,62,62,59,89,124,13,25,9,65,75,75,9,56,79,140,13,25,9,51,35,64,28,13,46,60,111,13,75,9,64,71,9,68,42,45,84,83,48,75,48,120,25,51,138,25,62,140,25,49,21,26,94,51,123,25,52,21,79,63,17,13,9,57,42,39,83,48,75,48,120,25,49,21,26,94,140,21,79,63,17,13,25,9,57,84,63,29,13,44,164,153,13,25,9,49,37,78,65,63,57,131,17,33,138,17,13,9,77,81,9,84,87,9,77,36,74,34,63,42,77,77,114,135,25,21,29,17,37,67,99,59,17,130,98,68,206,17,63,118,17,103,37,81,41,111,123,25,21,17,53,126,107,63,111,111,114,142,41,36,63,167,36,54,100,140,67,61,25,65,30,53,53,30,47,58,30,47,58,30,28,96,17,39,84,54,33,21,63,40,61,21,26,96,116,25,125,162,25,121,108,84,29,34,161,29,25,30,147,25,21,17,13,9,47,46,64,36,85,34,65,29,17,69,50,53,17,22,132,17,109,135,17,13,9,44,54,36,20,81,34,39,21,51,66,70,28,33,17,13,60,83,135,17,13,9,50,73,153,13,9,72,76,28,13,107,77,80,69,63,93,312,29,319,284,29,25,21,26,70,63,211,84,78,156,143,75,29,56,40,25,21,33,17,13,116,124,141,29,13,92,66,73,65,119,119,35,41,81,81,96,47,37,21,50,93,112,113,98,21,59,55,93,118,119,85,21,48,93,114,115,80,21,17,13,25,9,49,173,52,145,17,96,158,17,108,118,17,13,32,76,123,17,128,134,17,13,42,113,13,67,98,74,83,13,58,36,129,17,155,47,130,17,46,136,17,44,129,17,13,25,9,66,73,89,11,66,138,9,53,99,53,13,9,53,60,65,128,17,70,80,43,52,58,54,21,17,38,55,42,69,158,25,81,150,25,67,143,25,30,55,51,71,173,25,30,53,82,178,25,30,28,113,17,13,67,103,191,17,13,9,67,49,57,13,9,43,60,28,13,60,77,121,135,107,21,147,36,21,174,36,21,55,114,21,17,53,32,17,13,46,92,154,17,85,81,85,80,65,57,216,17,83,215,17,13,75,206,13,66,208,13,9,61,31,29,78,111,17,39,52,97,88,95,100,112,59,162,29,41,25,30,51,84,75,41,25,30,28,112,90,41,25,30,17,41,13,29,68,105,119,57,13,18,68,121,115,57,13,9,51,38,52,49,123,17,147,40,116,17,13,58,83,134,13,9,58,59,105,65,9,50,57,105,64,9,53,158,61,86,13,9,48,47,30,94,64,111,60,128,54,47,183,21,17,22,124,17,65,124,17,13,9,56,127,57,50,17,45,94,125,21,46,111,21,17,13,173,46,115,32,121,106,74,13,170,133,47,13,77,63,84,72,87,112,54,93,9,44,52,55,187,17,13,18,45,87,49,59,65,21,17,13,25,9,65,52,72,137,17,13,18,45,87,49,59,79,21,17,13,25,9,71,60,87,28,13,55,171,13,25,9,55,34,43,43,46,45,44,46,46,33,48,71,13,24,9,69,61,53,121,17,63,123,17,13,9,49,52,40,42,51,208,21,26,45,49,206,21,26,13,9,50,58,9,76,58,51,77,121,28,13,25,9,97,71,51,111,28,13,25,9,84,58,51,69,28,13,25,9,70,58,51,93,28,13,25,9,62,115,111,24,124,144,13,9,62,59,23,123,13,9,45,169,134,13,46,88,120,17,196,32,17,92,154,17,13,75,205,32,17,39,129,17,13,57,207,32,17,39,131,17,13,53,46,13,141,107,46,115,32,121,106,74,13,9,78,133,49,14,35,35,52,52,49,57,50,14,74,63,63,60,66,60,59,69,102,29,13,155,9,79,74,34,90,86,36,21,17,13,25,9,47,122,9,62,53,87,47,132,189,17,86,83,82,78,18,150,60,75,72,172,21,17,22,82,83,62,17,13,25,9,51,31,60,47,53,144,17,81,115,17,80,132,17,40,124,76,106,17,13,38,47,25,9,53,147,89,74,78,93,93,47,23,13,89,161,165,166,69,35,47,23,13,220,9,50,66,100,31,55,134,36,21,17,13,25,9,79,58,51,77,132,28,13,25,9,38,39,41,56,109,61,57,21,19,13,39,9,49,19,69,143,13,137,77,13,25,9,67,78,43,107,140,142,17,15,9,57,54,194,13,37,106,13,47,95,82,70,47,61,180,17,13,73,154,13,156,150,75,32,125,13,25,9,85,62,122,69,61,92,66,67,25,67,101,25,21,33,19,13,9,68,112,96,13,9,64,45,88,107,32,125,13,9,61,26,101,38,80,40,109,104,66,54,42,25,94,83,89,91,121,55,51,52,29,25,21,17,13,29,9,63,69,108,59,34,17,13,24,9,128,89,122,79,28,33,17,67,39,104,51,250,21,17,13,29,9,5,45,41,145,43,5,41,122,31,5,108,58,35,43,43,45,20,50,9,5,17,26,29,57,47,124,84,37,61,71,71,36,66,27,51,53,49,9,5,43,54,5,61,42,53,5,59,20,7,16,51,58,24,9,36,31,24,9,24,36,29,9,39,63,9,14,34,9,47,27,5,29,7,102,6,43,56,56,96,86,7,61,59,25,9,20,51,34,47,22,9,60,35,9,29,21,21,42,99,98,95,25,82,9,36,41,40,73,85,44,81,48,62,36,36,17,30,46,92,60,72,54,25,21,26,64,46,21,17,13,9,22,96,85,58,32,9,21,5,31,7,99,56,7,106,67,42,78,28,69,95,5,57,72,67,20,42,20,75,78,107,110,112,114,116,59,94,89,79,13,76,9,44,23,5,47,70,19,53,42,80,50,28,52,36,13,9,21,117,9,26,5,68,76,35,53,114,140,30,5,77,38,75,72,62,83,152,68,87,60,13,215,35,5,93,38,185,310,131,187,35,5,69,64,43,67,59,36,27,65,13,83,96,66,9,23,5,45,7,98,7,57,34,92,51,36,38,74,74,13,39,61,9,23,5,47,94,67,64,33,29,9,29,51,104,24,9,38,23,20,37,36,138,41,36,158,48,36,120,33,41,36,223,37,36,466,37,36,109,28,45,36,274,47,36,225,138,226,43,36,422,45,36,610,39,36,306,39,36,406,39,36,358,55,36,50,52,242,41,36,247,46,36,252,42,36,283,20,41,36,247,41,36,173,40,36,250,43,36,307,37,36,111,39,36,114,37,36,112,37,36,110,40,36,108,36,36,104,37,36,107,44,36,114,43,36,276,37,36,130,38,36,236,44,36,276,45,36,109,40,36,108,45,36,172,38,36,453,39,36,112,47,36,188,51,36,186,31,48,36,123,47,36,127,42,36,295,25,50,36,121,51,36,138,52,58,40,246,17,36,174,51,58,40,259,17,36,187,42,58,40,300,17,36,228,41,36,227,52,36,232,51,36,161,51,36,123,46,36,486,41,36,449,44,36,116,44,36,116,42,36,114,43,36,115,49,36,118,50,36,119,44,36,234,49,36,357,46,36,176,43,36,182,41,36,113,43,36,416,55,36,185,40,36,160,45,58,40,116,17,36,117,40,36,106,19,40,36,183,22,33,36,105,45,36,189,47,36,119,39,36,269,39,36,165,42,36,168,40,36,283,42,36,229,42,36,295,45,36,112,42,36,109,43,36,115,41,36,188,43,36,169,44,36,186,42,36,114,40,36,216,47,36,292,51,36,135,47,36,543,44,36,417,48,36,420,48,36,347,43,36,273,45,36,271,39,36,111,37,36,116,54,36,120,51,36,310,45,36,352,40,36,128,39,36,162,40,36,191,43,36,109,43,36,109,40,36,116,43,36,184,44,36,226,45,36,376,40,36,116,43,36,184,32,51,36,123,18,38,36,241,49,36,245,45,36,241,45,36,124,39,36,246,40,36,181,41,36,120,46,36,118,41,36,113,22,38,36,166,41,36,113,42,36,127,39,36,175,35,46,36,171,55,36,194,44,36,116,19,38,36,163,30,38,36,114,35,54,36,126,47,36,118,20,59,28,9,5,39,7,49,6,34,7,39,80,43,5,20,15,7,16,103,53,91,73,68,28,25,50,27,23,31,34,26,45,34,39,32,31,36,30,28,37,42,35,34,39,33,31,37,35,16,59,33,47,29,35,45,27,70,10,38,20,147,42,65,44,45,37,42,64,13,19,31,9,60,57,20,35,36,40,61,46,17,54,13,19,9,59,32,20,36,50,57,42,41,33,56,13,19,29,9,76,30,57,68,9,89,44,43,48,53,50,101,9,117,101,94,109,106,121,20,112,76,89,39,53,63,41,39,34,13,105,49,47,57,40,46,49,42,17,13,19,9,101,101,94,20,56,52,43,63,114,43,59,98,26,17,63,102,29,17,78,44,43,48,42,52,85,55,82,67,111,109,115,108,98,25,21,51,61,67,56,60,81,57,121,25,21,17,84,72,154,136,133,13,19,9,40,27,61,71,57,55,65,54,9,50,44,101,73,50,37,13,9,41,56,23,13,20,36,59,39,20,62,40,67,45,43,13,18,112,51,30,58,17,13,46,80,63,35,42,70,53,42,68,51,47,78,61,37,44,70,53,17,13,27,19,9,39,46,83,44,13,9,27,35,33,20,27,27,39,33,29,35,47,14,9,43,78,101,68,53,53,30,48,13,18,39,13,75,16,57,39,34,83,53,17,72,34,9,5,59,114,76,61,44,16,68,107,10,5,33,7,71,7,47,76,51,60,26,52,13,108,65,22,13,9,5,55,40,32,51,5,32,25,36,30,41,45,72,104,154,116,5,39,39,41,13,42,41,30,13,9,20,20,9,25,5,51,39,25,20,30,35,28,27,32,26,18,16,38,42,89,31,56,54,52,35,40,47,30,33,21,48,72,30,33,21,42,40,66,43,47,47,92,55,41,63,47,51,44,89,56,112,62,47,51,43,88,56,111,67,47,51,48,93,59,43,65,51,55,46,91,61,117,25,21,85,17,39,13,10,53,20,45,55,65,63,73,58,14,9,34,24,52,9,36,38,32,13,9,52,30,35,9,37,39,9,46,46,62,65,9,42,34,31,26,39,43,108,33,79,39,68,69,54,81,67,32,13,106,36,27,35,13,18,27,35,31,13,25,9,5,39,39,29,57,71,57,55,65,54,5,33,39,48,47,53,5,41,40,62,65,70,50,55,84,5,37,71,74,80,47,52,31,5,44,46,50,5,46,65,53,60,5,50,64,56,64,75,5,53,81,5,48,36,5,51,39,5,63,56,116,93,78,134,150,28,30,27,16,49,54,10,42,63,137,21,23,31,43,102,58,57,132,25,13,20,53,31,49,47,44,14,9,39,48,59,69,50,35,103,21,52,17,22,47,17,13,35,9,49,47,31,83,41,57,33,58,30,63,39,17,144,13,47,9,41,50,30,83,41,39,17,111,13,37,9,44,98,42,27,64,41,27,120,34,73,43,13,54,79,27,13,106,9,41,59,44,27,126,34,73,43,13,57,76,27,13,122,9,5,67,36,39,41,6,20,15,7,16,38,40,45,5,45,45,18,25,37,25,63,5,41,102,5,56,43,52,106,9,40,110,9,5,33,51,54,5,71,51,53,24,9,76,24,25,9,41,25,32,72,33,51,34,13,9,151,165,5,71,54,147,241,5,77,88,33,51,34,41,26,37,25,49,34,37,76,30,32,49,35,42,47,49,47,81,45,21,87,48,21,26,55,90,52,51,21,26,49,47,49,50,55,64,25,30,56,57,55,71,75,29,34,66,74,108,77,83,33,109,53,29,25,21,26,42,67,21,26,48,63,37,44,21,26,49,72,104,46,108,25,21,26,51,72,79,60,52,140,56,29,25,30,54,49,70,104,73,79,29,25,21,26,48,72,79,55,52,140,56,29,25,30,49,49,78,104,73,79,29,25,21,26,13,9,238,47,70,9,310,61,113,39,68,72,48,73,21,76,72,31,106,21,71,77,17,13,9,5,61,78,45,77,37,55,103,17,13,9,56,44,43,46,68,13,9,29,5,45,54,30,21,31,9,14,40,9,22,5,7,97,97,99,7,53,52,57,44,40,5,63,7,97,98,25,7,55,86,5,67,41,55,55,5,51,66,23,69,71,77,93,71,75,93,105,127,79,67,71,73,97,93,9,5,101,7,116,7,51,51,29,9,66,41,24,24,5,61,7,90,7,83,86,42,55,25,13,9,18,5,57,64,128,5,37,80,97,5,59,97,5,87,7,98,6,44,99,7,82,47,60,57,5,50,80,5,7,130,6,44,99,7,44,60,48,5,53,7,96,6,44,7,65,108,5,95,20,13,7,16,21,30,54,68,65,7,84,6,39,69,49,74,99,77,101,7,114,28,18,49,31,93,58,44,39,17,22,73,17,13,9,24,30,29,25,82,37,43,61,137,139,73,28,10,20,66,109,81,94,57,112,13,34,100,97,62,18,95,30,111,13,50,96,30,18,81,94,83,33,13,9,137,34,40,29,13,36,9,107,45,61,9,77,102,53,67,133,43,39,9,5,71,76,89,54,80,9,43,54,9,21,5,76,75,79,41,80,28,13,9,21,5,80,86,122,24,9,71,135,5,80,139,5,7,99,6,39,69,49,60,93,102,74,7,116,74,31,37,30,30,29,25,82,51,43,61,134,136,121,28,10,45,82,137,82,94,57,165,147,13,9,93,33,92,37,82,47,101,13,18,55,70,171,87,48,13,9,112,175,75,44,138,41,48,40,9,28,40,70,9,77,58,37,96,47,13,149,9,5,65,7,87,6,64,45,67,72,93,23,7,107,96,31,140,30,48,28,98,162,122,119,21,17,22,40,17,13,30,67,72,13,9,67,109,9,71,108,9,14,123,9,5,7,94,6,64,55,70,67,72,7,104,75,42,32,101,96,102,74,106,98,9,28,34,47,38,76,91,62,126,168,66,112,17,22,42,161,52,21,106,66,110,21,111,17,13,45,38,157,48,17,143,94,13,9,30,149,9,5,7,93,6,64,55,69,67,72,7,103,75,42,93,62,232,27,43,60,9,102,60,101,96,102,74,107,54,106,98,9,28,35,47,38,61,98,86,179,69,115,60,78,21,96,125,17,22,74,17,13,55,25,13,81,102,107,13,45,93,107,13,9,30,148,9,37,125,83,88,13,9,5,58,71,54,24,86,68,25,81,73,25,52,116,39,5,7,98,6,64,42,89,72,7,85,103,218,5,7,86,65,6,105,6,64,69,59,7,85,54,198,107,9,65,72,107,9,14,96,94,9,5,7,94,112,106,6,64,65,95,61,72,7,92,67,25,9,14,107,52,70,135,13,18,102,13,24,9,5,57,68,59,5,60,122,5,58,63,60,5,61,124,5,48,108,5,42,20,5,20,13,7,16,21,30,78,54,65,124,35,67,91,81,110,44,31,28,37,87,61,9,59,63,72,9,14,68,77,81,42,79,88,104,13,9,192,79,104,106,53,72,48,121,9,14,46,9,100,5,73,45,116,5,7,70,6,44,7,53,99,80,90,32,33,159,81,123,55,68,66,117,69,9,33,65,96,44,75,5,20,13,7,16,7,65,7,45,36,45,59,102,59,110,64,124,74,19,28,52,104,92,82,82,87,91,73,124,76,62,130,65,40,43,318,49,59,92,70,63,50,52,64,40,40,52,85,71,70,82,30,29,42,32,29,48,47,11,99,93,11,33,11,96,55,11,25,11,89,77,11,36,43,52,49,45,13,45,9,40,132,60,70,17,31,16,9,11,64,10,41,11,44,41,28,13,37,68,66,42,27,9,11,76,10,41,11,46,25,56,57,95,93,59,36,34,28,60,95,13,52,53,89,27,9,11,88,10,41,11,42,32,42,41,43,37,47,49,68,26,48,51,73,30,21,80,36,62,21,26,96,114,68,134,21,54,116,48,21,26,13,9,11,40,10,41,11,32,59,9,11,51,10,41,11,38,67,45,13,24,9,11,82,10,41,11,45,72,9,11,82,10,41,11,51,32,49,55,48,49,56,24,47,13,9,47,51,34,104,142,161,84,71,86,69,17,57,28,13,32,49,56,55,62,48,55,49,56,24,65,13,9,11,81,10,41,11,48,75,9,11,81,10,41,11,54,60,60,55,67,87,96,33,13,121,45,13,24,9,11,100,10,41,11,44,71,9,11,100,10,41,11,50,32,43,50,51,96,56,58,46,43,43,49,59,62,47,53,32,24,60,13,9,40,80,33,13,80,33,13,24,9,11,62,10,41,11,40,89,98,98,63,13,32,44,45,91,63,45,46,48,47,47,43,46,47,77,32,41,41,44,40,43,45,45,42,46,46,45,45,44,43,45,47,44,41,45,41,48,47,49,40,44,49,42,43,52,32,46,58,32,41,111,37,52,68,67,51,169,58,58,75,37,43,50,52,92,102,67,48,89,22,66,35,62,74,41,51,55,47,88,22,66,35,62,74,41,51,54,46,87,22,69,44,53,59,107,66,49,84,43,56,43,101,50,43,88,50,51,109,58,50,95,57,45,90,52,41,93,22,82,35,48,76,41,40,48,55,87,52,62,55,44,96,58,46,53,45,52,56,63,49,101,56,47,94,54,49,96,56,51,58,49,77,56,55,70,62,53,60,49,59,24,65,69,13,9,40,90,85,43,153,9,56,37,42,64,73,128,49,64,58,42,53,42,53,57,58,55,56,112,75,25,9,49,86,9,67,43,47,74,67,9,46,140,65,13,106,62,76,50,13,116,73,70,81,46,48,86,85,64,76,102,104,40,18,41,33,25,42,33,24,18,146,62,98,50,80,68,62,69,72,96,43,102,85,77,67,80,134,52,45,20,55,55,85,48,44,13,101,102,59,54,60,13,125,63,144,17,66,151,17,13,40,85,76,123,13,47,9,11,93,10,47,45,58,11,81,63,30,17,85,88,79,28,66,55,138,93,56,50,65,58,13,52,55,57,36,9,11,92,98,11,71,87,46,14,92,69,14,27,85,60,85,67,51,75,85,67,51,75,63,85,14,96,96,94,90,91,82,14,95,84,14,27,85,60,85,73,80,51,58,81,58,85,67,80,51,58,81,63,58,85,14,88,58,14,27,85,60,85,73,51,91,75,85,67,51,75,67,85,14,87,87,53,14,27,85,60,85,67,80,51,58,81,67,58,85,14,60,57,105,67,62,98,94,56,30,17,100,54,177,54,55,126,114,60,76,60,48,121,29,48,49,48,29,9,45,68,65,13,64,38,48,138,54,51,35,9,11,45,10,41,11,46,29,67,66,126,52,162,76,58,90,50,65,66,44,64,21,17,13,102,96,9,11,92,41,10,55,95,37,11,60,187,9,11,96,45,10,42,11,64,85,9,11,96,48,10,42,11,66,86,9,11,96,67,10,42,11,75,60,59,9,11,92,93,10,46,11,50,27,23,49,109,72,101,57,73,61,42,66,25,61,21,17,13,30,9,11,106,54,10,38,11,54,45,93,45,33,13,20,39,38,14,9,11,100,10,63,42,11,63,34,43,43,69,49,60,51,62,24,37,13,9,11,102,10,65,53,11,62,33,33,13,175,162,91,33,13,68,68,45,33,13,70,9,11,100,10,49,11,51,31,33,13,47,63,45,33,13,70,9,11,83,10,53,11,55,49,30,33,13,46,9,11,91,10,44,95,11,86,33,33,13,42,100,116,67,40,9,11,97,22,10,38,90,44,11,82,126,9,11,98,22,10,38,91,44,11,76,68,28,80,43,88,33,39,51,21,26,53,21,17,13,31,9,11,88,10,63,42,11,73,77,104,40,33,13,64,14,26,42,41,29,18,14,40,14,29,25,38,57,63,60,49,14,43,14,29,24,51,14,42,14,29,24,41,14,60,157,58,63,137,75,46,133,126,42,28,114,72,59,26,9,11,70,10,38,11,70,75,29,105,13,9,11,70,10,38,11,64,68,102,40,33,13,86,105,67,63,98,94,95,137,63,79,30,9,11,53,10,47,11,48,80,9,11,52,10,85,62,11,78,28,29,33,93,53,113,66,67,45,17,13,31,9,11,57,10,44,103,11,73,47,74,13,18,74,13,9,76,56,50,124,17,56,151,17,56,136,17,13,9,76,56,40,50,290,17,56,317,17,56,302,17,33,172,17,13,9,11,90,96,56,10,40,11,46,33,55,49,49,58,9,11,96,96,56,10,40,11,52,61,9,11,96,96,56,10,40,11,52,32,48,47,78,49,43,43,32,13,25,9,44,70,102,97,9,11,78,10,69,11,44,32,51,41,56,43,43,72,48,47,49,64,24,52,13,9,11,97,10,80,11,65,55,54,72,26,32,33,35,98,54,57,50,110,33,21,51,108,21,26,73,21,17,13,69,9,71,67,101,34,50,17,13,35,9,11,85,10,76,11,50,55,52,13,48,59,13,44,9,11,71,10,57,60,87,89,36,75,84,87,76,67,105,69,10,50,11,42,37,58,13,32,43,48,44,52,49,56,44,47,64,41,41,61,45,46,63,51,45,62,45,62,43,48,52,68,70,61,52,70,51,69,51,51,71,51,60,32,76,21,45,62,45,61,45,59,59,61,45,60,48,41,57,47,78,44,70,60,21,26,41,49,42,43,42,46,40,42,26,59,44,48,49,49,49,26,49,52,49,56,24,60,13,54,9,43,90,58,32,76,44,71,71,17,63,93,17,184,155,17,71,109,81,48,17,115,75,43,38,60,65,91,66,21,17,22,48,59,17,13,58,139,9,11,93,35,10,47,11,51,122,27,63,112,178,66,21,92,84,144,55,82,90,74,79,52,70,61,67,63,70,62,70,62,69,61,68,59,59,61,77,64,63,63,66,62,24,54,13,9,50,163,9,11,101,10,52,11,64,52,51,67,58,13,57,55,125,13,79,74,76,241,9,11,82,10,52,11,56,32,41,95,74,117,46,131,32,45,68,13,9,11,85,10,55,97,56,11,59,114,9,11,96,21,11,52,128,77,74,9,11,96,21,11,52,52,127,81,77,53,9,11,98,69,10,86,11,92,35,47,52,13,55,111,59,38,13,45,68,13,18,47,13,9,11,86,87,41,10,65,11,58,35,120,54,142,48,155,89,85,72,78,60,121,17,13,66,9,11,62,10,90,79,107,10,55,11,44,61,48,33,13,61,9,11,76,10,90,68,10,68,11,57,136,41,9,11,89,50,10,44,11,58,48,9,49,106,33,13,66,132,54,73,35,101,71,50,80,13,27,9,41,59,33,13,62,38,138,9,62,66,126,62,68,13,32,39,136,115,90,43,189,13,79,14,50,17,14,25,14,36,31,31,17,14,138,91,43,70,13,112,18,83,13,96,118,43,94,135,54,44,25,9,11,71,10,49,11,65,33,41,33,13,61,105,88,61,102,62,305,9,47,59,33,13,64,160,41,100,83,35,101,71,50,80,13,27,9,11,85,66,10,44,11,54,103,9,41,55,33,13,69,198,110,35,101,71,50,80,13,27,9,41,55,33,13,69,276,35,101,71,50,80,13,27,9,49,59,63,13,66,132,100,110,44,43,60,34,13,27,9,48,59,57,13,159,100,110,27,9,43,123,100,112,27,9,39,50,33,13,67,38,110,41,90,35,101,71,50,74,79,76,13,27,9,47,44,81,45,77,37,17,156,13,18,65,13,9,53,33,44,94,71,13,18,185,35,13,9,49,111,44,90,9,53,96,60,75,44,89,97,99,97,92,30,18,97,80,18,99,79,88,32,18,102,103,25,82,13,61,9,49,85,78,9,47,97,78,9,44,111,98,9,43,110,98,9,54,114,96,9,51,125,101,9,50,121,101,9,11,58,10,49,11,50,40,64,9,11,38,10,82,10,49,11,45,51,63,13,32,97,70,53,88,90,25,78,27,88,103,61,17,13,79,64,89,64,108,74,152,96,29,45,143,56,115,110,55,75,13,31,40,23,34,128,37,41,32,176,73,55,52,27,109,73,74,13,49,54,43,90,42,72,30,9,11,54,10,49,11,53,79,54,32,38,68,90,45,75,120,32,9,11,54,10,46,11,46,54,107,79,107,78,152,83,33,134,120,9,11,50,10,46,11,62,58,38,124,13,18,63,41,86,17,22,52,17,13,9,11,60,10,51,11,54,75,24,87,28,13,95,9,11,99,27,11,56,44,48,58,58,58,58,60,9,11,91,47,11,56,55,67,13,49,65,68,13,9,11,73,54,11,57,54,53,78,13,24,9,44,60,41,9,11,77,11,69,91,97,75,162,128,96,48,50,57,71,62,74,17,22,58,17,104,53,18,43,34,50,28,51,18,31,18,43,30,39,50,28,70,18,52,116,43,28,13,18,92,93,90,90,82,110,45,29,13,9,11,44,10,107,10,51,11,47,53,63,13,118,52,32,97,70,53,90,90,27,78,27,88,103,61,17,13,84,64,90,64,108,74,152,96,29,45,143,56,115,110,55,75,13,33,32,34,130,37,41,32,176,75,55,54,27,109,75,76,13,51,56,45,95,42,72,30,9,11,55,10,51,11,64,83,57,95,63,36,60,32,38,35,30,28,63,176,62,46,17,22,67,33,49,60,25,30,52,25,21,95,85,17,13,90,79,53,91,97,46,32,50,41,37,14,33,16,14,35,14,25,34,26,35,33,42,45,40,63,56,41,125,73,87,13,25,9,83,78,113,70,13,9,11,120,10,51,11,47,37,70,33,28,13,47,49,33,13,69,101,34,78,72,56,42,95,28,9,11,100,10,46,11,42,46,88,80,117,133,9,11,125,10,54,11,49,58,68,75,13,18,101,136,78,104,112,13,9,11,116,10,49,11,45,91,9,11,96,22,10,50,11,46,76,57,59,28,9,11,109,10,51,11,47,34,33,13,80,82,84,62,28,13,83,118,74,169,31,56,42,112,28,9,11,91,31,10,46,11,54,83,100,108,9,46,106,9,61,114,9,11,84,10,49,11,45,74,97,9,11,67,10,58,11,58,132,52,92,51,59,81,9,11,47,10,58,11,53,45,34,33,13,67,68,108,99,94,46,45,81,62,17,92,13,59,33,13,99,98,82,60,53,192,84,52,63,34,13,18,56,105,13,9,11,81,10,40,11,44,99,9,11,88,10,40,11,47,99,9,11,94,10,40,11,52,47,69,9,11,96,10,40,11,54,47,68,9,11,91,11,52,65,9,62,218,109,74,74,39,9,75,245,9,85,152,9,79,138,9,11,72,11,50,61,50,24,9,11,83,30,11,50,57,9,11,97,92,55,11,46,98,52,144,70,53,34,13,9,42,105,9,53,38,50,42,9,65,81,72,64,13,9,54,70,61,85,72,64,47,34,13,9,58,74,65,120,75,64,82,79,76,13,9,55,81,9,53,79,9,11,30,10,67,40,71,11,55,71,59,40,41,13,106,68,13,111,75,13,57,67,55,9,11,36,10,67,46,11,47,56,46,50,13,62,67,13,24,9,62,66,37,76,35,96,47,59,115,106,21,103,17,13,24,9,45,32,41,64,56,68,55,67,13,24,9,55,48,59,24,9,48,62,100,117,118,54,110,78,83,38,88,41,72,64,62,43,25,21,17,13,29,9,59,69,125,91,74,100,75,142,132,37,137,43,21,17,13,29,9,59,49,9,58,49,9,48,59,46,103,57,158,54,87,82,71,76,126,17,34,13,24,9,45,50,33,13,139,9,51,55,56,62,9,5,49,20,13,7,16,39,48,11,73,65,11,108,11,73,72,11,146,80,30,39,45,46,48,92,19,28,52,78,104,92,128,40,7,42,89,91,104,113,7,44,331,49,59,70,85,97,92,96,87,93,51,132,64,52,52,40,33,25,11,94,56,11,31,11,99,89,11,30,46,54,43,63,58,60,44,55,38,98,28,13,68,66,27,9,56,74,36,51,52,52,55,62,53,60,52,60,63,70,17,13,74,76,63,68,53,36,57,58,88,52,77,50,57,60,67,60,67,59,66,55,62,48,55,55,54,47,53,47,49,127,82,79,123,38,21,17,13,61,9,46,66,9,32,67,9,46,32,46,83,59,66,13,33,9,51,32,55,54,56,24,41,13,9,11,83,83,82,25,11,47,69,28,13,46,28,13,74,9,11,31,11,61,69,28,13,35,64,77,55,23,82,149,13,97,61,9,11,57,10,41,11,44,32,43,85,73,37,43,43,49,66,51,58,52,59,53,32,24,41,13,9,47,59,35,72,112,28,55,29,9,50,65,46,53,50,40,104,13,24,9,57,55,107,77,13,47,58,87,32,28,13,60,31,228,118,103,13,51,29,9,47,63,58,87,49,39,13,51,45,43,17,45,43,17,13,9,49,55,52,73,44,55,73,21,97,67,112,62,40,47,17,51,62,91,36,32,17,13,92,95,59,115,65,51,13,118,107,43,80,46,90,58,58,90,99,83,84,85,39,17,13,29,9,64,111,9,70,72,32,40,156,38,156,37,158,24,79,13,9,54,105,79,44,146,17,13,59,43,45,64,49,207,56,59,17,62,88,156,71,68,41,17,13,61,9,53,59,43,64,49,207,56,59,17,62,87,173,71,68,41,17,13,61,9,75,105,136,38,76,103,154,93,155,148,151,61,58,35,79,62,25,42,21,17,68,55,68,53,155,162,155,162,155,162,155,162,211,60,78,65,80,80,21,66,48,48,74,69,113,29,25,30,99,90,29,34,98,155,29,25,55,125,70,123,152,133,65,62,39,83,66,29,46,25,21,17,13,61,9,42,313,9,49,130,9,55,96,60,82,13,86,87,98,9,44,135,101,153,43,154,52,178,17,137,174,13,59,54,64,164,111,227,53,50,34,13,61,9,54,128,127,146,176,97,105,13,59,47,64,164,115,167,53,50,80,105,13,61,9,61,68,53,111,17,42,119,69,94,98,115,85,47,44,64,28,13,9,64,53,65,47,168,56,134,25,61,28,13,50,133,71,31,179,21,17,68,52,68,53,211,60,178,21,66,153,115,42,41,114,117,157,164,96,83,60,83,102,98,33,135,80,77,181,66,29,123,39,88,60,29,133,65,62,39,83,66,29,46,25,21,17,13,103,66,13,61,9,85,72,66,52,146,66,181,13,72,32,40,163,38,146,39,37,165,24,79,13,9,11,46,11,39,75,65,13,61,43,43,68,57,52,82,17,101,66,155,17,13,54,45,43,41,57,26,9,54,197,9,62,90,9,38,37,52,105,51,13,71,36,41,29,126,68,17,99,124,84,67,76,25,21,130,67,111,25,21,17,13,25,9,57,175,59,112,72,160,45,13,61,9,46,44,24,59,13,77,71,13,105,85,48,65,113,88,112,13,73,149,30,53,69,171,14,50,81,13,89,46,114,13,96,83,38,149,121,83,44,117,13,30,9,45,44,24,59,13,77,71,13,93,90,52,14,87,90,78,84,102,73,149,130,21,43,71,117,101,161,13,65,44,88,13,154,168,255,73,50,161,97,97,129,21,92,151,21,31,114,21,43,17,22,41,58,58,89,60,60,83,73,21,88,68,110,105,108,92,146,62,66,17,13,35,9,57,69,77,13,124,29,9,62,29,68,41,75,40,80,66,21,17,75,63,17,13,73,101,30,42,13,100,71,42,62,100,21,47,13,49,96,9,61,76,104,144,47,9,73,113,29,13,42,83,72,56,13,162,9,61,119,95,37,35,13,119,83,24,33,13,109,38,144,9,78,19,102,43,148,13,89,98,96,56,82,13,39,75,52,43,41,32,151,139,118,94,47,78,337,17,13,44,48,18,40,18,118,117,13,62,14,29,14,25,14,31,31,17,14,80,82,54,93,46,164,17,22,94,47,108,64,25,21,64,186,107,55,73,25,88,61,70,45,86,25,100,30,119,25,93,21,17,13,48,97,82,86,81,30,178,13,94,108,84,33,69,52,127,37,17,42,13,9,11,69,10,76,82,11,92,89,48,126,29,17,88,33,29,17,43,13,9,74,73,64,54,30,33,13,74,81,52,52,85,84,78,66,67,29,9,11,70,10,95,82,11,116,33,146,67,165,34,29,17,46,86,57,57,45,13,31,9,11,74,10,52,72,11,56,115,74,202,65,58,71,114,13,111,31,9,62,19,152,58,133,115,32,49,73,13,108,82,44,73,62,189,25,30,169,25,21,26,41,21,17,22,87,17,13,116,33,13,68,84,33,13,196,150,47,73,132,75,13,18,92,138,39,144,90,13,9,54,70,61,85,72,64,47,34,13,9,73,89,80,66,66,97,78,77,70,105,58,70,70,76,78,97,79,13,9,11,65,10,89,58,80,11,69,90,23,13,76,104,126,9,50,56,99,151,9,55,52,30,90,46,86,133,77,97,65,82,129,27,17,13,32,50,113,30,21,32,51,45,86,133,63,83,65,82,129,27,17,43,43,49,53,86,133,104,63,65,82,129,27,17,54,86,133,104,83,65,82,129,27,17,13,57,9,11,36,10,51,46,11,47,56,46,50,13,24,9,45,32,41,64,43,58,13,24,9,49,115,133,56,91,17,39,112,17,13,24,9,55,57,9,48,62,100,117,118,54,110,78,83,38,88,41,72,64,62,43,25,21,17,13,29,9,11,126,127,108,11,71,50,89,85,81,134,71,78,99,62,21,26,64,21,79,17,96,13,9,49,78,55,9,47,80,9,47,88,36,44,47,56,15,9,52,51,85,30,41,15,52,9,42,67,9,58,19,59,51,56,63,53,43,52,71,90,45,113,53,87,61,46,51,63,39,41,23,17,56,87,61,47,49,63,39,41,23,17,61,94,182,61,21,26,65,53,51,50,67,43,45,27,21,17,61,94,182,61,21,26,65,53,50,51,67,43,45,27,21,17,22,78,17,13,54,82,57,42,54,36,44,37,19,146,51,13,52,108,57,43,80,54,36,37,19,13,43,108,45,94,183,61,21,26,65,53,51,50,62,44,45,27,21,17,22,94,183,61,21,26,65,53,50,51,62,44,45,27,21,17,13,18,74,13,81,9,60,72,64,112,91,51,13,18,53,13,30,9,73,86,9,48,19,174,121,27,32,17,13,80,58,27,29,17,141,27,32,17,13,29,9,68,66,58,24,65,13,43,92,47,121,113,166,13,152,9,51,72,25,37,77,82,17,68,49,68,53,211,60,68,21,71,141,109,42,35,100,163,25,21,17,30,58,149,21,56,74,21,26,39,21,17,13,66,9,52,105,76,37,29,81,86,21,72,53,72,57,215,64,72,25,75,145,113,46,39,104,167,29,25,21,17,52,90,128,119,101,17,50,151,17,101,13,47,9,47,52,87,122,18,26,52,18,34,82,141,13,18,88,123,18,26,84,18,34,116,159,13,9,5,51,77,99,100,12,5,88,110,93,5,76,110,49,5,42,51,5,20,13,7,16,32,41,74,112,66,21,30,70,76,44,39,259,49,59,70,11,99,93,11,33,11,78,85,11,45,44,11,94,11,36,91,34,85,43,29,50,52,64,40,40,52,60,44,41,28,13,55,111,68,66,27,9,44,76,9,35,48,9,38,51,9,44,53,9,50,58,36,64,39,65,30,13,29,9,37,61,9,32,73,28,13,32,44,82,37,47,54,49,117,51,119,50,118,45,88,56,140,75,21,69,55,101,53,21,69,43,43,43,48,47,107,24,69,13,9,41,64,36,53,71,48,66,50,68,50,68,47,65,41,51,45,46,49,48,47,50,47,49,52,82,28,77,17,13,33,9,52,48,96,66,43,64,71,54,97,21,67,17,15,45,91,77,80,87,30,13,18,74,13,9,58,83,125,94,13,61,9,55,114,104,203,9,55,169,104,203,9,53,65,107,100,260,9,11,42,10,90,10,41,11,45,75,38,65,13,84,112,9,11,43,10,85,40,10,41,11,47,57,124,41,100,73,50,69,9,11,45,10,85,37,10,41,11,49,59,124,100,73,50,69,9,11,44,10,85,37,10,41,11,48,144,100,73,50,69,9,11,35,10,85,37,10,41,11,43,108,100,102,50,69,9,51,31,40,44,13,18,76,41,59,62,21,17,13,9,67,25,53,54,69,9,84,47,61,41,34,146,17,33,13,94,9,53,57,9,36,31,40,47,13,18,76,41,59,47,21,17,13,9,53,163,69,9,48,31,40,77,13,18,76,41,97,36,21,17,13,25,9,51,39,71,41,116,72,109,81,84,84,78,35,87,59,74,39,82,13,71,67,35,55,46,13,23,35,36,129,228,94,98,81,186,39,65,55,133,90,98,21,17,80,50,64,86,100,77,21,98,69,21,17,31,13,18,180,59,44,86,164,17,22,40,17,13,83,35,71,67,13,26,9,64,35,122,13,18,121,13,9,46,70,56,93,110,89,36,17,13,29,9,63,79,70,96,53,69,79,78,97,75,76,70,70,70,95,76,13,9,11,30,10,67,40,71,11,55,82,39,97,152,75,89,71,65,85,27,17,13,75,93,85,49,61,81,23,13,57,9,11,36,10,67,46,11,47,56,78,50,13,24,9,45,32,56,68,55,67,46,58,13,24,9,59,66,174,13,24,9,58,66,92,13,24,9,49,45,49,82,68,68,120,60,40,42,13,24,9,41,33,54,49,55,49,50,9,86,88,190,88,13,18,151,78,13,9,5,41,99,81,100,109,107,27,41,58,37,101,39,44,33,34,205,29,105,43,48,34,55,48,47,57,51,42,48,19,38,266,13,123,11,47,74,124,44,149,44,37,86,15,27,5,79,20,13,7,16,32,41,74,112,66,45,23,32,60,10,25,10,80,88,94,10,25,10,86,88,88,108,98,98,94,94,104,104,48,39,259,49,59,70,52,40,64,52,46,33,35,54,45,31,30,45,98,36,91,34,63,43,60,61,86,9,11,136,98,91,11,59,47,105,33,9,11,92,19,107,11,45,43,9,51,132,9,44,41,28,13,37,48,66,42,57,27,9,32,75,9,58,74,9,47,55,33,13,24,9,78,61,77,39,43,30,13,29,9,37,61,9,11,148,51,11,64,73,28,13,32,47,54,47,54,47,54,48,55,55,62,48,81,51,84,43,50,49,56,51,58,43,46,46,140,46,94,44,145,46,53,43,149,49,144,43,149,43,149,51,146,50,145,45,136,41,48,51,58,55,88,56,63,56,140,75,21,69,55,101,53,21,69,48,47,134,24,69,13,9,45,103,208,42,13,61,9,45,103,41,116,92,304,17,88,81,77,63,13,61,9,45,103,183,13,61,9,46,57,73,93,64,17,130,13,61,9,55,28,29,83,39,60,38,89,48,21,46,81,17,22,96,121,83,17,13,30,81,13,27,9,53,79,48,118,73,103,95,18,119,27,47,57,51,119,69,18,87,78,41,47,57,119,53,74,94,77,17,44,41,62,96,21,38,17,22,69,17,13,61,9,49,87,9,11,148,51,11,79,124,9,40,132,54,44,46,68,100,145,15,129,39,26,9,54,158,9,11,78,10,47,148,51,11,72,122,128,13,66,272,13,61,9,11,148,51,11,75,43,91,13,23,60,47,145,52,67,41,17,13,116,69,9,41,43,69,104,90,183,120,74,47,70,97,48,17,208,13,61,9,47,64,79,49,72,75,31,13,61,9,11,68,10,50,11,49,44,79,50,103,75,31,13,93,9,82,108,118,98,63,13,61,9,42,337,9,44,87,9,11,91,10,40,11,71,117,91,67,13,45,94,116,39,26,9,62,80,125,42,48,88,107,49,71,50,67,17,42,58,50,56,17,133,94,179,52,13,24,9,62,96,29,35,78,84,40,62,41,58,13,18,43,13,145,100,9,51,61,121,60,9,95,85,164,160,60,77,92,113,147,81,83,88,50,51,99,74,122,27,90,99,159,57,61,148,39,70,69,51,67,86,129,127,76,20,59,43,50,346,20,43,70,187,40,16,9,41,54,40,9,39,188,64,42,146,45,36,43,13,79,79,54,64,42,101,45,94,13,61,9,73,27,74,39,33,46,17,93,46,17,13,30,9,52,69,107,63,111,69,150,65,103,27,9,52,69,107,63,111,69,174,61,65,103,27,9,52,69,107,63,111,69,203,65,103,27,9,47,69,107,63,111,64,80,86,72,27,155,109,116,59,47,65,103,27,9,49,69,107,63,111,66,80,86,72,27,49,109,116,59,47,65,103,27,9,43,69,107,63,111,76,109,90,65,103,27,9,48,69,107,63,111,107,86,72,27,49,109,116,59,47,65,103,27,9,60,39,32,125,66,71,67,51,42,138,139,42,31,196,94,77,182,35,61,128,82,90,13,45,90,67,60,96,73,17,94,65,17,13,67,63,25,9,46,19,39,36,32,138,35,120,13,105,60,91,96,88,81,122,13,24,9,72,60,74,39,58,62,83,100,100,26,97,65,164,56,106,122,89,78,29,25,57,82,108,89,90,85,74,25,21,53,97,26,49,26,34,26,43,70,29,69,62,68,104,99,85,63,75,105,58,152,112,84,53,62,166,70,21,17,93,63,163,62,46,48,98,114,81,70,21,17,13,30,9,63,79,70,96,53,69,79,78,97,75,76,70,70,70,95,76,13,9,11,63,10,67,46,66,11,55,82,39,97,152,75,89,71,65,85,27,17,13,75,93,85,49,61,81,23,13,57,9,11,36,10,51,46,11,47,56,78,50,13,24,9,45,32,56,68,55,67,46,58,13,24,9,59,66,174,13,24,9,58,66,92,13,24,9,49,45,49,82,68,68,120,60,40,42,13,24,9,41,33,54,49,55,49,50,9,86,88,148,88,13,18,109,78,13,9,5,41,20,13,7,16,39,38,60,44,41,28,13,61,9,32,72,28,13,32,43,50,24,69,13,9,41,44,199,13,61,9,5,41,20,13,7,16,39,99,60,44,41,28,13,61,9,32,72,28,13,32,48,97,77,35,17,56,55,51,114,81,39,21,69,48,85,74,21,69,48,55,24,69,13,9,38,61,32,86,106,65,37,13,66,9,90,99,54,74,76,154,13,75,9,100,43,108,79,13,85,72,24,33,65,83,79,17,22,41,17,13,73,125,139,106,9,71,43,108,89,13,123,97,135,83,58,130,17,105,13,61,9,77,32,135,56,145,107,77,13,9,74,86,144,87,86,128,63,84,88,13,47,24,52,39,39,60,59,71,82,95,101,29,34,58,29,25,93,139,153,30,50,53,73,77,84,29,236,25,30,92,117,25,30,17,61,13,33,250,223,42,98,9,62,470,9,61,73,29,55,77,61,13,108,48,97,9,46,74,132,112,9,5,41,20,13,7,16,39,99,60,44,41,28,13,61,9,32,72,28,13,32,48,48,89,76,21,32,24,69,13,9,63,58,104,117,40,107,46,104,97,73,172,58,111,109,17,22,117,111,77,122,235,17,13,169,9,5,41,20,13,7,16,39,60,44,41,28,13,61,9,32,71,28,13,32,24,69,13,9,5,41,20,13,7,16,36,82,59,30,29,60,49,55,65,13,258,63,61,9,65,110,9,56,70,50,9,52,56,9,49,23,55,50,92,197,27,37,13,67,79,13,107,42,54,106,13,150,127,63,56,33,9,11,57,10,41,11,44,41,28,13,37,34,98,68,66,48,55,239,13,66,134,87,52,49,340,86,112,21,67,50,143,254,61,188,43,87,113,21,26,87,21,17,13,52,72,13,41,27,9,32,60,43,13,18,28,13,9,38,32,42,68,53,79,43,69,45,52,24,69,13,9,54,32,38,46,45,52,42,67,53,78,43,68,24,60,13,9,11,122,11,47,31,85,34,52,34,17,96,32,17,13,25,9,47,98,9,49,149,96,9,60,134,90,9,50,146,97,9,67,76,73,9,71,76,101,88,92,13,80,142,9,83,43,126,156,141,112,149,141,9,123,19,76,166,51,54,94,26,81,13,62,73,68,100,48,60,21,56,95,48,95,69,101,119,125,24,46,52,17,13,156,26,43,13,27,9,93,43,51,98,89,71,172,21,60,169,26,43,13,27,9,81,30,46,78,29,43,17,13,154,64,9,90,258,84,26,43,13,27,9,70,107,9,71,65,143,68,9,65,106,181,16,27,37,13,25,9,70,77,60,128,72,121,52,82,55,77,13,27,84,13,102,9,64,75,9,68,46,80,70,9,57,37,44,13,60,139,80,136,114,54,13,61,52,48,17,79,13,18,56,13,9,37,68,88,9,11,82,86,63,65,129,10,44,50,82,39,87,57,59,11,57,20,59,39,58,39,74,82,128,51,43,40,108,119,80,129,21,66,111,44,17,57,42,52,47,21,17,13,44,115,72,61,22,9,53,81,86,54,69,9,11,104,93,11,39,134,30,73,17,31,69,17,22,48,120,67,17,15,9,97,42,47,58,9,35,53,55,13,18,40,87,72,17,22,76,17,13,9,11,84,87,57,11,41,33,39,46,28,13,18,57,13,9,43,85,94,9,5,35,45,21,20,21,19,19,21,22,21,22,23,20,23,21,20,21,21,22,20,20,20,21,20,23,21,21,22,22,21,23,22,21,21,22,23,23,23,23,23,23,22,23,21,22,22,23,23,23,22,21,23,23,22,21,20,23,23,23,22,23,21,22,23,23,23,22,21,23,22,22,23,23,22,23,21,22,22,23,23,23,22,21,23,23,22,21,20,23,23,23,22,23,21,23,23,23,23,22,21,23,22,21,22,22,23,23,21,21,21,22,22,21,22,22,24,21,20,22,21,22,23,19,19,19,24,19,20,22,20,24,20,20,20,22,22,21,22,22,24,21,20,22,21,22,23,19,19,19,24,19,20,23,22,20,24,20,20,20,22,25,22,20,21,21,23,21,20,20,20,22,22,22,22,22,22,22,22,23,23,21,23,23,22,22,23,23,22,22,21,22,23,21,22,24,21,21,21,21,21,22,21,21,21,21,21,23,21,22,22,22,21,22,19,21,20,22,23,22,21,22,20,20,19,20,20,20,23,20,21,22,19,22,19,19,20,20,21,21,21,22,23,21,21,22,22,23,23,21,21,20,23,22,23,21,8,20,13,7,16,39,99,60,44,41,28,13,61,9,32,73,28,13,32,48,55,24,69,13,9,46,46,58,73,52,63,24,69,13,9,64,23,22,73,75,53,88,90,98,296,125,13,59,79,90,191,113,13,18,65,30,29,13,161,9,54,56,73,75,103,9,5,41,20,13,7,16,32,41,56,94,63,108,66,30,39,74,88,62,22,31,70,78,46,13,22,42,48,44,28,45,23,32,60,10,25,10,68,78,86,94,77,103,69,64,90,100,91,79,97,111,90,94,92,10,25,10,90,100,31,88,91,52,89,91,94,85,88,103,106,93,95,98,95,59,91,94,99,88,35,107,104,98,95,95,94,30,113,113,68,80,81,116,117,106,106,10,24,10,74,94,10,24,10,89,108,102,48,26,35,66,86,82,54,52,54,5,39,318,59,49,64,52,40,52,30,24,27,45,51,132,9,11,70,11,31,11,85,83,20,11,33,60,44,41,28,13,37,36,48,66,42,36,57,42,27,9,11,136,98,91,11,59,47,109,33,9,11,92,64,107,106,97,11,73,125,9,76,83,58,36,9,55,93,46,45,47,49,43,44,47,46,45,50,87,41,9,40,74,51,117,126,89,9,32,106,9,58,105,9,53,40,56,91,131,89,98,34,17,79,13,24,9,46,55,70,13,33,9,64,32,45,61,48,55,47,54,41,48,51,58,45,52,50,57,51,58,41,49,55,62,47,54,41,48,37,70,46,49,63,48,55,43,46,98,44,92,46,94,46,94,51,58,55,62,43,50,59,66,52,59,54,61,46,53,45,52,55,88,48,81,51,84,60,43,45,43,54,44,52,44,53,56,63,50,57,47,54,45,52,44,75,43,50,44,51,49,56,43,43,58,49,56,47,54,46,53,24,69,13,9,40,105,30,32,38,118,110,51,163,13,79,61,67,147,9,45,51,92,68,75,71,88,30,13,61,9,39,104,68,67,27,9,43,152,9,45,37,67,80,52,17,92,103,81,51,20,13,81,48,13,61,9,41,110,66,13,37,61,109,66,32,17,119,13,24,9,44,87,9,40,38,28,13,57,134,13,24,9,54,37,60,43,95,103,101,144,88,45,45,43,33,69,78,50,25,30,81,151,53,25,21,26,69,77,112,25,30,80,113,25,21,84,70,77,42,68,98,42,48,29,34,107,29,25,119,21,75,17,13,61,9,11,81,10,47,11,46,23,31,14,23,42,38,25,33,25,113,44,81,47,32,136,48,45,41,39,102,64,86,77,85,63,49,13,50,78,85,76,96,13,47,9,11,73,10,46,11,45,23,33,14,23,38,44,25,39,24,67,9,11,79,10,66,11,66,23,39,40,35,37,38,21,14,23,40,45,38,25,59,68,47,47,45,46,27,33,25,28,60,13,79,65,37,41,32,267,80,80,78,30,129,95,30,80,48,58,72,76,58,99,61,91,23,95,26,9,11,81,10,66,85,11,65,32,53,128,38,77,88,46,70,131,94,46,86,64,58,65,68,92,39,90,145,58,25,9,11,71,10,71,68,85,11,83,39,149,52,13,9,11,70,10,71,68,85,11,79,61,43,108,67,118,72,38,37,47,108,120,70,39,75,13,49,90,57,9,11,79,10,60,94,63,11,83,92,89,28,91,64,132,22,9,69,74,95,96,32,39,81,33,83,95,13,70,59,81,41,58,25,9,11,71,10,60,63,85,94,63,11,105,95,88,147,119,30,14,18,33,39,14,35,43,33,68,20,28,24,18,29,74,116,30,32,39,86,91,101,171,122,60,89,102,59,37,146,37,150,88,36,38,69,13,33,70,13,38,74,13,94,70,81,45,132,79,89,56,180,126,48,22,26,41,45,42,44,28,24,22,43,51,41,71,28,36,32,26,125,93,89,72,53,17,22,127,22,26,41,45,42,44,42,28,24,22,43,51,41,76,43,44,28,36,32,26,122,73,117,21,108,109,89,26,92,50,95,25,21,85,148,21,17,13,18,115,96,18,22,28,29,18,25,41,37,24,32,24,22,72,13,394,55,32,52,24,9,91,94,88,32,107,28,45,47,22,17,13,117,20,40,14,9,11,117,99,93,11,69,56,63,28,13,68,64,44,48,96,91,17,13,78,58,77,94,32,17,13,25,9,37,81,9,49,391,9,11,42,10,51,11,39,38,45,33,13,54,79,54,93,42,41,85,45,36,44,36,35,13,40,42,93,42,41,57,45,36,44,36,35,13,18,28,13,9,56,49,50,9,11,93,44,10,70,44,11,71,77,29,13,30,74,39,122,84,43,37,29,17,48,125,17,39,105,33,17,13,25,9,11,99,10,70,59,49,64,11,106,71,88,88,43,114,230,28,13,35,271,28,13,25,9,11,96,10,70,59,49,64,11,103,78,170,107,65,273,134,41,50,154,73,9,11,96,10,51,95,92,79,11,82,89,9,11,95,10,70,44,95,92,79,11,96,40,64,88,29,13,88,61,247,67,81,131,55,52,30,100,76,67,48,77,17,68,70,55,16,113,148,262,178,26,180,40,16,72,44,50,62,81,104,214,13,83,24,9,11,92,76,10,70,30,11,69,108,81,28,13,25,9,11,83,10,64,78,11,81,49,167,85,98,9,74,49,71,76,127,48,48,16,104,61,84,9,80,57,39,36,49,42,53,47,47,93,53,61,30,47,98,60,153,30,55,54,95,97,313,171,76,30,28,64,17,80,80,136,52,50,20,113,34,52,17,93,13,30,9,11,94,17,10,72,68,11,52,71,36,38,57,91,30,53,134,30,47,47,92,65,128,25,30,47,63,97,30,28,108,30,17,13,9,11,89,10,56,11,68,75,9,11,85,10,55,52,11,90,58,62,127,85,18,119,92,138,39,191,13,18,129,73,13,67,65,103,50,56,76,83,27,61,29,9,11,103,10,55,65,11,80,153,79,81,27,62,91,29,9,11,94,80,10,55,11,91,109,91,75,61,111,90,61,99,62,142,13,96,95,67,32,30,139,88,77,85,76,40,13,30,139,88,77,85,76,40,13,223,146,42,23,29,85,15,34,40,13,24,9,11,79,10,45,11,43,124,66,13,61,43,112,56,37,41,32,100,61,40,43,56,44,91,57,24,9,11,44,10,49,11,48,86,105,88,61,43,86,51,61,44,28,90,57,58,63,54,38,9,11,45,10,50,11,49,61,43,102,86,51,61,44,28,90,57,59,119,54,38,9,11,69,10,59,82,62,11,85,61,43,92,119,88,86,51,161,61,13,90,57,87,63,54,50,31,9,11,55,10,44,11,46,101,100,35,35,30,32,33,32,39,35,94,122,120,138,147,13,90,125,35,116,116,53,114,96,51,37,17,13,18,71,97,97,96,59,63,73,99,111,42,21,26,41,21,17,78,80,55,64,141,49,89,59,42,13,79,82,61,90,36,33,13,59,85,58,28,13,129,46,43,59,13,37,95,13,49,25,9,51,33,56,65,13,77,117,82,68,67,27,9,11,82,10,51,11,49,87,9,11,88,10,54,148,51,11,79,124,9,11,78,10,47,148,51,11,72,79,53,121,13,66,272,13,61,9,11,148,51,11,75,43,91,13,23,60,47,145,52,67,41,17,13,116,69,9,68,65,69,129,9,47,158,24,151,79,41,96,38,94,43,48,61,112,25,30,163,62,25,73,21,17,34,127,17,22,106,40,17,13,18,68,13,67,27,9,11,89,10,54,11,53,112,55,64,17,89,66,48,90,58,55,58,91,65,77,130,87,17,39,13,61,9,46,58,128,35,95,46,94,46,13,44,9,11,96,51,10,50,11,71,86,28,14,30,63,14,84,87,14,79,40,14,32,75,14,86,54,14,80,82,82,73,14,24,28,28,19,14,83,85,41,14,44,83,84,69,14,52,86,57,87,81,78,40,39,83,60,76,66,40,48,115,43,9,11,68,10,50,11,69,89,87,91,33,44,54,13,92,152,13,61,9,11,68,10,50,11,49,95,24,49,94,97,13,18,68,13,67,27,9,36,71,9,35,72,9,46,67,57,13,104,88,88,159,9,75,32,43,46,84,44,78,46,80,46,80,13,9,121,73,124,67,27,9,75,160,9,69,151,9,53,356,9,71,169,9,71,272,9,91,32,47,60,67,64,17,93,101,82,79,139,129,74,98,31,122,68,63,17,22,86,45,84,119,179,56,55,109,17,13,18,94,48,83,63,141,17,22,68,174,17,13,46,120,13,18,107,44,172,17,22,47,82,17,13,9,73,92,85,9,110,38,14,41,14,35,14,69,37,19,14,84,28,85,42,83,34,86,33,88,58,85,84,14,41,14,92,55,168,75,92,74,99,199,161,61,157,103,151,31,113,79,48,124,9,128,85,164,160,60,77,92,104,143,50,51,99,75,118,25,90,99,159,115,61,108,68,146,69,67,120,129,127,76,20,59,43,50,420,20,43,70,187,40,16,9,11,74,10,55,11,53,45,48,96,63,57,45,76,63,118,45,26,17,13,43,65,13,87,100,76,117,33,264,33,46,13,41,83,85,23,147,58,9,62,109,9,63,124,9,61,120,9,63,124,9,56,62,64,9,62,109,9,11,96,11,79,47,49,13,29,34,56,59,17,22,80,45,63,48,25,21,17,13,9,116,57,56,41,98,137,91,97,17,36,120,219,41,91,17,30,13,62,32,61,46,160,176,57,36,73,29,66,100,38,141,13,21,31,30,102,17,22,151,127,17,13,18,163,123,13,34,30,9,94,32,118,101,101,95,101,96,13,9,84,113,145,424,9,65,54,179,9,65,192,9,62,127,9,65,130,9,49,32,32,44,46,46,55,96,54,21,26,13,70,36,94,39,102,98,65,65,91,38,128,17,13,104,37,124,95,55,106,60,82,17,50,101,60,72,17,63,108,58,98,17,13,32,9,86,42,81,38,48,33,54,67,17,22,109,144,52,80,17,13,33,43,33,54,57,17,22,101,28,154,135,139,52,75,17,13,46,145,33,56,83,17,22,53,55,21,60,94,48,102,21,17,13,70,49,49,51,17,86,42,109,17,13,42,49,51,17,182,13,85,44,64,108,13,9,39,137,9,11,95,96,70,99,11,81,70,101,41,49,50,76,60,32,104,119,59,14,83,32,17,14,45,14,48,68,32,18,28,31,51,32,17,14,91,97,70,92,64,48,85,114,36,46,42,136,43,120,134,9,11,97,97,62,99,11,92,65,38,103,61,32,109,98,96,44,18,63,18,121,36,21,18,49,18,48,34,68,28,41,73,56,36,36,21,47,39,49,36,48,34,21,18,95,93,18,98,99,97,78,81,39,303,17,22,236,17,65,254,17,13,40,62,13,18,43,13,112,85,79,38,56,99,64,49,50,84,60,93,14,45,55,17,14,45,14,44,55,18,45,31,17,70,92,64,48,85,114,36,75,58,43,106,134,9,60,110,110,88,9,85,86,47,49,114,17,13,9,100,113,42,139,23,65,9,108,32,142,57,89,76,47,48,172,42,139,23,31,79,105,13,18,71,68,197,47,105,59,49,37,67,88,21,26,137,21,131,17,58,179,17,84,41,128,132,121,17,13,30,9,73,26,51,63,17,72,13,18,54,66,17,75,13,9,94,25,23,13,61,36,121,51,157,90,68,124,17,22,79,83,17,113,15,9,131,33,44,76,41,59,140,21,17,13,18,159,66,103,90,34,75,46,21,55,117,57,25,113,117,50,25,21,109,17,13,9,11,76,10,54,55,83,90,74,11,78,45,50,57,45,40,47,47,97,67,122,25,30,53,136,30,54,118,30,63,127,30,28,57,30,17,13,9,11,67,10,88,55,59,11,95,230,50,34,46,13,30,9,11,76,10,97,64,59,11,104,202,50,34,46,13,30,9,11,91,10,87,52,59,11,116,261,48,34,46,13,30,9,41,104,24,132,69,88,85,82,121,71,64,97,135,13,18,68,13,67,27,9,63,97,103,9,11,92,30,10,48,11,47,102,92,96,67,162,115,100,31,9,11,71,10,51,11,49,67,61,43,102,24,86,51,54,142,13,18,131,13,90,57,27,9,11,92,10,58,11,57,127,31,9,50,61,9,11,41,10,46,11,45,84,61,9,11,75,10,54,11,52,61,76,164,13,61,9,11,84,10,40,11,44,80,57,13,70,61,49,62,115,13,125,98,9,52,100,49,14,29,34,21,33,29,20,14,79,14,30,47,38,25,38,25,28,29,20,14,91,14,30,34,21,28,29,20,90,95,119,120,88,171,82,61,43,110,57,96,135,90,92,55,72,76,96,52,14,30,28,48,38,25,57,33,25,51,29,20,14,85,131,90,13,92,132,98,54,35,34,32,34,104,55,103,34,49,37,17,66,64,33,65,156,13,55,87,31,13,102,87,82,36,99,31,74,13,65,57,102,72,66,101,37,319,37,41,32,59,78,60,9,45,112,9,101,95,60,73,66,79,136,70,69,17,43,77,31,38,40,42,57,59,22,31,58,63,61,63,73,357,17,22,31,36,51,53,22,31,48,50,60,318,17,70,97,56,140,38,17,63,13,61,9,11,65,10,44,11,43,62,76,27,35,18,27,75,184,333,49,13,61,9,11,84,10,57,103,106,25,102,11,100,54,14,23,32,14,44,69,14,23,61,14,55,14,23,29,14,44,68,14,23,60,14,90,92,65,14,64,14,99,53,88,49,46,38,92,132,125,101,101,16,40,47,98,96,98,40,73,91,86,51,17,13,40,69,88,39,78,42,102,153,13,30,9,40,43,36,40,9,44,58,9,48,85,109,78,129,120,155,93,104,44,13,57,9,76,168,119,90,65,9,43,75,9,11,37,10,42,11,45,81,9,11,67,10,40,11,43,48,85,13,24,9,11,58,10,40,11,44,78,86,13,24,9,11,50,10,55,11,54,146,9,11,44,10,49,11,48,73,77,34,85,51,78,17,120,51,13,53,9,11,37,11,56,65,38,147,95,9,42,99,56,104,13,24,9,11,63,10,67,46,66,11,55,89,94,123,71,49,61,71,23,13,57,9,11,92,66,11,62,77,68,64,13,9,11,92,38,11,55,70,61,66,70,76,70,70,72,77,78,13,9,11,36,10,51,46,11,47,56,46,50,13,40,50,13,24,9,11,62,11,45,95,24,97,74,81,92,17,13,24,9,11,88,86,10,52,11,61,39,46,48,47,51,52,80,13,25,9,11,37,10,42,11,45,32,41,64,43,55,13,24,9,11,48,10,42,11,55,97,91,108,120,17,13,24,9,55,56,138,90,36,87,51,29,13,77,33,80,99,49,33,17,91,32,17,49,13,25,9,11,70,10,44,11,46,59,60,122,13,24,9,53,38,47,101,9,80,52,29,13,50,29,13,77,117,29,13,59,118,29,13,60,98,29,13,83,120,29,13,53,89,9,5,41,20,13,7,16,7,45,6,75,7,36,38,59,80,31,27,102,52,44,72,72,76,32,9,64,52,71,65,60,11,48,10,35,11,44,24,9,11,63,10,67,40,64,11,55,32,49,49,53,47,73,26,13,57,9,11,36,10,67,46,11,47,71,60,13,56,54,64,13,53,58,13,24,9,11,80,10,49,11,59,52,28,13,67,30,114,13,24,9,11,74,10,43,11,53,97,30,93,13,24,9,11,91,10,36,11,50,129,116,88,13,29,9,5,35,20,91,83,86,20,2,83,85,63,2,60,73,67,84,79,87,88,58,87,88,58,85,63,81,79,85,86,88,65,62,89,62,71,79,73,88,52,74,88,60,75,77,71,74,77,78,2,84,13,2,90,88,74,85,50,2,90,57,2,18,23,21,45,34,35,13,11,5,2,90,2,45,81,47,81,68,81,75,81,79,81,64,48,57,81,65,48,57,81,51,48,41,60,47,51,48,41,35,81,43,56,39,35,45,84,35,44,66,35,47,57,44,66,35,49,44,66,35,45,13,7,16,15,24,42,54,48,46,62,64,46,54,48,46,95,32,106,20,29,54,56,42,63,22,31,68,58,62,58,64,46,53,28,37,68,72,76,70,58,80,20,29,54,56,58,56,56,64,56,66,42,46,30,49,47,47,52,57,56,9,5,43,320,59,70,49,64,52,34,45,36,39,84,96,70,10,55,86,71,64,97,83,93,81,10,80,78,57,88,84,95,81,10,52,66,77,84,82,10,62,57,25,104,112,62,64,75,66,64,60,44,103,28,13,68,66,27,9,11,25,10,41,11,32,53,45,71,13,47,68,13,80,44,13,69,65,13,18,28,13,9,11,82,10,41,11,66,32,43,50,46,53,47,54,48,55,24,72,13,9,11,71,10,41,11,63,32,51,58,50,57,43,43,58,49,56,44,51,46,53,46,53,49,56,47,54,24,75,68,21,139,73,21,26,36,21,13,9,11,57,10,41,11,55,32,48,55,51,58,53,60,47,54,54,61,55,62,55,62,46,53,45,52,24,69,13,9,11,39,10,41,11,39,32,51,58,50,57,24,60,13,9,11,41,10,76,62,91,10,41,11,49,90,37,92,58,56,104,80,42,13,18,75,81,48,51,65,71,77,13,42,81,89,47,33,13,18,28,13,9,11,40,10,76,61,90,10,41,11,48,90,37,91,41,56,104,80,42,13,18,75,81,48,51,65,71,77,13,24,9,11,52,10,76,79,10,41,11,49,71,77,44,47,61,67,73,24,9,11,67,10,54,11,55,44,32,71,77,37,49,49,45,49,57,47,45,61,61,35,41,43,47,31,37,37,35,37,41,28,35,43,43,81,34,39,120,73,38,90,72,47,67,73,33,45,45,41,45,53,43,41,57,57,31,90,9,11,39,10,76,89,10,41,11,47,67,78,33,13,18,49,75,32,17,96,42,60,17,81,45,37,17,161,13,9,11,38,10,76,49,10,41,11,46,60,28,34,70,35,71,24,55,13,9,11,75,10,41,11,62,53,39,36,36,60,35,44,26,41,37,39,46,45,46,175,30,59,35,45,26,41,41,39,39,46,45,48,245,30,28,78,30,17,55,56,270,17,22,139,17,13,61,9,61,44,68,62,17,75,54,17,27,43,18,33,29,33,38,41,200,13,61,9,11,56,10,41,11,45,23,40,14,29,24,34,33,36,40,29,30,65,34,101,37,38,17,22,79,138,48,21,90,17,13,9,11,42,10,41,11,49,58,40,72,34,101,72,17,22,79,138,48,21,90,17,13,65,9,11,65,10,39,11,53,95,41,14,23,37,14,29,25,29,42,34,33,32,33,27,14,23,37,14,29,25,29,41,34,33,32,33,27,44,45,115,79,79,85,13,18,79,84,13,117,35,31,9,11,62,10,41,11,51,23,42,14,29,25,46,34,33,32,31,36,29,33,27,95,64,80,80,51,48,49,136,127,39,42,129,39,35,13,61,9,11,39,10,41,11,45,23,34,14,29,41,33,31,44,85,37,67,96,89,33,59,13,18,57,13,35,60,9,11,76,10,41,11,52,118,9,11,86,61,10,49,95,11,79,23,39,14,29,25,29,34,33,48,77,21,41,38,111,88,97,43,13,93,23,117,176,58,71,61,32,46,21,56,125,158,47,37,17,82,35,13,9,53,23,25,29,33,28,22,14,29,25,26,28,22,34,33,39,33,28,45,43,81,38,175,98,61,142,58,60,72,109,37,17,111,81,30,36,51,21,46,17,35,13,9,11,77,10,41,11,53,57,27,37,18,33,29,31,38,37,38,218,13,61,9,44,86,27,41,18,33,37,40,33,38,37,61,180,221,13,61,9,43,60,27,45,18,33,37,45,33,38,37,67,184,222,63,63,13,61,9,64,48,50,57,57,13,9,58,35,60,13,18,48,13,9,50,77,46,65,13,50,73,9,56,32,37,55,51,69,43,61,43,61,46,64,44,62,46,64,49,67,46,64,47,65,45,63,47,65,48,66,46,64,44,62,24,86,13,9,46,38,60,13,18,75,13,9,60,71,9,64,76,38,60,56,47,13,61,48,37,40,53,71,48,95,30,21,84,17,48,116,66,44,17,13,29,9,53,193,9,52,38,27,30,45,28,45,18,33,43,41,32,35,41,34,93,49,83,169,74,45,44,45,78,21,40,17,22,79,17,13,18,75,13,9,52,38,27,28,36,25,39,18,33,50,35,32,40,47,28,34,51,46,65,37,66,42,102,31,13,18,75,13,9,41,45,39,65,31,28,13,18,65,13,9,55,38,27,40,36,25,18,33,45,35,47,32,33,28,34,46,57,37,102,66,37,31,13,18,75,13,9,44,45,39,65,31,28,13,18,65,13,9,53,38,27,54,36,25,18,33,28,30,54,40,51,32,40,28,38,28,38,51,51,62,39,55,68,77,21,26,156,21,17,42,37,105,17,66,42,39,162,17,42,31,13,18,75,13,9,42,45,39,13,47,75,87,42,60,17,72,76,96,204,13,18,65,13,45,31,13,24,9,55,51,38,27,42,36,25,18,33,37,32,50,31,54,40,59,35,32,40,29,38,28,38,53,47,67,51,52,82,243,55,75,51,51,62,42,141,38,64,91,48,66,21,83,17,22,83,75,17,102,66,42,108,42,31,13,18,75,13,9,44,23,38,32,21,14,29,24,21,34,32,21,24,45,39,13,47,60,87,42,60,17,225,13,18,65,13,45,31,13,24,9,58,91,28,52,13,18,96,36,13,9,47,45,84,32,71,17,13,61,9,55,88,28,52,13,18,123,36,13,9,44,45,81,32,71,17,13,61,9,56,80,31,9,45,95,31,9,54,38,27,34,36,25,18,33,29,32,28,105,66,31,13,18,75,13,9,56,48,27,36,35,50,35,50,36,53,25,18,33,29,36,31,37,35,39,25,37,35,39,25,39,41,42,41,42,41,42,30,34,47,58,50,106,96,38,44,54,54,53,95,47,21,17,97,98,64,39,40,53,50,71,58,67,96,38,29,133,98,32,25,30,52,25,21,48,122,64,44,21,52,64,50,21,17,46,64,17,22,40,17,54,47,80,17,33,13,18,75,13,9,45,45,41,13,61,45,33,13,24,9,57,38,27,28,36,25,18,33,42,32,31,34,57,66,34,13,18,75,13,9,46,45,63,13,61,45,34,13,24,9,55,19,74,144,31,9,53,38,27,29,40,25,35,42,25,33,44,25,18,33,29,69,34,24,36,32,26,36,37,38,32,28,38,40,31,27,34,38,65,39,92,78,17,40,40,73,17,36,13,18,73,13,9,38,86,9,55,40,48,46,29,17,13,22,9,47,56,46,50,13,24,9,45,40,60,13,24,9,55,121,56,67,87,38,103,35,77,116,64,62,43,25,21,17,13,24,9,40,98,28,13,76,58,24,9,37,27,48,79,43,24,9,11,68,11,32,32,34,13,36,26,37,25,9,11,64,11,35,83,69,9,11,77,10,52,11,36,26,28,34,34,32,13,44,47,69,34,35,25,9,11,44,11,29,36,36,69,44,48,69,34,29,25,9,11,39,11,30,50,9,11,51,11,34,36,39,9,11,64,10,88,11,45,43,41,34,24,35,39,39,34,15,9,11,62,11,33,62,35,38,9,11,63,11,40,43,41,34,24,40,35,39,34,15,22,28,9,11,68,10,46,11,44,67,75,21,58,37,56,13,18,52,42,45,57,58,68,17,54,88,13,40,61,46,32,43,34,44,43,46,151,22,9,11,69,11,38,67,40,63,46,32,45,36,46,50,9,11,63,11,38,67,39,40,42,46,13,18,33,13,42,22,43,9,11,97,55,10,69,11,41,24,35,31,31,33,15,9,11,97,93,48,10,90,72,11,48,43,24,35,32,39,45,15,30,9,11,95,48,11,33,62,35,46,34,38,13,9,11,94,44,10,11,43,24,37,31,30,15,9,11,99,95,30,11,37,43,24,37,32,39,15,30,9,11,97,11,35,64,35,46,34,38,13,9,53,24,38,31,37,30,15,9,47,43,24,38,32,37,38,15,9,36,65,35,34,44,13,9,11,76,10,37,11,48,48,47,9,11,88,10,37,11,56,50,9,11,79,10,37,11,51,47,9,71,46,52,70,66,36,21,17,22,26,17,13,25,9,11,70,10,79,11,45,29,32,70,50,101,52,25,121,52,25,21,17,22,70,50,60,52,25,21,17,13,21,9,11,73,10,79,11,48,29,32,70,50,119,55,25,21,17,22,70,50,63,55,25,21,17,13,21,9,11,84,10,32,11,37,51,53,42,17,66,60,59,17,22,61,17,34,13,53,9,11,66,11,49,68,117,27,9,11,97,10,32,77,11,53,63,103,49,34,27,9,11,76,10,69,77,11,59,112,65,67,9,11,83,11,50,119,56,9,11,38,11,28,36,9,11,29,10,35,11,38,23,54,13,18,26,13,9,11,41,10,60,62,78,11,56,64,9,11,58,10,32,78,11,45,57,9,11,96,28,10,32,42,78,11,64,76,9,11,95,19,10,32,42,78,11,65,77,9,11,67,10,71,78,11,54,66,9,11,63,10,71,78,11,50,62,9,11,64,10,65,78,11,51,63,9,11,63,10,55,78,11,50,62,9,11,91,11,35,44,9,11,30,10,52,64,11,51,43,32,40,40,13,45,35,41,13,51,46,54,58,9,11,46,11,26,27,28,37,43,47,32,35,44,46,39,48,104,37,41,32,168,65,90,9,11,65,11,36,29,100,51,17,51,13,18,35,13,26,93,119,60,13,29,34,13,22,9,11,62,11,31,30,23,13,66,43,47,26,9,11,64,11,50,56,46,43,87,13,40,52,13,37,9,11,71,37,11,56,79,44,46,28,13,84,29,53,29,13,79,28,71,88,32,17,13,25,9,11,75,10,94,93,63,11,44,27,29,13,29,37,92,105,74,58,122,21,17,44,93,90,62,211,205,50,62,52,52,54,49,26,25,54,17,35,92,83,200,17,13,112,35,9,11,74,11,48,32,23,13,71,61,33,53,42,21,66,60,21,26,62,21,17,13,9,11,76,11,43,79,99,61,47,89,53,70,60,112,71,76,33,29,25,21,17,13,9,11,48,11,55,25,118,51,63,41,47,63,59,61,33,50,52,33,80,62,29,69,82,29,34,42,63,54,56,33,59,29,69,53,29,34,46,21,17,13,9,11,84,10,55,11,49,42,49,71,41,23,13,43,47,52,41,23,13,54,41,13,58,47,47,13,62,29,36,67,35,57,43,74,44,75,35,57,39,61,36,58,35,57,13,9,11,68,10,49,11,44,28,34,45,17,22,47,17,13,9,11,76,10,60,62,78,11,62,137,9,11,74,10,48,78,11,60,42,46,105,9,11,75,10,49,78,11,61,42,46,136,65,107,9,11,74,10,48,78,11,55,42,127,49,34,67,9,11,82,10,48,56,78,11,74,180,49,34,89,9,11,83,10,48,56,78,11,75,206,49,34,89,9,11,74,10,53,78,11,60,42,136,64,106,9,11,80,10,53,78,11,64,42,127,53,26,67,9,11,82,11,36,42,95,53,17,9,5,49,20,13,7,16,39,57,33,66,66,56,13,9,257,59,49,41,70,63,64,52,52,40,137,147,126,111,151,113,72,95,51,78,96,39,60,11,57,10,43,11,44,41,72,80,130,28,13,37,103,74,42,73,48,42,42,47,27,9,59,92,28,13,25,9,11,58,10,43,11,48,38,32,175,148,59,76,13,61,35,93,365,17,13,133,118,72,90,128,66,27,9,11,54,10,43,11,43,60,95,67,62,14,55,14,51,14,87,14,95,76,14,80,14,34,14,17,14,55,14,93,227,44,14,79,98,87,119,57,22,75,119,63,62,79,61,22,76,36,142,57,49,53,44,69,155,154,52,82,27,16,43,66,27,9,11,53,10,43,11,43,228,95,61,37,41,32,172,69,282,52,46,63,56,110,54,64,63,27,23,363,249,119,123,90,67,66,83,59,31,20,15,33,37,44,14,37,91,58,64,21,74,64,21,32,98,90,46,61,22,58,53,45,49,40,65,151,150,48,78,19,16,43,66,27,9,11,75,10,39,103,11,83,84,40,84,42,69,72,50,38,42,79,43,41,93,179,17,22,95,17,13,92,40,55,146,69,111,99,64,62,41,71,76,90,81,68,180,21,26,70,21,17,13,142,9,56,188,33,13,108,64,32,33,13,91,9,11,66,10,43,11,56,38,32,159,59,76,13,61,337,13,55,133,51,123,13,118,59,71,62,54,90,75,45,63,13,24,9,11,94,30,10,58,94,28,11,68,49,104,39,39,88,83,104,51,21,26,205,83,74,51,21,17,13,9,10,44,10,11,61,10,41,11,40,32,49,56,55,62,49,56,48,55,49,56,51,58,48,55,54,61,54,61,24,41,13,9,56,144,91,181,28,13,32,44,51,51,58,55,80,58,83,46,101,63,21,26,48,61,84,21,26,53,54,84,13,61,9,32,67,9,46,66,9,53,53,78,38,40,58,81,44,29,34,67,74,44,29,34,56,80,44,29,34,57,51,51,41,92,21,17,13,57,76,38,51,76,40,25,21,66,36,21,17,13,45,85,13,25,9,71,58,141,13,61,9,42,313,9,49,130,9,71,163,9,74,166,9,75,96,95,21,14,74,80,92,73,82,104,48,58,48,74,61,36,38,90,59,91,21,26,92,48,88,84,62,25,102,58,21,106,61,72,84,58,21,31,72,75,58,21,38,17,13,61,9,50,136,91,157,191,95,45,39,88,39,158,44,24,93,13,9,74,36,37,16,63,33,82,105,84,25,33,98,99,18,46,53,223,59,73,45,91,42,92,13,18,80,116,73,45,92,42,89,13,9,74,31,22,83,22,92,18,62,60,30,149,147,14,44,116,146,15,21,52,51,41,58,36,60,13,18,56,41,45,36,58,42,96,93,83,42,64,17,13,128,57,214,13,27,9,79,31,22,94,97,122,206,143,57,80,13,21,52,51,41,46,35,36,67,13,18,56,41,45,36,46,35,103,96,93,83,42,64,17,13,153,9,64,123,33,13,58,71,13,29,9,64,123,33,13,58,71,13,61,74,13,29,9,11,44,10,41,11,47,27,76,51,41,36,135,17,22,39,76,52,119,56,106,21,26,47,54,57,55,112,56,106,79,123,60,88,25,21,122,162,40,40,17,13,72,47,83,80,135,52,80,40,38,87,13,60,82,52,98,13,18,80,13,47,9,11,67,10,57,11,48,134,26,29,38,13,120,9,11,50,10,41,11,53,165,27,51,68,199,17,22,122,84,88,56,68,23,112,17,13,18,68,220,17,13,60,82,52,104,13,18,86,13,47,9,11,44,10,36,11,47,40,89,29,33,13,70,76,36,46,55,103,84,73,56,68,25,40,42,17,89,43,58,359,21,26,98,95,94,224,257,21,17,51,13,41,36,45,50,236,45,84,102,51,13,18,39,220,13,9,11,43,10,41,11,46,38,33,13,27,41,76,82,52,201,13,18,183,13,47,9,11,45,10,41,11,49,27,64,120,209,87,85,36,36,13,18,94,13,60,82,52,99,13,18,81,13,47,9,11,42,10,41,11,46,27,64,117,189,145,13,18,94,13,60,82,52,99,13,18,81,13,47,9,11,43,10,41,11,47,27,26,28,64,39,56,105,96,42,90,41,102,25,67,21,52,207,178,131,186,78,77,63,25,30,105,25,21,17,32,177,17,34,159,54,56,21,66,17,13,18,94,13,60,82,52,98,13,18,80,13,47,9,68,49,32,93,103,102,57,72,72,103,17,34,13,57,9,11,82,10,45,11,53,49,86,61,66,13,18,152,128,13,9,11,94,39,10,41,11,52,88,89,86,89,14,81,25,114,52,107,13,24,9,11,78,10,40,11,60,91,9,11,88,23,10,41,11,52,94,98,34,48,49,29,43,51,13,24,9,11,89,26,10,97,95,20,72,11,69,49,34,13,49,32,34,13,36,82,13,59,32,45,51,91,30,48,93,55,119,25,30,17,13,30,9,11,95,26,10,97,95,20,72,11,75,49,34,13,64,9,11,98,16,10,97,95,20,78,11,69,49,34,13,92,34,77,13,30,9,11,94,40,10,97,95,20,72,11,66,49,34,13,49,81,41,59,88,21,17,13,60,74,13,30,9,11,96,40,10,97,95,20,72,11,70,49,34,13,64,155,122,13,28,74,13,30,9,11,98,10,97,95,20,49,11,76,56,91,35,111,65,174,17,13,30,9,11,96,26,10,97,95,20,52,54,91,72,11,114,132,30,9,55,26,50,148,13,18,185,46,56,62,59,87,22,20,13,69,29,9,11,82,10,52,43,91,104,11,91,165,41,33,66,13,29,9,11,82,10,52,43,91,11,77,207,42,52,58,55,89,93,45,49,40,50,39,101,18,162,9,10,28,10,11,58,10,41,11,40,47,32,44,45,37,13,24,9,10,28,10,11,44,10,67,40,71,11,55,53,41,91,61,46,46,13,18,61,13,9,10,24,10,11,36,10,67,46,11,47,56,53,28,13,46,50,13,62,67,13,24,9,11,95,30,10,46,11,62,33,78,50,92,43,55,121,102,17,109,13,24,9,11,90,10,46,11,45,32,41,64,46,58,56,68,48,60,13,24,9,49,51,81,64,114,90,96,17,13,24,9,59,44,67,57,100,93,95,17,13,24,9,11,93,18,10,46,11,55,23,64,99,48,99,17,28,13,144,105,87,145,39,17,86,40,63,183,43,21,71,92,302,43,21,17,13,24,9,11,95,10,46,11,51,95,94,14,75,81,93,73,83,64,45,55,45,71,58,36,97,42,106,61,79,72,103,21,38,17,13,24,9,11,49,10,32,11,35,50,84,68,39,44,102,17,13,9,5,41,37,34,54,21,119,6,20,13,7,16,45,213,59,49,41,64,52,52,40,116,133,111,88,113,72,95,90,113,87,51,67,72,70,30,42,91,60,11,57,10,43,11,44,160,28,13,48,37,49,55,14,106,14,97,95,86,14,48,14,74,81,83,116,87,36,65,52,87,42,87,81,70,37,41,32,43,148,146,15,49,50,111,106,95,155,114,167,55,68,58,66,47,107,13,33,55,43,13,42,35,39,38,42,54,27,9,11,65,10,59,11,59,44,38,104,59,150,41,55,60,51,94,90,21,26,72,47,53,61,27,21,17,13,36,9,11,80,10,54,74,11,65,51,14,36,55,51,51,28,34,65,26,45,47,25,21,39,17,14,19,14,40,27,58,32,14,38,14,35,61,40,34,28,34,54,26,47,34,43,25,22,17,32,89,90,70,38,43,175,118,60,60,76,66,48,137,17,81,103,89,93,96,96,45,117,60,55,94,56,97,90,89,79,75,26,70,118,104,45,36,46,35,96,35,73,71,9,11,88,10,46,11,52,59,23,13,100,97,90,71,80,86,94,69,65,89,48,109,68,30,21,17,60,62,98,58,53,17,13,35,43,87,51,70,33,21,80,151,17,13,84,60,76,75,48,109,17,87,48,43,9,11,94,17,10,98,17,11,55,76,50,50,62,102,29,188,52,13,53,38,37,61,164,53,48,80,63,52,82,20,84,56,44,250,20,95,56,36,9,11,71,10,87,68,11,75,29,107,53,93,158,122,36,86,39,131,41,57,54,54,93,38,29,40,63,78,57,140,34,57,78,53,76,69,38,47,38,50,55,54,43,56,110,55,258,37,131,140,33,38,131,66,104,53,41,33,29,34,55,34,43,34,56,131,80,29,34,21,17,62,41,45,36,180,90,13,85,9,10,44,10,11,62,10,41,11,40,32,49,56,55,62,49,56,48,55,24,55,13,9,11,44,10,41,11,47,27,36,127,13,60,82,52,98,13,18,80,13,47,9,47,43,29,9,11,50,10,41,11,53,165,27,123,60,82,52,104,13,18,86,13,47,9,11,43,10,41,11,46,38,73,33,13,85,41,76,82,52,154,13,18,118,13,9,11,87,10,41,11,49,64,289,114,83,13,18,108,13,60,82,52,99,13,18,95,13,29,9,11,90,10,41,11,46,27,89,50,43,86,231,48,183,60,82,52,99,13,18,81,13,47,9,11,93,71,10,41,11,47,76,67,13,28,86,80,92,38,43,144,17,22,50,17,13,27,30,149,13,38,82,52,121,13,18,102,13,47,9,11,80,10,48,11,44,49,81,41,59,53,21,17,13,18,71,13,9,11,74,10,40,11,59,108,75,79,85,9,11,76,10,45,92,11,76,130,49,89,55,135,9,11,81,10,48,64,70,11,74,99,9,11,84,10,48,64,70,11,77,100,9,11,71,10,48,64,70,92,11,89,62,40,133,104,9,11,94,39,10,41,11,52,88,89,86,89,14,86,84,114,52,99,130,13,24,9,11,78,10,40,11,60,91,9,11,88,23,10,41,11,52,94,98,34,48,49,29,43,51,13,18,56,61,93,17,13,24,9,11,89,26,10,97,95,20,72,11,69,42,34,13,49,32,34,13,36,82,13,59,32,45,51,91,30,48,93,55,95,25,30,17,13,30,9,11,94,26,10,97,95,20,72,11,75,42,34,13,64,9,11,98,16,10,97,95,20,78,98,36,11,81,42,34,13,92,34,53,93,17,13,30,9,11,94,40,10,97,95,20,72,94,11,78,42,34,13,49,81,41,59,100,21,17,13,60,41,33,106,55,17,87,13,30,9,11,96,40,10,97,95,20,72,11,70,42,34,13,28,64,135,103,74,13,28,87,13,30,9,11,98,10,97,95,20,49,71,11,76,42,34,13,56,84,35,111,65,75,99,21,17,13,30,9,11,96,26,10,97,95,20,52,54,72,11,91,109,30,9,11,82,10,52,43,104,11,68,99,41,33,66,13,29,9,11,82,10,52,43,11,54,102,83,141,9,10,54,10,11,62,10,41,11,46,32,49,56,51,58,48,55,44,72,46,53,46,53,43,50,46,53,48,55,45,52,47,54,41,48,42,49,45,52,44,51,43,50,37,44,54,61,54,61,24,41,13,9,11,67,10,41,11,54,83,49,385,79,24,9,11,69,10,41,11,44,83,49,221,79,24,9,11,69,10,41,11,44,83,49,241,79,24,9,11,92,26,10,40,11,50,53,60,9,11,86,10,41,11,44,50,41,80,42,130,48,54,21,17,112,13,18,82,13,9,11,66,10,41,11,41,179,9,11,69,10,41,11,44,182,9,11,71,10,41,11,46,158,9,11,68,10,41,11,43,200,9,11,70,10,41,11,45,181,9,11,64,10,41,11,39,83,49,127,79,24,9,11,65,10,41,11,40,178,9,11,68,10,41,11,43,75,9,11,67,10,41,11,42,75,9,11,66,10,41,11,41,83,49,138,79,24,9,11,60,10,41,11,35,83,49,75,79,24,9,10,44,10,11,80,10,41,11,56,181,28,13,32,44,73,51,58,55,80,58,83,48,61,84,21,26,46,48,63,21,26,53,54,87,13,61,9,11,80,10,41,11,32,67,9,46,66,9,49,130,9,71,163,9,74,166,9,50,31,22,65,27,35,39,53,24,21,18,136,91,157,191,139,69,9,11,89,10,41,11,71,71,113,13,61,9,11,100,10,48,11,66,86,76,13,48,82,13,58,91,13,57,89,13,62,76,13,53,83,13,45,76,90,13,18,29,13,9,78,96,95,21,14,74,80,92,73,82,104,48,58,48,74,61,36,38,90,59,91,21,26,92,48,88,84,62,25,102,58,21,106,61,105,21,31,75,58,21,38,17,13,61,9,10,28,10,11,58,10,41,11,40,32,44,45,37,13,24,9,10,28,10,11,44,10,67,40,79,11,55,53,52,41,47,56,55,53,37,49,17,61,46,39,43,42,43,13,18,61,13,9,10,24,10,11,36,10,67,46,11,47,56,48,28,13,46,50,13,52,51,13,24,9,11,45,10,46,11,46,32,59,71,13,24,9,11,117,10,46,11,62,23,33,75,86,40,63,242,43,21,71,413,43,21,17,13,24,9,11,51,10,46,11,45,32,41,64,48,60,44,56,13,24,9,11,101,10,46,11,55,23,64,99,48,99,17,28,13,71,77,65,14,75,81,75,86,40,63,183,43,21,71,354,43,21,17,13,24,9,11,95,10,46,11,51,95,94,14,75,81,93,73,83,64,45,55,45,71,58,36,97,42,106,61,105,21,38,17,13,24,9,47,40,111,13,24,9,11,38,10,32,11,35,30,50,84,68,39,110,91,111,21,146,17,13,33,9,11,63,10,64,11,44,45,36,54,24,9,11,63,10,40,11,48,72,9,5,53,20,13,7,16,49,82,41,49,59,70,52,64,40,52,61,56,36,30,36,60,44,41,28,13,79,41,52,56,46,46,215,17,109,34,17,217,13,24,9,45,148,51,36,88,72,114,125,13,18,65,13,9,32,32,55,150,165,99,140,48,55,49,42,62,13,24,9,11,67,10,55,11,48,157,26,29,38,13,43,125,70,42,68,38,64,133,60,120,71,80,73,52,137,182,23,19,93,78,13,87,55,108,9,11,50,10,41,11,53,165,27,114,76,80,48,60,15,104,82,47,9,75,64,83,42,192,13,30,9,46,67,58,9,47,70,104,28,13,64,106,28,13,55,75,61,38,64,34,116,62,151,38,37,143,49,44,9,10,28,10,11,30,10,67,40,71,11,55,40,118,59,17,61,52,13,18,61,13,9,10,24,10,11,36,10,67,46,11,47,56,116,50,13,24,9,45,39,65,32,139,13,32,9,5,61,20,13,7,16,43,64,52,65,59,47,60,48,55,59,47,52,40,57,61,30,43,47,40,41,122,133,112,60,13,18,41,64,17,83,59,17,55,13,9,55,40,41,13,37,68,13,79,63,13,59,9,50,97,9,44,41,28,13,37,63,42,53,26,9,52,106,9,40,110,9,5,49,20,15,7,16,42,48,45,43,40,37,37,55,50,43,41,45,35,50,53,49,46,48,51,50,38,5,53,70,63,50,9,78,48,9,14,71,9,76,106,54,53,32,35,26,9,88,36,66,87,149,128,109,13,71,66,87,142,121,102,13,18,66,114,99,13,9,74,104,54,53,32,35,26,9,86,36,66,87,147,126,107,13,71,66,87,140,119,100,13,18,66,112,97,13,9,5,109,66,216,61,9,68,61,9,235,48,9,40,128,65,13,62,9,55,61,9,58,52,9,54,54,9,80,58,9,14,158,9,99,104,66,87,126,105,86,13,148,138,164,111,84,40,70,91,153,132,113,17,112,70,91,146,125,106,17,22,72,70,118,103,17,13,9,87,117,54,53,32,35,26,9,87,34,54,109,83,40,83,146,131,17,22,83,139,124,17,13,18,40,83,91,168,147,128,17,22,83,91,161,140,121,17,13,20,53,37,35,14,9,74,34,32,50,79,83,146,131,26,45,79,83,139,124,26,46,79,83,140,125,26,49,47,44,87,95,170,149,130,21,79,87,95,163,142,123,21,26,83,87,135,120,21,26,51,83,91,143,122,103,26,24,93,13,20,53,44,14,9,88,118,54,53,32,35,26,9,100,39,43,70,91,157,136,117,50,47,82,70,146,131,45,82,70,139,124,46,82,70,140,125,49,47,51,74,95,170,149,130,21,86,74,95,163,142,123,21,26,86,74,135,120,21,51,44,70,91,143,122,103,43,43,70,91,134,113,94,24,115,13,9,62,98,34,39,48,121,26,52,125,26,42,127,26,47,50,152,26,45,145,26,49,47,51,151,21,86,144,21,26,141,21,26,44,51,124,26,52,126,26,24,107,13,20,53,32,35,14,9,53,34,75,60,74,123,105,128,103,13,18,44,121,13,20,53,32,69,14,9,55,20,95,32,35,14,9,84,20,76,103,90,110,96,14,9,5,101,20,13,7,16,62,56,208,34,5,61,62,77,55,5,61,54,74,82,107,46,47,33,28,50,39,199,142,125,9,119,68,67,11,5,53,78,54,38,39,38,52,29,7,45,109,97,82,7,45,106,63,32,34,53,40,41,33,36,33,40,42,47,38,41,29,37,69,85,67,87,89,57,37,71,97,67,72,10,26,30,30,17,17,116,49,51,81,29,84,43,23,13,78,128,56,49,13,9,61,95,102,40,76,13,62,57,65,9,76,81,141,98,48,94,21,26,117,45,71,25,21,17,144,13,18,31,92,32,45,287,21,26,249,21,32,17,13,25,9,68,33,111,13,9,69,58,29,178,116,36,9,69,53,206,13,9,53,78,154,142,121,9,56,53,261,13,9,47,53,289,13,9,48,53,252,13,9,67,53,290,13,9,42,53,244,13,9,83,19,186,143,41,129,69,361,17,13,9,62,53,221,13,9,66,59,194,52,168,155,52,19,141,55,26,9,38,79,28,13,49,37,36,36,46,98,53,110,88,51,54,53,58,63,71,48,49,56,50,103,189,45,222,534,39,21,40,197,239,69,64,100,94,60,101,54,42,21,35,20,52,90,67,59,158,114,49,30,13,33,32,40,41,40,37,63,34,53,50,45,55,48,70,64,32,152,86,35,55,95,47,85,13,18,92,149,47,85,137,203,17,13,201,92,27,41,123,13,63,143,13,60,66,37,109,67,141,82,89,49,29,25,183,45,25,21,17,64,13,73,40,37,108,53,21,26,81,86,93,102,21,39,275,60,139,126,70,82,35,25,159,55,89,61,25,98,99,111,35,25,82,21,18,13,9,53,97,27,65,74,27,62,17,15,23,9,47,74,60,26,72,17,15,23,9,57,52,28,13,18,66,118,17,22,119,17,13,48,64,32,17,208,13,9,57,24,49,59,103,13,65,379,36,49,59,13,28,9,51,135,9,44,51,117,13,29,9,56,83,128,23,13,51,97,23,13,76,65,77,49,67,13,45,128,13,54,162,128,75,13,38,24,49,59,106,13,104,141,13,49,62,63,38,168,287,13,152,43,42,53,63,17,90,13,9,51,45,32,51,49,52,48,52,47,64,109,51,56,55,49,49,48,33,59,32,13,25,9,124,54,19,29,28,13,191,110,9,46,47,29,13,49,137,74,13,18,59,13,9,63,65,51,13,102,29,51,13,79,9,61,26,29,63,36,65,17,13,53,47,33,80,41,139,118,21,17,41,75,46,45,59,17,68,13,71,9,49,127,9,47,40,50,47,46,50,42,55,45,9,78,98,61,115,9,51,74,47,13,77,9,56,23,51,169,48,36,115,34,68,21,17,22,84,33,119,21,17,13,25,9,57,53,23,82,61,92,67,188,13,18,63,106,86,59,28,13,9,51,37,121,61,129,44,13,85,173,51,119,227,126,13,85,69,163,351,13,62,161,79,61,332,44,13,55,64,61,58,96,44,13,30,9,71,137,105,27,18,25,35,30,30,37,16,18,172,150,156,53,53,62,188,17,53,122,61,49,81,13,145,80,82,69,69,62,63,74,64,37,122,176,59,29,179,72,29,25,38,21,17,33,13,9,49,43,23,42,54,27,100,27,17,13,65,87,23,47,50,23,45,48,68,45,13,59,94,50,71,75,202,84,79,70,108,67,208,17,13,73,107,13,44,80,13,66,165,53,13,46,37,65,113,94,25,94,125,21,51,88,94,113,21,54,201,49,83,72,50,119,44,45,21,55,65,70,25,66,74,207,44,44,21,49,65,70,25,139,83,201,45,21,49,65,70,25,83,168,45,21,55,65,70,25,80,167,53,65,70,25,167,53,65,70,25,255,21,51,196,21,52,75,224,21,57,62,70,25,79,195,184,21,51,105,155,25,99,21,53,155,149,95,99,68,62,93,64,95,126,21,50,234,21,53,261,21,48,63,50,287,21,137,17,13,189,59,13,87,43,86,37,17,52,72,17,77,63,17,70,79,17,44,39,17,99,13,9,53,125,9,52,58,82,23,13,43,23,33,51,56,64,21,48,92,65,66,155,48,17,50,92,56,64,21,48,72,37,21,26,94,82,122,44,30,50,244,54,209,124,21,17,13,61,110,81,25,9,50,150,131,134,33,13,147,65,9,54,43,23,33,57,67,17,51,61,17,13,77,23,65,87,23,45,48,68,45,13,71,59,39,107,13,52,33,131,77,242,54,77,234,17,53,88,81,70,182,41,119,85,91,240,72,73,61,50,78,108,168,29,132,153,71,87,103,156,61,71,29,147,205,27,55,158,25,30,78,54,53,117,61,101,34,25,199,81,58,25,165,88,61,117,44,98,101,86,50,49,70,60,68,25,52,98,21,26,37,21,17,51,41,43,72,67,66,53,52,101,98,66,155,25,88,110,140,113,127,54,170,29,34,101,29,25,84,60,63,62,58,78,160,21,26,60,58,45,72,118,79,71,63,78,75,21,17,50,47,46,84,87,69,53,31,73,103,133,39,119,74,87,182,29,34,123,70,29,66,42,95,54,69,49,73,101,37,56,81,97,103,64,33,45,29,28,69,21,154,148,120,68,58,50,94,53,44,50,34,164,71,77,161,96,115,111,82,128,55,48,30,256,209,119,75,81,133,244,77,49,29,275,28,89,139,21,26,94,77,116,21,17,51,70,17,49,226,51,35,79,70,241,26,17,13,81,131,36,52,72,17,43,63,17,65,56,17,37,32,17,46,42,85,13,9,52,87,23,99,34,23,176,9,44,109,9,44,57,23,13,25,46,27,50,58,17,22,163,17,13,9,34,24,49,59,110,13,38,121,28,50,72,49,59,13,38,9,44,95,9,38,79,9,45,54,9,40,66,53,44,38,13,70,9,44,155,99,73,103,40,41,13,60,9,80,67,68,86,154,125,13,97,87,154,126,13,32,9,50,207,156,118,9,5,53,33,59,24,9,21,5,52,67,117,5,71,89,79,92,69,102,134,36,9,67,123,9,21,5,54,23,58,55,48,74,32,9,5,46,28,47,45,71,37,47,28,9,21,5,52,28,47,45,51,48,44,48,43,45,45,45,44,28,9,21,5,41,28,46,39,45,39,39,47,45,43,41,42,47,41,55,41,43,40,43,38,28,9,21,5,20,15,7,16,47,29,38,38,38,38,52,38,48,38,40,46,20,42,9,5,28,37,88,84,80,78,58,31,40,92,102,64,102,85,16,109,84,10,5,41,91,29,33,70,63,30,121,50,51,57,47,9,48,50,9,47,50,9,47,50,9,47,50,9,47,50,9,47,50,9,47,50,9,47,50,54,9,60,99,19,44,47,9,120,28,5,61,30,52,137,28,5,7,137,7,49,137,5,7,100,7,71,35,57,58,59,59,10,5,56,73,5,61,94,5,46,20,5,47,55,29,5,47,7,83,6,65,78,81,51,68,98,7,99,67,51,51,41,51,61,61,51,46,46,48,54,38,44,24,50,44,42,29,92,26,23,29,64,62,54,106,61,65,63,57,67,67,63,63,67,45,41,59,49,45,51,59,57,65,64,41,135,86,41,14,52,35,135,86,35,14,44,39,13,10,73,70,35,83,9,47,58,92,46,128,62,39,13,24,10,56,36,31,29,70,35,231,85,85,9,59,34,46,85,16,37,43,63,65,29,36,10,38,109,9,11,94,11,43,135,68,9,11,89,11,46,86,74,9,11,51,10,67,40,84,11,45,112,95,9,11,101,11,47,135,73,9,11,92,40,11,50,91,76,9,11,56,10,67,40,66,11,69,132,23,103,133,54,57,17,22,45,17,13,9,11,101,11,49,123,132,109,58,64,13,18,66,13,65,80,13,9,11,79,11,49,123,132,64,58,64,13,18,66,13,9,11,82,11,51,123,132,64,48,54,13,18,56,13,9,11,99,80,11,44,123,132,95,97,86,99,30,128,128,108,98,44,63,63,53,51,9,97,46,123,132,103,47,9,96,45,123,132,98,48,9,11,96,75,11,42,123,132,95,27,57,57,47,61,97,17,61,68,124,77,38,49,21,26,51,21,17,51,38,91,21,26,124,21,17,13,56,44,128,128,108,98,54,65,65,55,50,13,30,9,59,45,49,49,9,47,43,9,11,140,11,36,112,121,106,36,56,9,11,127,11,34,110,119,71,17,52,214,30,36,106,46,58,13,30,9,47,123,99,9,44,126,135,84,38,82,35,41,17,13,57,9,36,126,135,38,36,27,9,28,43,52,78,43,91,17,74,67,72,67,72,45,39,40,68,41,13,9,5,39,36,28,57,43,39,48,41,42,43,50,44,62,42,42,44,33,42,40,35,43,36,40,49,53,45,39,31,6,20,7,16,39,17,36,74,5,41,17,7,79,6,31,43,43,60,129,7,125,62,177,48,34,50,56,76,91,29,34,17,13,9,14,33,96,55,103,33,38,21,17,13,35,78,34,102,13,9,5,47,56,48,50,29,36,43,42,35,22,69,9,14,28,33,77,53,33,148,98,40,9,73,5,75,17,62,42,75,88,151,140,70,192,5,57,17,65,48,51,67,9,14,141,61,110,59,155,120,139,183,144,192,9,5,45,56,97,5,19,52,86,140,108,112,39,5,47,122,26,213,26,5,19,108,250,5,67,99,51,29,79,228,168,28,22,5,32,20,64,34,23,55,13,9,31,44,9,5,62,280,30,37,39,38,33,5,112,65,19,102,22,66,19,49,45,9,57,116,27,52,50,13,9,5,17,132,34,30,76,100,150,9,63,86,101,156,9,14,135,9,121,97,112,49,59,9,37,5,59,17,63,59,396,5,75,17,59,89,45,60,9,14,138,79,43,116,13,76,9,28,5,51,73,56,126,89,46,61,9,14,85,9,28,5,47,17,60,45,109,148,9,132,75,39,69,25,114,27,34,70,25,61,117,13,9,81,26,33,124,5,53,17,127,109,109,56,164,81,65,105,50,120,28,32,47,32,16,168,15,16,37,61,43,42,82,10,65,209,35,89,130,35,96,189,18,13,153,103,85,180,122,85,154,58,85,51,40,37,58,21,44,65,21,40,61,21,17,42,63,17,41,62,17,13,48,138,13,9,55,52,66,23,53,52,35,23,13,114,170,9,109,73,23,13,98,91,35,23,13,41,158,34,63,49,61,47,47,53,65,61,73,55,56,14,50,57,33,54,34,63,79,57,15,113,119,48,32,32,60,9,128,36,23,39,76,39,23,13,122,107,97,201,79,109,60,59,13,171,62,95,44,55,17,13,34,63,49,36,47,47,53,65,73,42,55,57,56,14,68,33,54,34,74,90,68,15,185,53,47,133,139,79,59,53,77,72,19,104,73,103,17,13,43,32,72,9,45,46,67,91,17,23,13,50,102,23,13,56,9,114,103,111,73,35,71,222,13,25,72,13,18,74,13,37,40,44,78,62,23,17,134,39,50,49,174,17,39,40,66,132,17,13,18,35,13,36,121,26,27,9,71,71,142,9,44,119,66,78,93,9,74,38,55,37,75,33,116,153,126,17,59,78,98,17,36,13,67,9,111,45,62,66,81,83,13,114,37,75,33,116,153,126,17,59,78,98,178,112,75,51,17,22,83,17,13,44,9,5,29,17,42,41,5,43,17,42,41,5,35,17,33,41,56,58,69,58,51,56,69,45,48,56,48,54,58,68,56,60,51,66,50,51,46,47,121,44,57,61,47,50,51,64,67,63,53,47,55,54,62,51,65,58,6,85,15,56,202,66,23,112,139,127,106,49,33,15,74,145,189,151,179,64,65,47,30,11,5,17,83,276,80,27,33,74,24,30,82,64,84,68,32,88,52,39,89,64,90,69,52,100,33,126,212,30,29,134,116,24,144,60,151,71,84,66,46,52,73,55,60,70,60,63,66,31,36,48,35,30,43,51,35,30,39,62,65,48,106,68,34,74,25,70,135,31,45,53,35,30,44,56,35,30,28,72,17,101,14,42,64,68,96,52,59,52,53,10,55,96,27,5,47,22,31,74,74,66,70,58,46,54,63,51,583,71,61,62,42,30,80,98,75,73,74,99,84,152,82,19,71,30,26,95,121,73,34,51,22,38,31,28,38,45,55,19,30,30,45,27,33,38,63,29,37,163,53,64,16,16,25,33,33,33,37,27,33,33,33,37,42,10,52,27,40,90,26,44,91,26,40,91,26,13,32,66,64,80,13,60,30,9,55,63,30,9,38,78,30,9,40,80,30,9,48,56,30,9,60,40,65,42,20,36,9,63,40,65,29,42,13,62,20,36,9,44,107,9,65,67,45,31,13,18,81,13,9,61,40,33,36,75,68,67,64,69,62,63,46,13,29,9,77,41,69,62,60,13,9,55,42,91,28,13,25,9,66,19,34,40,50,40,51,32,63,74,37,28,46,78,34,49,78,37,62,60,53,83,26,126,54,37,53,58,72,46,27,21,17,13,58,77,40,66,13,62,46,59,38,88,36,52,56,69,21,35,75,34,52,56,65,21,17,13,20,36,9,56,40,65,75,20,36,9,68,33,40,50,44,55,62,20,36,9,31,75,9,29,43,30,24,9,48,29,42,13,70,9,44,43,39,45,29,47,13,9,58,66,74,13,47,53,64,9,26,39,48,42,32,37,36,42,39,45,79,9,38,92,9,48,35,23,84,71,71,9,43,35,23,88,9,58,35,23,70,9,46,107,9,39,107,47,13,9,61,65,9,66,57,87,42,49,9,43,63,9,45,41,41,41,45,44,9,58,28,42,130,60,21,32,42,139,55,90,25,60,21,32,38,51,56,21,32,40,53,58,21,32,34,48,24,55,13,9,69,70,9,59,87,50,9,51,103,41,73,37,55,59,13,18,55,13,100,56,49,9,72,67,32,57,30,64,17,13,44,70,48,70,51,99,53,93,53,63,72,13,47,36,38,47,49,47,79,34,45,52,41,52,59,39,28,49,55,56,62,41,49,55,45,51,45,51,35,53,59,55,61,51,57,53,59,63,69,47,53,47,47,61,49,55,54,60,50,56,28,49,55,49,55,48,54,51,57,45,51,47,53,45,51,45,51,48,54,59,45,51,52,58,51,57,45,51,53,59,63,69,44,46,48,54,53,59,46,52,47,53,52,58,55,54,59,58,46,56,39,56,62,55,61,50,56,27,48,54,57,59,33,41,47,53,59,50,81,55,61,47,53,47,53,50,56,48,54,50,56,50,56,53,59,50,56,51,57,49,55,51,57,52,58,50,56,48,54,53,59,35,55,61,59,65,55,61,52,58,56,62,56,62,51,57,53,59,47,53,45,51,62,68,59,65,53,59,48,54,51,57,51,57,48,54,51,57,52,58,53,59,48,54,51,57,48,54,47,53,54,31,40,59,65,43,42,49,53,54,69,53,54,69,48,54,49,55,54,60,49,55,30,46,52,49,55,50,56,47,53,43,54,60,63,69,52,58,27,46,52,31,52,55,50,51,65,48,56,58,62,68,38,46,52,42,92,64,46,81,69,55,61,54,60,48,53,52,53,53,59,56,62,53,59,53,59,44,53,65,53,31,48,47,52,58,50,56,44,49,52,56,52,54,58,50,54,31,69,50,51,53,52,31,52,58,58,53,52,62,48,50,48,48,61,52,58,51,57,47,53,81,43,55,58,58,31,17,44,46,67,76,50,46,59,70,29,25,21,17,13,46,36,31,48,47,64,48,59,64,79,34,45,52,52,59,34,58,64,59,65,60,66,59,65,50,56,49,55,60,66,59,65,59,65,54,60,49,55,52,58,52,58,50,56,51,57,57,63,58,64,52,58,57,63,54,60,51,57,49,55,51,57,53,31,48,54,53,59,48,54,55,93,26,46,52,57,63,47,53,39,46,81,43,55,31,62,68,55,51,58,58,31,64,99,17,13,40,58,42,62,102,9,48,28,25,31,25,34,9,59,87,55,36,41,38,9,59,23,84,33,13,46,77,40,91,63,29,29,84,47,92,62,68,21,17,13,26,9,36,39,75,62,23,13,66,80,48,125,143,125,120,121,30,88,51,45,98,101,45,43,41,106,61,47,70,45,33,70,29,25,42,98,37,25,60,62,52,25,30,87,25,43,155,46,21,17,13,34,9,45,50,76,9,10,35,10,36,35,51,60,9,35,46,51,34,36,34,56,103,76,99,35,13,18,135,41,13,9,36,37,56,73,34,28,27,13,9,38,34,38,48,46,88,9,34,38,49,48,40,33,115,39,47,13,9,48,59,48,40,33,57,34,50,54,13,9,10,27,10,55,35,41,57,26,37,53,26,13,9,55,72,85,41,25,9,51,107,170,123,56,9,10,22,10,39,62,81,177,9,10,16,10,46,62,81,9,42,38,34,29,9,39,52,37,13,18,27,13,9,49,34,104,34,9,10,29,10,42,28,34,29,40,29,38,13,31,29,35,29,35,13,9,38,50,48,38,58,37,96,32,13,18,46,13,199,298,9,43,34,93,9,10,23,10,46,50,48,57,37,42,37,9,48,50,48,28,37,40,42,141,37,9,44,42,50,48,28,37,58,50,42,37,41,9,46,50,48,37,28,37,58,9,56,50,48,35,45,9,40,48,40,58,9,48,50,48,78,25,28,58,9,42,42,50,48,58,50,42,37,41,9,47,42,50,48,32,25,58,50,42,37,41,9,43,50,48,67,42,37,9,45,28,31,9,46,37,9,10,16,10,42,39,43,29,13,37,28,29,35,29,32,13,9,42,32,56,9,41,42,58,58,25,35,25,28,41,9,46,37,50,34,28,9,46,34,28,9,49,34,28,9,46,28,34,9,44,42,48,32,25,58,50,25,35,25,28,41,9,38,35,25,32,9,40,34,150,78,34,9,38,85,34,34,9,52,36,28,9,38,94,146,79,104,9,45,38,28,37,93,25,28,9,41,78,34,9,38,119,9,45,126,9,44,84,25,36,25,86,25,34,25,32,25,34,25,33,9,38,34,25,37,9,46,34,28,34,9,33,33,9,41,56,25,75,9,46,81,34,33,34,9,39,50,34,49,29,13,18,28,33,13,37,41,76,45,17,29,13,34,74,32,29,35,29,36,13,34,37,41,73,42,17,13,34,25,28,37,49,29,13,18,28,33,13,34,9,40,41,9,41,28,85,9,43,32,39,29,13,35,34,32,34,33,38,37,13,56,9,10,27,10,49,34,85,34,9,48,34,84,34,9,43,38,36,40,38,29,13,28,123,9,10,22,10,51,41,90,162,9,52,61,76,31,33,13,90,174,129,31,33,13,9,53,88,150,84,77,84,78,66,47,48,35,38,13,40,28,13,18,94,13,83,28,60,9,79,124,61,72,50,103,117,102,84,120,13,57,58,68,73,83,67,13,9,52,88,40,105,52,114,9,43,84,31,38,34,38,29,13,88,31,38,13,40,56,145,9,42,85,25,87,56,145,9,53,84,31,38,34,38,29,13,81,31,38,13,56,25,42,9,52,34,28,34,92,9,52,111,85,78,60,39,137,9,47,44,54,9,42,50,48,62,9,46,58,58,42,25,46,9,45,87,25,92,9,45,88,25,92,9,43,86,25,92,9,44,87,25,92,9,50,57,58,29,13,89,9,58,108,109,109,84,14,23,24,14,105,115,90,51,39,67,150,159,9,51,90,57,9,47,126,43,28,39,97,77,77,107,116,120,111,39,53,39,55,41,17,22,29,38,65,48,48,63,57,59,22,17,29,13,54,65,13,62,81,95,95,74,65,121,154,91,13,55,66,13,42,100,100,74,43,106,86,86,116,95,99,63,47,54,45,124,108,39,17,13,62,57,105,105,101,69,63,89,105,49,17,65,67,61,54,36,21,17,61,56,13,9,50,101,99,94,94,103,88,37,87,99,70,85,34,84,100,64,9,47,28,85,9,44,87,37,161,9,42,92,100,9,44,44,51,9,56,88,56,9,41,78,28,29,35,29,32,13,9,46,88,31,9,41,70,34,28,9,10,15,10,41,44,31,9,10,21,10,34,97,9,61,108,162,52,170,9,46,48,39,37,9,58,93,101,38,38,13,18,41,13,9,48,103,47,133,99,41,13,9,40,102,25,96,44,104,60,37,79,103,72,33,45,17,22,68,17,13,9,50,106,25,96,44,104,9,40,83,56,72,29,13,18,72,13,54,37,9,43,44,56,9,41,103,25,122,45,135,59,131,61,130,56,9,43,103,25,96,45,25,96,25,44,104,56,9,43,103,25,54,96,45,25,96,25,44,104,56,9,39,37,70,31,17,22,41,17,13,9,46,89,45,37,9,43,86,45,37,9,87,56,71,31,53,65,13,64,133,34,37,17,56,34,37,17,13,53,59,84,124,13,23,9,47,94,9,47,35,29,110,28,86,28,56,55,130,36,17,63,13,25,9,11,113,43,11,55,109,58,75,126,91,53,55,34,17,70,13,24,9,73,112,9,44,104,143,37,9,42,105,25,96,44,104,56,9,44,107,25,96,44,104,25,33,9,45,29,94,25,33,9,43,87,124,37,9,41,85,25,32,35,72,39,13,36,93,123,29,40,13,9,46,73,37,9,10,23,10,48,28,40,42,151,9,52,89,25,81,9,48,54,9,60,50,48,37,37,25,42,58,9,64,33,23,39,84,39,41,21,50,63,45,44,48,49,39,41,21,17,22,44,33,95,17,13,18,40,41,13,9,42,58,50,42,9,64,88,65,88,61,88,64,61,28,13,33,29,13,98,29,13,91,97,29,13,34,74,39,112,33,17,46,13,24,9,46,103,25,34,29,85,51,46,47,91,13,18,44,13,29,94,100,9,58,90,9,87,68,74,42,30,108,33,92,33,13,18,139,13,9,45,51,9,57,58,50,48,34,28,29,46,13,76,31,33,13,58,79,25,34,65,34,31,33,13,9,49,50,48,38,25,28,58,76,25,34,69,34,9,49,50,48,33,25,28,58,25,34,25,28,37,9,44,48,33,25,28,25,34,64,34,9,46,48,62,87,29,13,28,33,22,48,58,38,32,33,13,25,23,9,40,42,55,78,41,9,38,92,69,125,9,52,48,126,25,34,90,29,13,28,25,94,25,54,37,9,44,52,37,13,18,27,13,9,46,48,126,25,36,40,29,103,29,13,49,36,56,13,37,9,41,34,90,29,13,28,50,97,29,13,37,9,44,103,25,81,25,28,9,41,44,9,44,46,9,45,101,25,38,89,13,18,91,13,25,65,97,69,37,9,46,101,25,34,99,29,13,36,40,13,18,104,13,39,29,82,89,29,53,13,36,56,13,37,9,41,88,25,41,71,9,40,28,34,25,35,48,79,61,65,13,24,9,55,101,25,93,25,100,25,28,37,9,44,103,25,81,25,28,9,41,44,9,44,46,9,50,34,86,34,9,52,34,37,29,13,36,40,29,101,29,13,28,9,10,28,10,52,36,34,44,34,9,10,14,10,39,38,85,38,9,50,34,41,56,25,34,35,9,40,39,85,39,9,56,34,47,86,45,60,90,33,17,38,64,43,13,34,9,36,43,9,56,35,47,45,13,34,9,42,79,9,41,28,95,9,47,37,44,34,9,53,31,193,26,9,52,31,192,26,9,45,91,9,42,19,179,224,34,44,17,106,42,48,164,34,44,17,13,9,39,52,37,13,18,27,13,9,10,18,10,39,85,25,100,84,9,42,98,68,9,80,66,17,88,51,58,103,68,40,88,29,68,13,18,98,13,53,9,43,25,53,25,70,9,40,105,25,43,100,47,117,29,13,29,9,10,31,10,47,28,34,25,76,32,31,53,25,86,66,47,85,67,65,13,96,9,56,28,51,29,38,29,121,13,9,45,34,96,104,13,9,10,15,10,39,28,123,9,10,16,10,34,25,31,66,27,56,82,47,36,37,46,37,36,21,17,13,28,110,33,39,17,22,69,17,13,25,24,9,47,42,56,42,9,39,42,27,42,9,47,25,34,28,34,9,44,42,25,34,28,34,42,9,44,42,52,25,75,42,9,43,42,37,80,64,17,22,33,42,36,57,46,46,21,42,17,13,31,29,35,13,42,95,57,13,9,44,42,27,29,31,13,42,51,9,42,42,42,9,44,100,9,42,37,101,13,33,97,13,27,28,29,38,29,31,13,9,50,44,58,25,36,38,13,29,36,38,13,44,9,44,34,26,9,44,57,23,29,28,13,9,58,33,29,38,42,38,13,9,10,26,10,39,24,45,47,113,100,74,61,56,48,89,27,17,13,39,9,67,169,72,37,82,94,41,34,36,21,17,13,9,58,39,145,9,81,34,46,73,35,132,28,13,68,102,28,13,73,96,37,35,125,21,26,94,21,32,17,13,74,44,46,91,35,150,28,13,76,45,46,92,35,140,28,13,71,43,46,90,35,138,28,13,9,45,45,42,55,30,118,52,133,41,9,31,55,50,97,68,13,44,99,67,13,9,38,114,9,11,88,63,11,114,52,57,46,56,141,54,51,57,54,25,36,54,40,70,163,53,82,25,21,17,22,71,29,17,13,37,9,75,86,47,65,32,50,35,39,147,49,66,21,17,13,9,69,54,90,13,18,58,90,41,85,17,93,44,136,17,41,13,9,70,54,26,77,59,40,28,84,43,59,30,78,33,74,60,43,43,37,58,58,59,25,23,68,17,31,139,13,29,9,58,97,69,30,42,32,32,17,13,18,90,41,70,55,36,21,17,93,44,62,58,36,21,17,13,9,10,18,10,51,22,23,35,27,23,31,9,49,48,66,29,13,9,43,23,38,29,27,13,9,92,23,29,107,29,56,13,9,71,23,37,27,13,9,45,23,29,27,13,9,74,23,29,56,13,9,46,23,27,29,13,9,54,83,29,27,13,18,28,33,48,66,17,22,31,17,33,13,9,57,71,9,63,122,9,65,165,79,13,77,9,57,68,9,65,61,28,110,100,89,84,82,93,86,84,73,76,78,82,88,9,65,65,98,13,18,55,13,9,74,82,9,41,55,34,26,45,42,26,42,33,42,26,48,33,42,33,26,48,33,42,26,13,9,90,94,9,100,104,9,100,48,85,53,74,23,13,92,66,44,52,17,43,51,17,23,13,52,60,42,133,17,13,40,48,13,26,76,152,32,17,108,33,17,13,18,40,75,101,79,127,49,58,58,17,65,33,17,53,50,37,17,35,45,56,58,49,52,73,62,66,36,47,21,47,30,61,53,37,148,37,125,79,25,47,87,97,125,64,90,67,109,49,69,29,69,66,25,94,41,25,21,39,93,56,69,73,21,26,83,21,51,44,36,21,26,55,21,56,41,62,21,44,17,56,87,109,199,39,67,122,21,26,46,21,17,76,22,41,29,50,27,163,175,17,53,50,37,17,79,75,109,49,58,17,98,33,17,13,39,47,13,52,42,108,17,60,13,9,18,34,35,9,40,41,9,31,28,9,38,39,9,38,39,9,43,47,9,34,35,9,35,36,9,36,37,9,34,35,9,31,35,9,35,36,9,38,72,42,43,13,18,32,13,9,35,48,45,40,13,9,35,36,9,35,36,9,62,38,89,53,9,47,36,40,13,48,35,39,13,9,53,54,32,60,9,77,67,29,13,46,91,28,37,17,22,33,17,13,18,28,13,9,35,48,57,74,43,80,34,32,32,17,13,9,75,28,33,37,13,48,29,13,9,93,94,93,55,51,25,33,13,25,33,13,9,78,75,57,29,17,47,49,104,17,62,105,107,44,22,34,41,40,24,22,104,109,118,111,108,62,29,17,61,103,29,17,33,64,58,123,49,220,21,116,17,75,29,17,13,54,9,83,75,75,29,17,57,103,29,17,98,110,189,21,122,118,120,122,72,110,118,21,119,62,70,17,132,29,17,13,55,25,13,54,9,78,75,57,29,17,61,46,104,17,172,49,135,204,21,111,17,72,29,17,13,91,25,13,21,9,55,90,82,54,98,73,14,23,33,23,68,30,98,18,44,27,18,97,51,68,13,25,9,67,120,34,89,13,37,9,57,121,35,44,13,9,63,45,66,52,70,17,39,13,62,9,61,71,25,13,56,54,54,87,47,25,13,112,45,175,17,100,13,21,9,38,48,88,9,51,99,39,13,24,9,53,49,42,13,261,39,13,83,73,13,100,33,13,96,9,83,78,57,93,121,102,145,77,17,22,102,17,13,73,71,108,123,69,9,11,44,11,48,86,23,13,43,26,51,9,11,49,11,47,86,23,13,45,53,9,50,93,45,13,36,9,38,22,23,32,37,63,26,48,45,43,46,50,26,43,54,54,26,44,46,46,52,50,26,47,50,26,41,60,26,42,45,63,26,44,49,52,53,26,43,60,46,26,49,56,26,55,65,26,51,41,46,48,52,26,51,52,86,67,49,21,26,52,51,61,26,49,53,26,44,52,54,26,47,52,26,47,52,26,44,61,26,47,73,26,13,9,44,22,23,32,50,59,51,49,43,43,52,26,13,9,45,23,53,39,17,53,40,17,13,9,11,56,11,37,79,80,58,97,13,18,80,34,57,139,13,9,50,44,119,9,11,97,39,11,37,46,44,63,9,11,99,11,46,111,9,11,82,11,53,107,34,83,109,120,37,21,17,13,24,9,11,79,100,100,11,70,48,70,41,39,49,56,21,32,17,13,26,66,28,40,50,41,71,45,45,53,60,25,36,21,17,13,9,11,101,99,95,59,106,11,72,63,29,40,33,60,21,26,53,21,36,17,13,75,74,32,13,22,26,49,45,33,65,21,26,58,21,41,17,20,13,9,58,84,9,11,78,11,52,48,93,79,9,11,81,11,65,72,53,70,44,9,11,56,11,49,45,9,11,58,11,51,43,9,56,45,53,13,54,9,11,47,11,51,32,41,154,49,47,61,49,49,74,51,48,48,58,47,60,49,43,43,65,52,94,24,62,13,9,11,52,11,33,64,34,123,34,129,36,256,13,73,9,11,63,11,48,53,28,41,30,32,78,65,41,64,64,26,17,41,13,66,24,9,19,55,83,49,49,79,41,38,112,9,47,50,56,36,91,58,40,13,9,118,50,56,37,58,41,13,164,9,71,27,38,151,100,131,134,57,54,88,68,43,108,17,108,141,39,17,111,32,39,88,78,74,58,21,17,13,92,26,9,144,27,134,94,54,52,49,49,79,89,91,91,46,17,13,26,9,57,96,35,13,45,97,35,13,18,39,13,9,58,44,39,13,45,45,35,13,9,51,57,115,81,9,52,66,49,44,9,82,27,65,50,97,120,39,73,13,26,79,40,35,41,13,18,35,13,27,40,79,69,39,17,13,26,9,60,46,97,34,85,9,76,50,29,13,60,52,45,56,29,13,74,136,128,9,58,38,32,143,87,17,22,73,17,13,33,131,78,31,48,38,48,38,132,80,13,9,108,63,95,13,9,111,64,95,13,9,48,53,88,13,24,9,97,72,23,37,112,41,13,97,32,119,32,37,35,13,63,39,13,9,53,49,23,13,61,9,44,67,9,89,72,23,101,44,39,13,32,119,32,37,35,13,9,83,35,23,13,27,171,26,9,87,114,32,119,32,59,136,13,9,99,114,32,119,32,37,35,13,18,39,13,9,55,148,85,47,69,17,22,98,17,13,9,56,149,126,80,13,9,43,103,9,67,56,74,50,43,13,18,49,13,90,9,67,169,45,43,74,17,22,72,17,13,9,86,72,23,32,89,32,9,11,59,10,75,11,63,101,9,22,43,89,92,13,53,9,57,85,43,38,42,9,49,50,60,37,42,97,61,51,234,17,13,18,70,63,70,49,122,17,62,46,17,13,9,48,50,60,38,43,62,47,17,63,71,49,96,17,13,9,11,115,11,48,96,9,11,27,10,91,19,10,35,11,31,112,23,13,130,131,37,9,45,45,59,69,43,29,86,13,18,29,13,9,11,82,10,53,42,59,67,11,86,70,61,13,49,71,106,66,78,90,48,13,61,22,37,91,48,13,28,9,45,37,23,13,37,62,98,92,77,23,13,48,23,13,81,47,87,13,54,73,9,60,37,47,9,52,79,9,5,37,34,26,49,54,56,57,24,5,40,62,5,40,62,5,76,18,27,50,68,54,38,20,15,7,16,100,58,29,9,53,92,16,65,35,90,69,43,41,69,51,67,45,35,47,10,35,79,9,58,99,9,61,73,9,50,66,9,70,19,120,38,162,67,18,112,38,13,66,106,66,29,13,37,29,9,11,74,57,91,11,57,75,71,31,36,13,17,75,13,24,112,114,33,13,9,46,79,9,42,91,9,68,46,31,114,17,13,31,46,13,9,64,40,68,25,107,13,70,9,39,40,68,87,42,9,43,39,125,9,43,39,68,62,25,90,13,42,9,42,46,64,25,50,13,48,9,80,46,68,34,43,162,13,86,48,39,43,81,17,57,45,71,46,13,62,62,45,30,169,74,18,41,47,30,13,9,30,56,9,83,81,47,47,128,29,33,13,89,32,33,13,79,61,40,112,29,33,13,66,33,65,74,14,96,108,29,13,18,72,95,13,33,9,65,64,23,13,78,31,139,13,9,83,76,9,31,46,9,5,79,37,46,88,54,94,101,88,37,102,113,7,140,7,137,15,208,53,83,63,53,32,13,11,51,91,78,27,51,13,18,67,68,56,107,40,90,70,35,49,78,22,19,13,11,5,85,7,93,7,88,59,53,32,11,5,83,7,73,7,92,64,19,56,19,51,190,75,13,11,5,59,7,81,7,90,41,50,51,46,11,5,55,7,111,7,95,61,108,96,48,65,38,51,90,43,46,11,5,65,7,118,127,137,71,7,114,72,50,59,61,46,66,59,11,67,50,20,58,28,14,9,84,76,50,23,13,44,105,9,5,77,19,52,399,64,23,109,24,9,38,51,25,100,87,131,139,24,9,215,110,24,9,21,25,99,61,50,25,60,73,86,39,29,9,95,25,9,56,83,130,88,73,75,108,24,9,21,38,32,57,32,67,98,9,5,77,40,34,5,52,23,25,9,43,5,55,22,31,58,72,64,68,76,78,34,144,172,10,75,13,69,78,15,22,63,13,56,65,15,57,77,45,37,16,66,75,10,53,82,23,343,115,90,14,9,46,72,48,49,9,98,134,20,168,14,9,99,131,111,20,36,139,36,17,14,9,104,147,27,39,116,49,71,20,36,155,35,47,36,57,79,17,14,9,52,162,30,63,45,17,289,36,43,87,53,80,60,9,99,273,9,5,41,42,104,16,54,33,56,10,5,47,49,39,5,47,20,7,16,65,68,76,65,63,11,5,39,70,59,118,52,5,65,19,105,33,66,65,100,102,40,29,60,23,13,87,41,118,34,67,36,21,61,52,26,17,13,122,76,74,13,11,97,21,22,9,87,36,9,66,5,89,58,65,5,47,17,62,72,51,47,99,89,68,21,17,52,55,51,82,13,23,30,39,17,26,13,121,9,49,57,28,13,90,61,28,13,25,9,73,17,53,76,78,76,330,52,85,13,23,30,39,17,13,9,31,70,69,69,23,13,38,50,13,41,63,30,67,92,34,71,48,76,27,17,13,65,92,46,27,50,33,15,9,42,88,9,94,94,28,41,57,142,33,98,96,55,56,84,80,70,104,137,84,31,156,80,63,10,28,5,59,17,76,45,49,59,59,47,41,43,48,43,53,39,47,36,59,51,10,57,65,78,28,10,45,39,47,36,89,38,101,61,13,51,10,127,39,49,22,29,106,121,53,13,30,22,47,47,39,49,36,29,67,49,28,10,32,98,43,44,51,60,46,48,17,50,62,65,52,21,17,103,14,9,26,65,57,44,58,40,33,77,58,32,14,57,44,49,62,14,9,16,47,51,61,61,49,59,48,10,5,75,76,24,90,97,111,96,110,67,117,9,78,5,53,51,24,88,47,57,9,22,5,45,49,219,30,149,52,167,118,9,28,5,43,20,39,48,62,61,64,62,62,119,42,30,42,25,26,24,42,27,88,93,132,91,9,5,20,53,56,5,49,79,114,121,91,63,53,35,65,9,25,53,41,93,62,80,150,33,13,73,115,66,73,91,69,128,55,78,120,37,34,99,103,80,83,96,13,38,81,13,18,44,58,13,43,9,23,5,19,55,62,132,191,24,79,22,89,22,93,22,5,39,70,24,88,47,34,69,78,32,13,121,116,94,34,44,163,13,48,44,92,122,31,52,99,141,21,48,100,17,13,40,9,22,5,83,66,46,32,24,9,38,22,9,24,21,30,46,31,13,9,35,17,24,68,33,77,13,9,22,5,67,19,85,33,22,9,29,33,70,35,32,34,41,13,18,92,13,37,9,27,5,47,5,19,55,49,29,138,49,88,5,65,19,51,15,49,29,62,96,132,9,94,119,133,130,5,57,19,109,33,22,9,29,33,18,70,35,32,70,16,89,38,45,13,18,106,13,37,9,27,5,55,19,77,182,5,73,106,29,90,79,45,24,62,27,34,13,88,157,40,37,17,71,43,34,105,110,15,9,5,19,66,17,39,78,43,50,59,58,28,20,29,9,5,43,17,48,42,5,57,17,66,23,27,72,47,32,23,43,78,219,45,90,66,40,22,50,79,22,59,87,271,22,58,86,22,20,50,9,72,5,61,7,76,7,19,204,115,176,25,41,74,25,29,44,108,25,82,65,25,59,59,25,58,86,63,25,72,80,63,81,20,52,60,58,9,56,105,9,66,66,104,9,75,33,30,66,32,68,75,46,42,33,43,110,33,35,109,33,87,83,96,98,132,19,13,74,62,62,50,9,5,45,69,193,41,5,73,7,138,27,6,102,132,106,136,148,7,89,58,48,50,140,139,174,179,20,33,9,42,97,158,9,5,65,20,35,24,69,74,59,61,98,125,94,59,84,278,86,60,56,74,75,25,113,97,94,69,90,106,110,110,96,102,93,81,66,76,71,70,83,72,78,94,87,90,70,75,96,72,96,72,73,80,95,74,77,135,67,75,161,46,118,87,88,92,106,95,71,71,57,96,96,85,201,109,95,86,102,102,55,70,84,40,89,52,53,83,87,69,85,60,64,83,67,56,81,97,7,7,86,7,69,21,25,95,114,118,5,109,16,33,29,23,35,70,10,5,109,27,215,237,57,38,33,18,21,34,44,37,30,65,46,54,53,59,38,129,107,58,91,99,128,117,119,40,117,119,52,122,64,222,45,76,74,43,112,142,65,58,69,144,76,54,48,34,50,43,87,38,315,138,68,36,17,55,90,37,18,124,9,14,116,275,281,9,59,50,269,9,14,289,279,271,9,76,115,159,49,92,51,104,53,48,11,19,34,81,32,11,39,29,62,72,96,112,38,38,51,52,155,61,67,31,45,85,27,71,85,76,131,48,175,95,81,148,108,30,144,98,81,55,43,38,36,49,103,17,39,169,39,35,76,66,116,110,58,145,33,29,25,30,38,165,29,114,195,110,58,144,268,37,33,29,25,23,17,13,158,199,85,126,117,40,172,91,140,110,111,65,260,17,89,13,53,45,72,46,54,100,107,73,61,151,17,22,75,174,23,17,13,104,47,61,16,114,50,45,9,44,72,39,56,61,101,57,78,60,63,121,139,17,13,45,96,103,153,21,19,13,9,61,60,156,173,75,161,113,17,15,9,58,99,31,23,64,41,53,58,74,84,67,64,61,57,55,59,71,63,65,67,57,43,55,83,63,23,74,102,114,106,102,120,120,92,104,77,67,85,67,61,61,51,69,41,77,117,55,71,69,89,81,77,83,41,35,31,45,45,94,96,71,49,10,34,41,151,38,71,229,67,139,238,24,53,13,11,32,44,75,81,23,85,36,37,117,88,181,55,139,54,97,85,26,9,95,43,26,165,131,197,62,133,61,118,85,26,9,58,88,139,32,119,137,96,30,37,83,81,64,91,129,33,83,141,9,81,71,36,69,24,33,89,75,70,25,37,74,15,9,47,96,9,47,88,62,75,29,87,50,33,37,13,38,9,104,131,9,35,79,9,45,54,124,366,13,41,9,41,19,37,72,33,49,78,49,163,17,13,37,9,71,87,140,71,94,13,86,65,58,18,89,89,86,80,90,73,35,26,96,55,116,24,51,17,33,13,73,64,47,105,94,35,15,83,14,85,51,88,63,60,15,23,28,96,61,58,48,119,94,139,44,63,72,153,336,25,100,77,33,21,17,93,99,112,82,69,71,68,59,205,21,17,22,129,17,63,118,17,22,130,87,17,13,77,81,32,67,26,64,75,35,13,22,53,32,80,66,80,64,21,17,22,47,24,17,13,54,26,91,56,92,233,85,155,115,55,96,76,104,94,33,17,89,91,38,33,17,55,166,17,28,13,9,46,164,104,77,37,77,45,82,119,17,22,76,56,17,56,79,153,109,15,9,52,19,30,35,13,102,82,61,72,35,13,75,61,62,35,13,75,47,35,13,36,99,13,108,36,41,51,93,50,113,129,35,13,61,32,41,74,78,58,48,101,57,60,181,166,37,39,17,131,41,49,99,118,84,105,43,21,40,71,17,81,90,58,43,21,40,17,22,66,17,119,56,80,72,64,82,93,48,120,83,69,82,116,43,21,63,17,34,82,145,106,64,21,90,62,97,64,21,51,131,61,64,21,61,67,112,46,64,21,136,58,64,21,168,52,64,21,147,57,64,21,51,97,17,72,67,60,85,97,17,78,51,13,59,41,13,92,101,51,59,93,48,96,21,17,13,57,116,107,64,96,74,170,41,60,116,17,22,82,17,116,158,129,66,226,54,60,162,17,22,122,17,13,59,41,13,181,43,13,64,46,90,101,57,67,13,67,64,31,51,27,17,44,111,78,85,21,27,17,69,15,35,61,82,94,73,63,81,38,9,49,20,49,59,75,63,78,70,53,65,55,73,81,93,73,87,49,203,45,68,42,39,41,50,36,60,37,54,46,18,100,122,123,55,69,14,9,51,50,154,46,101,44,48,40,36,45,70,85,30,9,49,45,9,41,37,9,36,214,44,59,110,15,9,56,73,9,51,39,28,13,33,29,13,96,103,134,31,84,13,18,141,13,9,55,150,9,56,56,9,35,137,9,119,224,191,85,26,9,46,72,9,140,32,108,27,34,13,96,95,41,14,102,99,99,66,149,46,185,51,45,70,30,9,42,57,9,44,54,9,86,29,69,13,112,40,69,17,69,16,9,73,103,9,72,102,9,59,19,29,130,70,9,76,84,9,52,19,68,37,13,98,104,48,13,137,9,75,55,137,53,86,13,18,109,13,9,61,88,76,48,65,109,17,110,13,47,9,49,17,30,13,23,65,97,70,22,100,97,97,98,96,76,57,64,17,24,13,9,79,171,9,83,153,9,90,57,72,41,17,71,62,105,88,78,113,101,83,81,62,147,139,114,146,32,120,122,17,108,202,15,9,95,19,36,59,55,13,61,139,39,13,176,93,46,147,13,31,9,11,110,78,11,104,92,105,90,153,72,9,74,57,116,15,9,11,89,11,76,65,24,26,13,59,52,106,31,86,48,32,17,76,94,75,30,17,23,13,22,9,63,57,37,45,72,35,45,102,58,42,49,59,57,64,153,46,29,40,55,51,51,51,58,59,53,59,46,55,150,46,29,21,40,52,50,166,46,29,34,57,50,164,46,29,34,63,136,42,56,54,140,46,29,34,54,54,87,152,46,29,34,60,96,71,163,42,57,171,68,160,42,60,142,42,55,108,158,42,57,149,42,52,161,42,63,118,21,17,51,89,275,21,42,56,55,57,51,51,51,58,59,53,52,66,167,46,29,40,57,46,61,110,46,29,34,59,70,61,84,58,84,193,37,33,46,29,34,49,71,61,159,46,29,34,54,53,67,61,57,64,51,65,154,46,29,34,21,17,66,94,55,48,55,51,45,33,47,44,57,58,60,59,58,59,59,185,38,61,57,56,57,25,21,17,89,42,116,17,88,76,83,111,17,15,9,81,151,9,89,57,115,87,113,15,9,95,19,41,99,39,31,36,13,71,29,95,13,18,46,13,26,9,82,118,9,42,148,9,54,36,37,93,68,126,15,31,9,41,156,9,52,65,9,86,125,9,47,45,9,44,49,83,73,9,52,86,203,79,69,43,126,85,73,53,50,9,56,31,23,13,59,65,79,24,36,31,95,31,65,45,44,62,94,17,108,32,73,93,17,13,74,34,73,13,97,57,13,52,76,70,19,69,53,72,63,127,120,181,171,69,119,102,25,21,17,56,148,48,82,126,57,151,155,89,118,96,25,52,57,87,89,29,95,95,97,79,98,49,39,94,59,97,33,29,25,21,17,13,63,42,91,68,112,171,72,21,154,128,171,72,21,64,171,76,21,17,13,116,62,41,59,145,37,21,18,30,175,33,39,21,36,17,13,9,47,63,53,30,66,13,9,104,67,136,9,90,44,78,212,31,73,129,25,30,189,25,21,37,17,57,27,38,77,39,121,25,30,76,25,21,152,86,21,17,34,13,18,100,42,49,59,68,37,17,109,156,58,166,52,13,9,62,99,183,35,30,63,49,17,114,23,9,64,134,9,89,142,51,203,13,18,203,13,9,121,57,41,33,49,57,99,88,47,21,85,91,18,25,89,95,18,15,28,9,51,96,128,35,56,65,15,109,85,26,9,102,40,54,71,87,85,68,95,30,36,47,57,74,67,42,79,17,29,54,101,34,31,89,34,17,13,44,40,51,66,99,124,73,54,78,37,85,21,93,117,112,68,89,21,17,121,109,119,81,45,69,63,21,41,62,21,69,51,17,87,79,73,73,55,21,17,43,13,31,83,83,38,74,83,41,21,92,40,94,104,105,118,68,54,17,13,74,299,28,67,80,40,95,90,154,77,72,58,92,55,35,17,32,76,66,92,17,13,61,23,92,110,33,53,57,161,159,157,230,51,55,69,128,80,39,95,21,26,71,21,17,97,41,63,57,17,37,56,17,84,45,35,57,17,22,52,17,13,24,9,53,21,51,9,67,33,54,53,13,18,44,13,9,56,81,99,9,63,43,185,33,13,89,88,67,9,77,72,24,60,124,9,11,91,11,66,71,70,78,73,95,86,124,27,21,19,13,101,101,9,54,85,9,60,48,33,72,71,72,74,30,79,83,93,21,26,189,91,136,178,105,29,27,21,19,13,69,9,63,108,9,74,45,33,13,84,9,61,68,106,46,117,15,9,55,112,135,34,23,13,93,73,62,72,60,68,101,173,13,9,112,314,112,85,9,118,86,97,67,23,13,38,49,75,46,61,53,209,17,22,120,63,45,85,118,111,98,70,353,29,25,69,47,21,26,59,195,21,17,75,46,13,18,170,13,33,108,13,9,46,76,89,111,52,37,22,60,62,20,13,123,188,145,81,13,68,9,54,84,76,57,34,81,201,17,22,104,104,163,90,76,115,47,51,23,17,15,9,49,55,9,47,19,50,73,126,55,87,75,207,74,56,121,38,33,21,85,91,86,71,50,50,21,51,50,43,67,92,112,109,127,56,79,52,54,39,86,118,38,70,21,45,57,48,145,21,50,50,21,17,13,18,62,49,13,9,75,44,133,92,51,52,144,90,203,53,21,17,13,40,9,55,45,57,13,75,59,49,74,42,46,13,28,27,44,65,35,113,73,37,17,83,88,95,13,18,91,118,73,95,47,73,37,17,151,13,42,45,53,50,83,71,48,108,13,31,9,42,112,29,77,228,17,84,230,17,102,248,17,104,250,17,13,112,171,13,110,169,13,42,34,135,17,38,139,17,13,42,40,141,17,38,139,17,13,36,52,133,17,52,140,17,13,49,42,60,182,17,13,85,208,13,38,112,36,66,78,43,54,96,238,21,17,13,32,48,62,33,21,65,147,21,57,60,40,158,25,55,62,59,59,79,178,33,113,188,33,29,34,189,29,25,21,26,145,21,17,13,65,44,176,17,41,173,17,13,49,123,13,84,65,173,13,41,55,181,17,33,160,17,13,77,177,13,47,121,13,98,144,13,66,146,42,96,210,17,59,184,17,202,55,122,366,17,13,140,95,156,217,13,76,61,123,163,17,99,160,261,17,13,44,97,97,99,172,17,80,65,205,17,13,110,132,64,66,72,66,69,53,174,130,137,17,13,85,144,13,75,163,13,46,55,186,17,37,142,17,13,48,50,170,13,37,45,141,17,94,176,17,87,173,17,13,111,163,13,45,42,159,17,94,184,17,95,197,17,13,41,94,180,17,13,42,52,181,17,13,103,169,13,123,70,45,51,74,55,86,21,91,19,13,88,70,35,60,71,56,43,54,100,266,25,154,110,21,126,74,57,73,193,21,26,55,21,17,13,9,95,19,35,28,107,21,113,37,52,131,140,47,108,169,72,271,66,135,80,44,123,66,130,44,17,53,104,17,100,52,53,13,9,109,82,72,40,59,39,26,15,9,77,127,9,64,43,95,30,38,51,84,30,58,87,30,67,100,30,66,95,30,28,53,17,209,13,36,33,31,24,34,49,60,41,107,82,41,122,94,30,21,87,67,42,41,122,95,26,67,67,199,149,205,23,39,41,91,228,89,172,98,99,34,67,39,41,104,96,26,48,53,111,80,30,21,177,100,95,26,24,49,13,121,9,44,124,121,101,61,35,111,27,17,62,59,88,83,40,47,162,43,144,21,17,34,50,30,52,151,25,21,26,160,21,17,113,206,80,17,15,9,100,46,53,92,49,73,118,46,63,115,172,59,25,21,17,13,41,95,13,9,76,46,53,92,49,73,135,51,17,13,41,83,13,9,47,93,124,9,41,68,9,55,60,213,9,67,93,138,9,84,108,9,76,108,9,87,242,79,168,13,18,89,13,9,96,93,79,149,41,95,13,9,58,68,60,98,40,129,42,77,83,34,25,21,17,13,68,9,123,76,74,39,164,13,34,9,58,71,41,9,38,33,29,13,59,40,48,29,13,65,42,22,122,13,85,147,28,13,62,33,118,13,133,74,80,92,89,13,25,9,43,122,9,36,39,46,13,28,89,13,98,92,13,28,9,5,37,69,40,62,72,70,58,54,80,50,28,38,96,66,93,83,76,56,32,17,57,33,51,63,73,70,34,99,25,30,140,122,49,93,29,25,23,17,80,14,9,37,81,105,64,147,74,23,14,9,62,31,55,23,137,64,14,9,126,44,62,72,70,63,9,82,49,84,35,65,28,53,29,48,29,73,75,9,56,85,41,97,26,9,64,43,105,120,58,84,55,72,9,59,19,90,23,78,91,23,54,92,121,23,93,25,37,104,32,73,23,13,59,64,34,15,9,76,19,59,83,89,46,75,37,30,54,78,38,29,67,80,29,133,28,92,90,70,94,37,135,39,56,126,172,17,30,24,9,5,17,136,17,85,51,29,45,74,54,49,68,9,93,91,57,35,29,339,95,105,9,32,29,25,50,81,39,112,51,9,114,5,49,17,60,100,5,61,19,80,81,16,86,83,172,105,14,82,72,84,112,82,10,5,81,19,78,31,33,18,60,43,57,76,62,105,25,29,295,144,51,13,9,38,5,47,58,48,65,5,65,19,7,94,104,78,7,51,37,28,32,35,44,33,34,33,34,50,32,37,36,47,9,28,106,9,32,215,9,42,135,9,5,57,33,79,63,112,48,54,35,13,108,9,19,5,19,54,79,35,34,38,112,48,54,39,31,27,13,108,9,100,5,67,20,13,7,16,124,29,260,168,64,101,9,5,45,21,30,39,44,56,32,27,49,61,132,75,69,71,68,65,65,45,69,49,35,41,25,96,42,34,36,22,45,110,58,45,119,47,47,66,29,27,51,117,47,61,29,27,38,38,25,35,22,18,27,13,77,9,71,43,33,23,35,32,13,23,9,61,63,33,74,47,34,17,28,13,25,9,69,194,9,11,98,11,75,65,80,9,11,109,11,110,131,9,11,126,11,80,32,90,52,100,70,55,81,44,110,162,17,13,83,45,86,89,48,148,54,17,13,47,65,114,58,31,21,101,131,52,19,13,52,56,55,93,44,56,33,73,32,33,67,58,17,13,35,103,43,90,65,17,13,35,60,43,27,17,63,82,45,84,48,63,78,21,17,13,56,90,13,9,11,105,11,63,77,9,57,11,109,11,103,41,134,91,61,72,59,40,63,86,40,161,104,36,105,40,82,21,60,38,109,46,93,25,21,17,238,13,20,37,45,55,77,92,14,9,37,11,37,11,38,66,43,9,49,11,39,11,31,23,71,20,55,106,116,95,75,14,9,35,11,63,11,151,100,65,99,133,72,74,30,37,13,152,36,13,256,42,67,65,13,26,9,61,11,81,87,11,67,121,9,75,64,60,58,9,67,11,76,11,186,118,42,177,121,138,29,13,68,22,39,47,32,78,85,62,50,39,79,33,423,92,87,132,21,17,13,58,48,53,83,67,126,37,89,21,26,83,21,17,13,81,53,9,65,11,72,11,113,54,75,23,13,32,156,34,86,13,18,75,13,61,123,43,55,21,103,17,13,9,11,84,87,11,82,19,42,60,57,69,42,109,103,71,31,21,53,63,17,22,81,17,179,146,13,9,87,11,53,11,76,74,102,46,66,13,99,81,66,13,72,39,50,34,39,41,38,73,37,57,112,57,25,21,17,13,258,9,61,11,55,11,61,38,70,144,13,38,9,11,57,11,66,71,57,9,65,11,126,123,120,92,11,57,80,39,67,33,17,13,24,9,11,106,50,11,62,146,9,11,93,11,57,65,138,9,11,75,11,101,32,60,65,13,23,32,47,94,40,53,46,17,13,80,61,48,81,63,17,13,9,101,11,113,11,121,74,114,59,65,52,13,113,9,11,109,11,199,73,117,13,74,102,52,13,95,93,61,48,63,102,93,38,46,57,96,73,195,109,21,17,13,53,118,9,65,20,13,7,16,24,33,68,62,74,38,62,167,5,7,77,7,118,121,35,62,48,104,43,60,9,45,90,84,132,94,26,45,51,81,189,13,59,45,224,13,49,165,84,91,144,93,55,13,9,71,48,80,142,152,65,24,30,60,31,51,70,38,51,43,169,65,152,134,58,13,50,80,84,27,74,27,50,90,34,189,65,77,21,78,17,13,11,66,174,116,99,9,139,75,141,87,78,9,26,87,81,134,62,17,15,9,66,21,5,82,32,33,187,54,95,70,67,46,52,67,60,43,131,24,26,26,11,31,77,9,5,84,35,125,5,7,63,7,34,44,34,5,7,35,7,46,15,52,127,69,53,63,71,139,158,100,83,142,41,57,117,133,85,97,65,24,5,7,85,7,75,195,5,7,68,81,115,126,7,73,22,52,32,64,84,67,73,76,104,70,110,44,21,41,17,62,75,57,55,103,61,117,48,13,36,62,31,23,33,13,70,78,63,63,46,67,31,13,47,54,68,43,155,13,216,57,41,41,55,9,5,7,106,7,52,70,39,103,105,121,35,83,147,72,41,64,82,21,17,13,55,59,60,9,25,5,7,146,135,7,100,15,70,90,80,54,58,69,63,69,69,72,75,19,13,127,89,105,247,19,9,14,291,9,79,183,9,5,7,98,69,7,80,49,47,63,63,29,118,130,105,152,123,220,54,54,68,80,17,13,9,5,7,48,80,7,55,53,24,9,59,54,59,5,46,97,86,45,5,7,77,7,87,19,78,56,97,19,9,66,19,103,92,52,48,66,95,38,46,57,60,43,65,118,125,21,17,13,9,72,52,55,94,172,102,11,135,152,19,54,92,149,99,11,5,7,50,7,95,15,128,94,11,5,7,64,7,89,23,66,19,9,28,72,55,94,155,102,11,135,135,19,54,92,149,99,11,108,133,111,47,80,10,5,7,75,110,7,94,30,47,9,46,42,45,9,14,63,41,121,13,32,54,50,13,18,43,13,9,5,7,44,7,60,46,54,5,7,44,7,106,88,54,5,7,55,67,7,81,178,5,7,116,147,7,89,43,47,79,112,36,94,13,9,81,121,47,68,9,80,5,7,106,7,63,46,29,90,161,27,44,24,36,79,43,28,39,80,114,107,54,42,132,35,47,45,31,156,147,11,26,34,135,30,66,18,9,31,39,147,23,67,141,41,21,95,35,73,21,17,61,96,15,9,39,47,149,33,70,101,21,38,53,35,84,23,35,13,9,37,45,41,169,34,54,151,17,13,9,16,33,33,126,37,41,51,67,63,10,64,93,9,44,129,9,33,52,39,58,70,13,26,9,38,84,37,146,45,66,130,13,32,9,5,85,19,67,114,30,47,59,198,100,109,41,96,86,135,13,9,22,5,87,21,41,35,65,59,17,13,41,50,13,9,21,5,77,46,54,104,70,67,46,52,67,60,43,140,24,26,26,11,5,93,35,119,5,27,36,126,140,83,190,17,23,23,50,57,36,66,42,49,9,53,66,43,49,39,39,77,75,52,15,36,9,14,47,33,42,84,9,155,5,67,45,147,66,59,139,53,33,30,9,11,54,11,99,11,55,11,62,129,24,114,101,49,31,29,53,100,43,50,55,58,10,51,55,36,10,170,71,35,53,32,36,10,76,111,9,88,111,71,57,9,14,32,9,30,62,45,148,51,30,13,51,9,11,136,118,57,11,107,86,40,42,28,57,84,47,58,45,25,78,63,118,55,144,53,50,21,107,45,17,22,71,50,41,39,17,13,51,106,43,283,9,11,54,98,43,99,113,76,10,118,57,11,109,66,46,50,51,171,75,214,87,36,53,48,54,65,121,137,89,13,87,83,13,112,23,30,60,79,87,89,13,65,108,58,36,40,41,38,48,135,87,98,101,95,17,24,45,62,47,42,18,13,185,9,11,107,149,11,96,26,90,32,27,37,17,54,125,154,17,87,168,162,94,17,75,69,45,58,29,17,127,13,9,11,124,63,95,129,91,145,11,72,73,92,46,67,86,114,13,29,90,13,79,61,48,81,13,28,112,42,125,13,48,9,5,51,82,44,48,48,62,91,69,94,54,109,71,103,64,52,9,5,47,38,113,45,26,206,5,55,84,15,126,99,54,170,37,145,21,33,122,70,80,284,40,130,216,81,10,16,52,33,34,42,54,36,78,45,46,53,52,63,55,57,54,36,50,51,52,72,45,27,10,31,77,9,39,74,9,37,41,9,48,55,9,52,32,33,13,64,48,57,81,15,23,9,5,89,85,16,40,33,34,35,78,83,83,96,82,130,128,98,158,162,156,208,136,50,92,27,10,31,61,9,5,71,20,7,16,201,276,5,89,208,283,5,103,183,291,183,5,53,20,13,7,16,38,68,58,54,9,112,23,17,5,45,7,28,69,98,21,7,41,51,44,32,25,9,88,44,62,25,9,93,101,42,71,86,104,48,56,29,13,123,9,42,60,63,24,9,112,82,36,57,29,13,9,20,5,45,105,51,44,61,71,46,59,58,31,33,32,125,92,109,52,74,47,76,71,127,92,59,88,159,125,11,82,100,96,97,11,133,51,59,157,85,104,98,44,16,84,97,99,158,99,77,85,51,117,75,107,61,113,67,103,117,75,113,55,53,24,10,48,45,9,64,61,9,47,65,29,13,90,9,26,80,44,57,34,40,52,45,52,43,45,44,158,99,43,58,9,62,56,9,63,67,63,29,9,74,68,29,13,57,83,45,9,77,53,59,45,67,60,37,13,60,56,83,75,9,49,42,58,114,57,9,56,73,43,78,45,65,44,17,15,58,9,108,19,148,115,49,37,13,56,62,187,89,129,310,37,93,66,101,41,17,13,60,33,9,128,171,9,49,27,451,61,108,52,119,72,42,67,71,13,37,74,130,112,61,103,50,109,38,60,22,74,39,118,20,67,75,55,84,89,145,56,87,48,59,154,71,89,73,113,57,177,159,141,113,57,195,177,417,25,21,26,246,75,100,65,25,21,66,133,45,127,21,135,74,92,43,21,17,22,150,103,85,69,109,53,157,139,121,109,53,175,157,360,21,17,87,54,84,13,55,73,90,115,57,17,15,35,72,54,32,17,55,33,17,81,81,46,32,17,47,33,17,81,13,9,106,47,42,47,57,55,92,54,85,129,15,9,122,47,35,47,57,43,80,42,69,174,41,58,59,15,9,114,87,23,33,57,9,57,64,9,106,72,59,198,98,90,202,73,144,28,105,112,22,17,22,66,28,37,42,43,22,17,13,215,9,85,110,57,47,55,13,92,53,116,13,36,54,47,41,63,66,49,30,21,41,47,39,41,51,17,13,155,9,63,80,9,135,38,38,59,13,18,40,125,60,70,17,22,79,17,77,60,111,17,13,73,9,68,51,73,46,23,58,34,122,71,91,118,30,106,97,50,92,98,92,21,47,55,41,21,26,72,21,17,13,28,47,96,13,9,93,61,103,75,13,9,66,74,29,78,38,13,18,167,13,9,117,86,34,38,23,13,73,56,110,13,84,99,23,13,73,37,122,71,91,118,30,50,89,35,45,85,25,30,58,96,25,21,47,44,21,26,56,21,17,13,31,49,13,9,50,74,102,34,9,75,110,81,51,85,114,17,121,64,9,103,93,50,30,170,39,13,9,75,66,23,61,25,23,76,95,42,23,133,143,9,52,95,123,9,68,29,29,36,92,51,75,29,62,102,52,130,117,165,17,13,31,9,55,46,100,98,95,56,61,70,13,9,80,157,72,9,118,45,48,80,94,13,18,104,73,33,33,50,88,69,33,17,78,118,84,123,125,68,96,109,17,22,140,37,21,52,109,37,21,131,96,105,106,79,86,36,105,17,13,82,9,65,87,29,13,119,43,45,44,31,9,66,78,67,71,285,218,15,9,40,63,9,94,60,32,13,103,113,9,63,50,96,81,51,85,114,17,41,112,92,61,70,119,110,106,30,125,17,34,9,11,91,52,11,41,66,32,103,46,38,23,13,128,122,158,28,127,57,54,19,13,18,38,13,9,11,85,88,105,11,70,83,53,70,9,5,53,46,19,108,117,5,20,107,15,7,16,25,36,31,40,80,86,80,102,60,47,19,28,54,50,62,36,81,147,20,103,94,110,45,36,14,34,54,59,55,58,183,143,17,13,9,110,20,129,146,41,181,14,9,94,19,98,106,29,13,238,9,48,19,20,44,63,54,62,40,132,14,9,108,108,96,104,141,225,43,33,23,9,73,108,110,109,110,108,22,118,193,9,67,122,63,114,200,9,81,154,62,108,176,94,9,108,118,9,93,114,19,74,36,37,13,111,147,186,9,71,122,153,9,69,135,45,83,24,99,52,199,27,100,34,103,40,134,123,155,92,9,95,116,63,106,238,106,37,104,104,112,31,30,19,36,61,42,13,111,41,140,68,116,34,38,32,35,92,51,123,84,57,110,107,49,17,59,115,56,76,21,90,109,119,118,119,113,116,119,112,94,82,21,17,13,129,150,62,9,112,57,143,79,150,9,91,79,118,105,164,190,80,36,13,144,118,37,36,13,117,138,117,31,36,13,61,35,13,69,71,139,74,99,88,83,101,105,22,32,43,46,76,46,22,39,17,129,113,76,90,22,39,42,47,76,48,47,22,39,17,36,13,56,57,89,156,9,44,26,83,58,28,13,25,9,69,47,37,59,35,89,24,9,77,123,9,77,66,81,13,81,102,15,9,105,19,73,49,159,86,87,193,111,86,34,95,78,169,30,37,13,154,91,150,160,40,71,116,105,102,17,62,99,31,21,116,121,72,80,81,140,38,45,21,19,15,44,162,29,9,77,11,71,84,11,110,19,159,111,24,89,87,46,13,97,24,100,13,31,9,85,73,44,52,79,66,71,135,93,63,15,69,33,49,84,37,62,105,62,153,54,21,19,39,54,100,21,74,17,66,47,64,41,44,14,32,100,50,44,40,26,13,36,73,46,94,68,13,31,9,75,19,276,23,38,13,105,15,35,33,33,20,31,16,15,120,104,35,47,27,54,157,166,27,265,38,27,81,34,27,202,54,54,64,82,75,21,48,17,15,73,39,54,13,9,98,36,73,47,90,59,45,68,69,88,71,69,107,144,65,25,21,103,35,21,17,13,9,25,34,62,70,66,48,129,58,46,141,188,31,39,203,68,25,30,43,77,128,183,25,30,41,65,75,77,120,138,98,25,162,154,98,25,30,17,13,46,168,13,110,54,35,31,135,56,67,76,139,74,73,48,148,23,17,22,42,89,41,133,57,148,41,46,29,25,21,17,13,29,9,137,113,53,33,13,114,219,101,87,55,9,108,59,101,53,33,13,56,28,72,62,46,110,59,64,99,82,76,52,41,21,76,47,29,60,60,110,81,61,22,17,13,25,33,13,85,39,42,35,62,60,30,101,237,102,47,168,25,50,51,25,21,42,58,49,30,21,56,73,55,97,50,99,30,21,17,13,51,33,13,104,85,62,124,90,109,131,207,37,17,13,82,77,81,80,102,108,181,68,27,74,87,43,210,131,200,181,141,143,144,84,146,115,193,40,42,101,45,172,106,25,57,85,25,21,71,95,36,39,83,198,54,90,25,21,93,125,56,112,135,106,25,21,17,60,13,53,67,82,82,66,217,92,17,54,13,9,52,33,23,151,206,89,41,40,48,36,17,13,9,82,65,101,117,15,9,76,108,32,63,130,78,29,37,66,35,39,41,82,24,56,13,9,59,19,220,9,62,59,26,36,39,42,38,96,36,38,40,31,41,38,38,44,41,38,38,44,24,37,13,9,79,90,155,80,9,47,45,9,77,20,13,7,16,45,82,59,93,18,7,113,7,55,95,86,63,98,10,22,105,9,39,38,40,105,57,10,5,59,7,47,7,82,33,43,43,35,74,33,24,9,21,5,37,63,82,6,71,74,31,22,5,7,68,7,42,28,45,74,5,49,7,120,7,56,23,53,84,139,135,37,15,53,32,91,38,17,72,174,37,14,5,61,52,142,26,153,139,79,22,5,61,51,129,5,57,53,136,45,51,23,60,11,53,84,94,15,54,122,24,39,35,18,13,11,5,61,64,33,68,68,5,85,49,100,74,103,9,37,5,75,29,22,108,154,93,118,34,71,51,79,81,47,57,88,172,112,145,5,49,61,272,39,22,86,189,115,60,69,89,91,29,68,49,51,84,72,68,21,83,97,11,27,5,40,34,5,43,40,51,35,92,9,62,66,37,15,9,5,29,43,19,54,102,151,79,30,65,219,175,9,5,35,63,19,46,70,151,9,32,70,142,9,22,5,57,52,15,65,164,29,102,54,125,187,5,47,55,19,65,167,29,74,125,76,200,76,29,80,124,11,5,53,81,19,51,42,136,208,33,161,34,47,72,63,88,70,21,91,63,144,126,21,26,63,129,111,21,26,54,66,74,26,63,59,99,81,26,62,66,82,26,24,49,13,46,196,9,30,45,105,129,133,75,35,129,80,41,47,163,67,122,63,63,93,167,50,60,30,102,102,30,118,233,63,50,54,38,116,99,38,97,162,44,47,159,173,50,47,65,60,20,45,9,5,71,50,64,74,5,7,117,7,156,75,53,79,71,114,87,27,75,90,35,93,83,125,17,13,9,50,40,63,127,93,53,75,46,20,61,54,80,51,15,38,9,28,104,9,16,35,37,10,5,59,172,217,63,79,67,9,42,96,37,69,9,37,5,91,44,74,57,51,89,16,53,90,100,75,78,10,5,41,20,34,51,34,36,49,57,32,74,88,90,41,6,48,197,116,71,35,22,5,47,98,81,73,83,16,74,25,21,56,81,55,86,17,27,34,43,21,30,17,109,14,82,102,33,96,89,91,109,68,64,50,106,104,56,116,60,66,84,10,73,17,53,76,76,76,298,52,85,13,23,30,39,17,13,9,5,77,66,63,85,50,26,59,41,13,125,25,58,13,26,10,5,73,7,112,7,55,141,16,96,63,98,57,142,76,92,86,84,156,60,88,77,86,126,64,94,86,10,5,45,7,112,7,98,51,78,62,78,63,70,106,270,10,22,5,7,28,7,82,37,69,5,7,80,7,54,315,86,105,155,45,47,57,55,20,5,81,7,101,7,67,269,139,35,31,41,51,20,5,107,51,44,104,64,390,49,65,26,5,69,20,7,16,56,40,29,81,27,29,51,21,29,49,45,29,31,29,98,5,47,61,51,94,66,88,57,158,20,5,69,43,215,62,91,59,116,5,59,210,52,72,53,33,64,75,31,45,51,53,15,9,14,59,58,41,78,71,31,45,51,53,15,9,5,57,39,27,117,74,95,107,76,136,92,134,99,111,160,98,183,112,73,58,266,153,32,41,56,54,175,74,103,90,38,61,69,38,9,81,62,118,44,30,38,9,148,92,128,30,29,145,9,27,58,156,9,135,63,35,58,58,26,59,45,13,120,10,72,66,45,69,77,42,37,86,120,179,154,108,129,69,82,49,59,41,65,42,85,97,30,49,130,67,26,30,63,45,17,65,16,231,91,26,30,63,45,17,77,16,197,104,75,29,47,45,44,27,133,31,102,143,26,64,36,60,49,46,50,17,15,36,42,46,13,33,39,43,13,114,44,51,85,61,13,45,79,55,13,34,66,44,13,32,62,27,90,47,50,86,58,19,42,13,33,65,43,13,9,45,34,9,38,76,9,65,94,46,64,53,44,42,142,44,17,13,71,171,228,56,66,116,21,178,62,17,13,18,62,112,17,59,13,67,60,72,56,13,34,9,61,34,46,72,76,34,92,95,46,54,65,77,103,154,105,140,47,98,15,66,29,147,138,45,55,13,54,120,112,73,132,81,168,84,64,65,21,17,64,13,9,45,106,34,36,9,34,134,9,35,79,9,54,55,9,62,63,9,39,40,93,56,66,29,13,63,9,116,60,41,54,33,13,77,123,86,37,37,108,63,68,58,170,25,21,26,118,57,63,25,58,21,17,22,37,155,134,21,26,58,21,17,33,211,17,34,13,45,9,46,60,47,58,77,67,17,22,51,17,13,9,41,60,99,9,90,86,92,39,84,72,51,109,62,129,17,75,57,63,21,72,47,84,21,17,13,9,49,43,137,13,9,58,75,9,70,58,29,72,65,24,9,73,57,86,13,78,107,113,9,56,65,81,40,13,9,106,106,33,42,57,23,13,39,56,13,42,86,9,42,46,63,36,9,45,45,36,70,36,9,49,45,59,28,9,34,34,61,79,52,26,58,76,39,26,65,93,76,26,24,78,41,26,13,55,46,9,50,61,247,238,57,13,33,33,9,37,71,63,47,58,13,30,45,33,51,49,48,133,9,36,265,9,68,60,60,62,72,76,109,106,53,9,55,52,117,25,40,52,93,143,69,251,122,51,52,17,13,69,63,59,71,25,61,47,13,18,133,13,71,37,9,73,44,110,78,88,147,106,37,9,55,19,40,111,24,23,39,42,78,82,92,9,91,152,9,64,66,43,94,65,13,40,33,36,9,72,47,88,13,9,56,117,119,36,152,9,62,128,58,36,150,9,65,66,103,76,63,43,33,36,9,76,77,104,61,56,96,55,78,40,13,9,55,38,200,13,50,79,13,9,59,73,50,66,81,51,114,17,59,58,54,53,61,51,61,45,73,55,73,39,35,19,27,51,75,74,50,44,17,68,9,101,299,23,102,47,40,101,34,148,105,89,27,57,65,87,75,21,26,150,130,35,86,100,21,44,19,77,9,82,35,25,117,82,121,27,78,91,40,194,30,115,290,27,81,74,89,59,122,25,67,129,104,35,66,62,61,69,59,70,72,63,81,47,43,27,35,59,90,89,58,52,25,190,19,13,54,83,59,13,42,300,9,5,47,20,13,7,16,27,36,82,76,11,98,111,108,11,110,11,98,111,110,11,100,86,94,102,94,90,94,103,11,59,11,87,83,52,62,27,9,57,5,67,20,7,16,50,49,25,34,64,11,54,11,70,11,61,52,11,108,88,80,77,99,77,76,52,82,56,21,29,33,50,9,41,5,76,112,5,34,45,5,42,63,5,17,47,55,5,51,17,60,94,5,71,7,119,7,58,38,198,145,33,10,5,65,114,63,134,135,108,88,110,67,20,5,130,51,119,53,20,5,61,138,51,119,70,43,20,5,79,61,24,61,58,64,11,22,5,69,93,5,53,96,110,5,71,107,39,48,58,99,32,76,124,63,152,86,110,154,348,47,278,153,181,14,98,9,59,300,135,148,14,9,149,21,23,41,47,55,78,50,32,29,53,33,47,50,42,40,43,46,42,38,46,48,39,57,89,28,34,73,56,29,41,31,43,49,26,25,56,47,48,56,53,55,54,44,33,43,31,10,21,5,38,87,5,56,68,57,31,24,51,60,28,5,41,31,5,63,62,71,5,69,52,56,20,66,9,23,220,19,40,63,24,106,9,14,110,154,78,9,66,22,5,46,93,5,45,42,42,40,23,32,70,35,24,9,36,99,40,59,75,30,45,23,23,47,41,231,17,23,13,47,56,74,53,87,37,78,78,17,13,41,47,67,9,5,35,64,5,43,125,68,46,126,172,54,28,92,90,93,92,88,96,98,67,26,128,76,61,56,57,21,19,32,15,194,183,189,9,45,5,63,76,55,54,39,30,81,170,36,33,9,108,59,74,98,88,5,33,26,32,9,65,64,63,129,26,59,41,13,119,339,52,60,23,47,51,61,61,49,65,57,10,5,34,25,19,273,47,51,61,61,49,65,66,36,116,164,32,5,50,45,43,5,52,57,50,34,55,9,39,55,9,5,58,49,42,19,45,32,88,27,78,54,136,11,32,61,9,5,31,40,78,92,112,95,57,54,52,51,61,34,5,99,49,16,64,29,37,35,71,80,50,67,54,14,31,52,71,17,66,13,10,5,18,27,68,76,80,50,62,68,104,90,50,38,119,106,20,24,39,54,13,27,33,41,39,75,84,95,41,114,18,52,114,18,45,108,18,69,132,18,68,131,18,62,125,18,83,146,18,59,122,18,82,145,18,106,70,84,114,23,18,119,63,307,21,83,59,75,21,48,41,82,18,26,15,13,27,33,41,39,75,84,64,54,58,69,18,27,14,73,91,62,9,49,50,46,9,50,67,9,34,23,51,36,99,55,58,23,13,38,80,48,101,72,52,58,23,13,69,58,55,110,126,29,202,30,186,51,113,20,64,13,19,9,72,19,37,154,13,18,23,13,9,58,46,382,9,60,171,9,81,19,23,46,53,154,34,32,124,33,96,33,200,176,61,34,39,195,24,38,55,18,13,26,69,74,70,38,69,46,47,95,36,64,54,90,69,21,26,84,45,21,17,62,150,52,126,17,15,100,209,30,9,70,46,62,89,48,60,157,72,13,57,114,13,53,54,30,9,177,19,70,41,172,39,13,30,105,13,57,207,50,50,53,111,33,60,58,15,53,54,38,35,9,68,23,74,36,110,55,58,33,13,38,90,40,50,58,90,66,97,145,43,163,65,181,13,26,50,69,46,47,95,62,150,15,94,142,72,9,87,59,39,31,49,40,30,53,64,30,55,66,30,40,79,30,49,68,30,46,66,30,67,129,46,30,60,148,31,30,43,40,28,44,17,52,13,9,5,45,33,88,24,47,66,57,5,72,44,29,45,29,46,87,94,49,26,9,85,86,51,71,73,42,25,30,36,52,13,70,26,68,56,25,13,71,69,69,78,69,75,13,79,36,182,173,69,75,13,71,63,33,69,105,60,39,38,71,93,21,29,17,86,105,112,17,13,72,101,56,38,71,107,141,17,25,13,70,101,56,29,25,13,90,46,116,9,25,5,46,29,53,43,9,5,46,103,26,29,46,18,25,67,5,55,22,39,51,60,67,13,37,9,46,47,9,65,5,101,134,63,132,29,79,49,86,5,107,30,70,50,20,62,62,46,14,9,5,68,42,44,46,30,40,72,35,46,24,60,67,18,13,25,68,54,52,52,17,13,9,61,86,20,57,14,9,55,90,65,44,47,44,47,34,66,42,21,80,43,55,119,47,51,26,17,66,56,54,50,17,84,119,55,49,26,17,56,54,50,17,84,90,89,49,48,78,129,17,13,9,35,32,35,40,101,84,33,61,70,83,128,77,81,115,29,17,49,75,79,28,68,54,104,22,17,113,72,28,70,53,22,17,93,75,55,96,57,113,33,21,91,106,153,46,58,33,21,91,118,28,74,70,50,22,17,13,9,50,20,58,60,14,9,36,20,62,62,55,14,9,14,34,144,29,36,41,243,37,44,38,142,33,110,15,43,50,9,66,59,85,32,67,64,111,28,74,50,22,17,13,9,44,20,65,62,56,14,9,21,16,116,93,53,55,53,55,54,10,5,62,36,97,9,58,34,25,9,75,54,22,5,108,32,41,30,87,66,56,57,80,41,74,29,17,36,42,85,17,46,105,17,48,13,9,37,5,64,32,148,9,147,47,49,75,105,11,5,115,44,53,19,70,38,19,51,80,48,79,63,25,89,75,25,94,33,74,85,29,95,70,104,70,29,42,60,92,50,78,89,93,65,39,33,38,98,33,38,29,40,77,72,95,74,86,183,61,35,29,34,67,137,75,29,34,21,17,93,22,13,9,5,105,74,24,63,52,31,35,22,95,36,22,32,195,71,37,9,28,46,41,47,64,114,39,36,71,70,5,52,74,24,63,47,64,70,9,55,57,85,40,69,68,39,61,69,25,13,93,32,25,109,80,43,96,62,29,46,40,51,21,26,48,101,21,17,13,9,28,179,9,37,5,62,102,105,63,9,67,51,41,9,34,44,53,27,5,83,46,60,47,5,53,48,71,19,9,51,77,9,113,5,49,57,45,51,48,107,9,46,101,33,38,49,50,75,59,17,23,13,9,28,46,5,69,74,19,93,106,141,5,68,284,19,181,126,15,199,5,78,25,19,274,19,54,51,49,68,41,57,40,174,95,69,79,15,23,109,133,5,69,25,19,192,334,47,11,5,75,64,19,174,335,47,11,5,47,43,19,46,97,34,73,69,30,64,63,22,59,77,36,68,43,74,13,9,5,34,70,80,171,160,158,5,108,113,16,178,72,213,107,69,60,101,14,72,60,72,85,120,14,176,100,205,63,10,5,35,126,5,43,22,55,41,9,129,5,48,19,22,55,41,9,245,5,39,27,78,5,56,36,52,28,48,9,5,59,77,5,52,32,19,35,78,44,28,30,47,59,64,33,90,33,152,9,14,52,51,75,68,87,17,15,33,143,33,190,9,26,105,9,49,69,9,5,7,97,7,50,36,163,9,5,66,153,123,9,30,57,260,61,258,53,199,48,63,273,17,101,22,60,204,65,153,57,200,55,74,100,173,51,137,61,231,53,57,28,57,65,22,20,38,9,5,7,73,7,72,36,64,9,5,20,7,16,15,24,23,41,23,55,23,67,23,59,23,67,23,63,23,73,23,22,31,75,44,60,74,62,15,74,87,15,52,15,106,99,15,82,68,23,44,58,9,41,23,45,58,63,40,28,9,43,23,30,34,31,256,9,37,47,20,15,7,16,17,26,74,179,73,9,53,44,21,28,26,21,28,22,22,24,21,20,34,18,27,21,21,17,26,19,20,20,24,21,18,17,19,25,22,23,26,23,19,21,30,29,21,30,18,27,18,18,19,25,17,17,19,29,18,10,129,150,75,66,82,9,91,51,106,60,9,45,51,106,32,74,13,29,9,45,11,70,78,75,73,129,85,75,11,163,62,87,13,56,47,56,70,54,50,32,17,15,34,40,89,56,94,84,52,61,90,88,15,71,61,13,49,36,169,89,13,94,73,60,165,69,17,15,73,80,54,74,37,106,13,36,39,65,45,53,17,22,48,17,15,126,20,63,26,52,55,81,17,13,63,24,86,59,13,15,99,14,138,91,127,107,15,98,72,82,49,82,29,40,52,52,119,177,120,17,72,78,77,79,90,54,64,27,17,71,80,82,46,73,79,18,82,79,32,78,38,38,65,50,142,111,143,57,80,41,25,43,78,77,75,67,98,92,147,138,23,24,150,79,80,65,132,71,78,122,53,131,66,43,33,21,74,35,123,60,36,106,79,25,30,36,127,25,21,26,59,21,17,76,13,15,105,110,50,77,15,67,75,50,41,105,94,59,19,43,90,17,118,33,28,92,47,17,13,9,51,33,42,72,86,90,102,116,132,105,39,11,98,11,51,89,9,59,79,31,41,13,60,43,13,61,49,13,59,56,13,95,58,39,70,30,108,53,92,21,110,55,95,21,38,17,13,66,64,13,30,9,69,47,114,104,9,89,94,57,29,39,112,41,161,47,118,54,118,62,129,32,74,24,55,13,9,53,20,7,16,23,32,63,49,33,13,76,62,31,54,14,68,40,14,73,92,48,33,14,40,13,35,50,9,47,71,19,35,44,100,106,108,116,83,107,19,40,49,92,90,94,122,28,37,78,92,80,86,19,25,37,46,62,62,113,30,39,111,80,63,98,88,128,92,22,31,39,49,39,68,26,35,43,55,53,67,80,20,29,54,56,56,62,28,37,49,49,49,86,61,16,26,23,55,38,43,47,49,59,59,66,72,78,75,72,79,78,56,55,59,51,40,10,5,67,19,63,30,39,84,84,82,84,92,80,84,94,92,84,87,87,83,93,91,89,77,75,101,95,91,115,75,83,83,92,26,35,44,49,75,47,43,43,55,49,80,23,32,72,70,74,71,23,32,60,100,104,104,128,96,112,71,19,28,66,58,60,58,64,64,70,70,70,70,59,26,35,42,49,56,49,36,54,28,54,25,52,33,63,29,60,27,50,21,50,63,11,40,23,11,53,30,64,11,40,27,11,58,30,69,53,62,66,65,65,11,52,38,11,64,11,40,33,11,78,41,59,41,61,39,69,40,60,69,62,45,45,52,48,53,73,11,51,22,11,60,29,47,97,43,73,52,79,52,80,34,43,47,69,71,75,65,65,63,67,67,71,59,56,58,56,58,60,61,58,58,61,58,58,104,32,41,55,61,55,61,60,57,60,61,49,63,60,58,68,62,77,69,68,78,72,74,87,66,56,105,98,27,36,74,80,74,88,76,86,108,80,68,83,79,77,87,81,95,87,87,95,89,91,103,85,75,121,87,83,20,15,7,16,72,13,72,24,33,62,64,62,72,60,74,46,28,47,101,37,42,47,45,46,55,45,43,39,39,39,47,46,41,39,40,37,41,48,48,39,36,43,98,93,38,44,52,45,47,61,17,84,61,17,22,45,17,43,40,43,51,45,44,45,35,48,38,57,9,27,5,61,43,50,33,49,33,9,46,43,51,43,40,78,31,9,72,67,9,46,53,9,140,31,9,41,32,9,46,37,9,57,112,32,9,48,120,48,9,14,33,9,5,55,62,43,58,47,154,112,5,67,62,31,9,111,5,103,41,99,5,54,24,32,59,81,35,13,47,9,77,5,55,24,32,70,92,35,13,46,9,146,49,124,119,9,21,5,36,66,31,9,28,39,50,36,28,9,35,41,28,38,45,55,90,9,21,5,91,78,86,155,5,55,90,78,86,154,5,53,96,78,86,160,5,65,88,78,86,152,5,49,86,78,86,150,5,45,99,78,86,150,5,71,69,31,5,56,24,5,57,28,5,105,115,39,53,9,110,5,44,70,5,57,53,115,5,75,55,31,117,43,13,49,9,25,5,39,66,62,25,9,54,5,81,42,15,159,5,53,46,15,151,5,61,32,78,5,33,30,15,120,5,29,47,15,123,5,63,48,15,133,5,65,56,15,146,5,81,46,15,126,5,61,48,15,146,5,65,68,35,47,45,46,38,45,43,39,39,45,69,51,63,48,28,39,79,20,29,9,5,105,72,80,95,5,113,37,40,122,97,52,38,9,22,31,24,33,13,32,42,49,47,51,50,43,43,48,52,47,49,32,13,9,5,43,32,28,38,111,45,52,44,43,50,91,48,44,43,48,76,47,58,42,81,41,47,46,56,87,87,45,43,60,46,51,134,47,45,55,44,62,86,98,83,39,55,76,93,84,192,51,43,43,43,43,43,44,65,39,31,59,61,63,38,48,49,47,59,103,51,142,46,82,42,51,142,43,69,30,44,48,21,17,37,95,44,62,102,97,20,40,9,50,35,44,29,44,50,9,5,33,27,28,39,58,28,37,40,100,20,29,9,5,23,56,56,68,54,75,32,5,73,41,57,5,47,50,104,5,65,44,44,5,53,53,42,5,71,55,54,5,53,55,54,5,53,56,72,5,61,69,93,5,59,71,45,39,27,5,67,7,51,7,69,51,83,5,53,45,53,25,9,25,44,48,43,51,48,39,33,39,37,40,40,77,39,60,41,35,32,17,28,42,51,45,77,40,43,59,39,39,39,47,46,45,43,46,41,41,29,63,17,29,63,17,84,51,79,45,71,39,38,72,17,68,47,67,75,50,47,51,48,37,79,42,29,63,17,81,38,41,143,29,40,42,42,42,64,39,133,76,75,63,37,63,44,44,42,43,41,44,83,52,63,46,67,61,40,51,45,45,59,49,62,44,60,49,64,20,28,9,5,6,52,147,7,61,49,30,46,55,28,13,91,80,13,9,21,5,37,44,81,83,81,28,20,29,9,42,59,16,41,22,10,5,43,50,54,5,39,51,92,5,41,39,102,85,106,60,136,82,84,26,5,47,38,53,5,35,51,5,38,54,5,48,42,29,9,42,78,47,95,32,39,9,41,87,75,29,36,9,5,51,42,29,9,45,78,47,77,32,39,9,44,96,81,32,39,9,5,40,25,44,35,33,13,108,11,28,5,75,72,27,34,57,79,5,101,65,25,32,48,47,61,51,50,64,13,9,42,29,9,5,71,32,76,74,23,13,44,49,41,46,13,48,64,49,53,69,54,50,73,67,101,39,31,21,44,17,81,64,17,13,9,25,39,48,53,40,9,5,71,32,42,58,43,52,68,48,55,63,83,35,27,17,58,13,63,46,13,9,25,46,51,40,9,5,57,31,34,38,44,9,39,42,5,51,33,38,100,89,36,10,123,46,127,111,124,98,91,101,148,114,114,120,80,27,32,13,9,43,128,87,46,45,33,13,9,50,49,53,69,53,65,97,31,36,17,13,53,69,51,58,70,90,31,36,17,13,9,54,39,54,39,48,70,70,47,47,35,13,117,48,13,9,40,44,60,44,35,86,86,27,32,13,9,51,43,59,46,53,49,90,31,36,17,13,129,43,37,48,66,13,9,51,93,37,9,44,44,146,42,9,45,48,52,49,53,160,72,27,32,13,9,52,44,122,50,13,44,97,51,13,9,46,81,45,9,43,127,31,9,26,130,50,40,9,34,136,97,52,9,25,31,32,36,34,38,33,37,33,37,38,83,85,89,87,87,88,40,70,17,13,35,43,165,61,13,35,120,44,13,40,40,83,83,66,13,9,20,5,7,101,26,7,49,62,5,67,7,89,7,46,61,5,61,7,59,112,7,60,161,5,57,7,56,107,7,89,168,5,43,75,55,181,5,47,57,147,33,23,35,54,59,112,79,70,75,73,64,33,33,33,120,118,134,129,38,132,126,135,138,132,71,154,39,47,17,127,61,47,141,73,55,25,21,43,17,165,195,47,17,41,15,29,45,13,40,38,40,13,38,10,29,36,44,37,30,54,13,9,45,126,35,98,29,13,36,119,28,13,78,83,89,47,32,17,13,25,9,5,7,65,61,7,67,71,58,95,27,23,40,9,31,5,71,7,93,76,6,46,46,6,7,56,86,79,65,126,35,9,50,5,61,63,28,26,63,85,25,13,80,44,68,84,76,54,107,15,9,5,37,7,68,61,7,80,51,70,22,26,79,25,13,53,112,79,70,75,73,54,90,88,47,21,47,17,41,15,40,40,91,114,135,70,80,43,91,100,60,55,46,128,135,90,21,26,59,43,21,17,13,163,80,78,77,70,135,74,9,5,47,38,60,5,48,38,21,9,49,36,21,9,131,70,5,7,145,7,105,63,36,49,117,124,17,13,62,35,13,9,5,62,99,76,59,45,72,51,65,93,53,28,13,35,54,13,9,21,5,31,7,99,7,66,61,21,25,9,46,24,9,29,94,24,9,47,101,24,9,18,12,20,112,24,9,23,105,24,9,21,5,69,44,72,5,55,61,93,5,47,48,61,34,24,9,129,24,9,136,24,9,21,5,33,55,52,26,104,53,59,62,56,61,60,59,39,17,62,61,36,39,17,22,33,17,13,25,9,85,5,47,79,58,68,50,105,94,92,36,119,9,115,95,81,72,35,13,9,35,40,22,81,29,33,13,30,51,52,33,17,42,13,48,42,13,9,5,63,77,65,57,21,5,45,73,67,73,99,78,5,71,79,53,48,108,9,118,150,5,67,85,64,122,117,102,29,9,28,79,73,93,110,116,40,31,23,33,44,77,81,76,85,21,58,41,51,123,21,46,26,69,49,26,58,49,26,47,46,26,46,96,63,99,31,41,26,46,96,63,99,31,41,26,48,96,63,101,31,41,26,53,41,37,26,53,32,41,44,44,43,43,43,32,45,45,44,39,39,44,41,26,24,47,30,21,44,37,13,73,9,25,5,67,7,80,6,82,74,7,65,125,5,33,50,61,52,5,37,43,85,62,92,5,51,69,24,42,77,27,36,63,39,67,35,61,78,55,39,59,35,57,42,63,47,57,53,57,68,5,43,55,94,38,9,130,39,9,25,5,79,30,99,5,29,65,43,57,48,24,9,21,5,99,34,85,5,37,66,50,129,5,57,44,23,41,42,44,28,9,21,5,57,44,39,73,22,5,51,70,61,62,28,42,66,44,74,28,13,30,43,64,51,28,13,27,47,17,50,154,28,13,9,21,5,109,57,92,5,51,60,93,5,57,82,85,134,5,62,26,29,36,40,56,80,20,60,9,5,77,64,98,5,55,63,32,29,83,5,95,56,67,5,57,45,65,5,57,44,68,5,57,70,75,5,73,46,48,5,43,23,29,33,32,33,30,31,31,31,30,32,32,34,32,32,30,30,35,32,33,6,34,50,5,37,39,51,5,47,51,89,5,71,83,51,118,5,55,32,22,32,40,50,10,5,41,36,49,5,41,39,24,41,26,9,22,5,35,35,76,5,39,44,59,118,97,101,5,57,46,201,5,55,48,170,5,59,64,129,5,75,65,74,67,16,85,84,56,90,97,86,177,98,59,119,133,124,91,10,5,81,60,180,5,71,99,156,5,53,100,50,34,62,167,134,36,5,31,55,88,5,45,24,33,66,66,74,57,90,5,61,58,84,94,9,14,69,60,127,119,9,5,47,41,21,44,44,53,9,5,55,42,57,90,5,49,49,61,38,9,69,53,92,11,5,63,42,92,50,125,79,5,53,72,53,63,51,41,5,93,75,77,99,5,81,52,18,29,29,93,28,13,31,9,5,49,49,72,50,5,39,99,5,35,76,62,131,93,142,47,91,9,109,107,55,128,43,119,92,97,134,17,22,82,79,17,13,9,14,82,37,91,13,18,95,13,9,5,37,71,49,83,5,71,35,74,5,39,39,83,5,47,7,110,55,109,7,45,20,52,52,55,33,38,21,17,13,9,25,5,37,59,49,59,29,13,9,20,5,51,17,34,14,58,101,60,149,11,5,81,51,37,159,25,22,19,19,22,102,16,39,98,89,91,92,21,96,17,36,14,104,106,112,118,100,116,112,110,110,37,33,32,39,48,50,49,47,59,65,62,40,54,54,54,31,55,49,57,58,10,32,47,23,28,62,35,50,97,17,34,13,9,40,47,23,26,34,55,9,44,47,23,26,34,56,9,30,47,23,24,47,29,9,32,30,29,23,23,9,5,39,58,42,37,43,145,13,41,61,48,61,48,61,43,63,42,61,39,58,43,62,39,57,42,59,42,59,51,66,47,58,44,58,49,9,5,31,38,68,5,33,26,64,5,29,32,85,5,33,36,89,5,41,33,86,5,35,38,73,5,45,37,72,5,43,38,42,33,28,32,5,45,29,64,5,27,38,69,5,45,42,77,5,53,33,68,5,35,41,16,23,78,21,66,57,14,10,5,35,29,64,5,27,44,15,50,51,30,57,25,26,52,9,14,114,52,80,47,220,23,53,25,51,13,18,105,13,9,34,21,5,39,36,37,21,28,21,25,18,33,32,27,32,27,16,26,25,9,17,5,40,7,27,7,64,15,115,90,35,5,65,30,69,5,37,51,13,49,52,9,17,38,9,5,45,81,55,52,163,11,5,47,94,55,52,135,11,5,51,91,55,178,52,116,11,5,57,54,127,5,69,44,96,71,97,5,37,47,26,81,57,35,13,18,51,13,9,20,5,41,40,63,5,36,58,5,49,61,5,45,64,64,26,9,24,5,77,68,87,26,9,28,5,85,7,78,6,94,77,7,59,63,64,36,52,21,5,57,88,38,20,44,9,14,69,9,36,52,21,5,89,63,35,118,38,36,127,75,110,31,98,125,140,47,50,9,88,90,27,35,23,5,61,63,154,5,59,90,174,5,91,7,74,7,53,36,37,5,75,7,61,7,42,82,5,53,7,62,7,43,86,5,55,51,52,35,52,68,9,14,78,9,65,5,35,46,40,34,43,57,28,9,21,5,60,36,35,18,59,5,34,69,5,50,32,79,58,9,24,5,37,7,93,92,37,7,81,22,25,70,89,57,94,47,65,61,35,57,72,46,39,21,17,54,13,9,86,44,38,23,5,45,103,183,5,49,104,185,5,51,7,132,138,114,67,92,7,113,184,5,69,98,48,58,36,25,37,25,13,18,36,25,13,143,10,5,46,40,21,53,45,23,45,23,45,41,5,19,43,105,55,100,5,43,57,33,30,41,57,46,100,65,78,54,13,38,97,20,55,9,5,65,51,106,74,42,143,5,21,43,23,50,44,55,49,28,20,29,9,5,55,46,28,40,56,46,52,28,20,29,9,5,61,38,74,5,45,51,78,5,41,40,75,47,36,77,86,66,192,41,14,55,64,63,77,11,50,5,57,64,47,52,48,51,50,5,72,53,45,51,45,46,5,70,52,5,57,51,53,45,51,48,49,48,51,53,54,51,57,51,60,51,5,83,226,51,54,70,25,9,69,70,29,13,9,80,66,59,29,13,9,82,66,61,29,13,9,68,25,9,53,50,24,9,94,65,72,24,9,85,100,37,5,63,76,39,30,13,61,11,84,5,55,49,30,33,37,58,66,62,121,36,17,22,39,17,13,78,62,121,36,17,79,122,152,79,94,58,43,21,17,13,75,28,13,48,11,86,93,59,24,9,82,75,5,55,53,85,5,45,73,116,5,43,40,66,5,37,45,107,5,47,37,13,24,9,20,29,9,5,47,51,22,55,41,9,96,5,53,68,23,73,45,28,13,78,57,46,13,11,21,5,43,47,24,68,44,28,119,30,41,13,11,27,5,41,59,31,22,9,30,88,80,55,76,27,44,17,13,11,28,5,67,52,29,29,9,109,58,50,22,22,101,47,48,36,29,17,49,55,78,17,42,13,9,32,54,60,70,62,10,140,55,17,48,65,107,79,51,55,44,35,21,17,13,9,5,53,73,223,32,184,67,68,95,53,107,32,17,13,25,9,92,73,28,13,84,141,65,28,13,81,74,28,13,81,82,9,87,39,28,13,124,35,28,13,74,9,60,90,28,13,93,28,13,74,9,66,99,98,95,42,98,56,76,17,42,32,17,13,25,9,105,71,33,13,177,29,33,13,76,72,83,61,13,9,60,113,30,52,75,13,33,9,5,69,33,13,36,9,20,29,9,5,50,58,31,57,11,5,57,51,82,5,49,51,114,5,59,65,48,102,25,58,155,65,9,5,53,68,15,132,24,27,9,120,20,9,24,39,22,96,56,22,13,64,40,13,20,9,22,5,59,19,41,75,115,5,55,19,62,63,100,95,37,65,97,30,13,107,11,26,5,69,60,72,130,5,35,7,136,7,40,80,5,33,62,47,82,32,39,146,144,45,36,47,9,27,5,61,80,47,121,66,126,9,27,5,59,47,165,5,62,244,5,44,15,147,121,61,44,46,146,33,5,7,83,95,6,67,6,12,19,60,6,24,58,10,6,69,74,85,7,61,41,58,25,9,48,77,29,9,20,5,43,41,49,5,51,47,52,5,49,50,53,65,89,25,9,110,105,5,55,44,91,5,57,62,78,61,57,13,11,129,5,75,47,93,5,39,39,31,90,48,5,47,7,115,7,62,33,126,168,151,5,73,17,20,13,7,16,19,28,54,58,62,60,59,19,28,54,58,68,50,59,49,29,45,35,11,54,66,71,10,71,65,68,29,11,36,29,21,100,62,32,35,32,45,14,133,57,34,53,17,32,33,94,47,233,185,115,87,109,61,125,93,79,33,29,34,75,29,25,21,17,63,99,117,105,109,76,105,110,40,98,67,92,78,93,67,40,59,96,114,57,60,136,27,51,43,65,43,43,112,45,43,46,57,41,53,19,14,48,55,27,49,103,14,82,55,27,57,113,96,61,71,150,46,77,25,21,19,14,41,32,14,92,89,71,33,17,82,126,137,136,126,113,107,111,87,34,32,17,54,29,14,10,35,97,9,21,44,49,28,173,104,53,24,41,53,51,43,45,57,18,13,44,57,61,111,65,65,113,67,269,52,20,31,43,47,39,41,53,14,9,72,52,125,9,32,64,68,77,84,9,41,139,9,82,105,29,13,43,43,56,152,135,135,122,44,17,14,91,47,57,48,41,13,24,9,77,53,28,74,119,9,5,67,135,15,24,25,161,120,49,9,94,176,137,53,55,89,75,48,98,11,32,135,180,36,9,33,5,43,7,102,63,7,92,104,168,108,48,81,112,5,30,54,39,29,9,48,5,52,41,62,58,51,33,25,9,65,75,51,5,88,34,57,9,14,97,9,5,90,19,174,156,33,39,210,168,9,5,77,65,82,33,56,54,13,9,97,50,60,75,13,9,5,80,31,35,90,89,30,104,141,63,174,11,55,110,25,9,141,59,28,154,42,135,43,51,95,101,80,81,245,13,93,189,134,17,15,11,143,21,5,43,79,73,22,29,71,80,82,5,59,50,156,5,64,77,42,78,103,26,74,5,82,75,24,77,58,31,67,56,75,44,97,64,106,70,85,13,9,68,73,86,9,125,5,46,99,19,53,152,13,57,132,81,13,11,5,20,7,16,88,33,78,87,133,9,85,100,94,40,53,103,99,107,107,102,111,49,75,40,28,14,84,55,14,110,41,44,14,79,78,35,105,33,39,31,58,13,34,46,27,102,98,14,30,14,101,102,100,102,87,14,97,101,100,33,14,98,95,44,38,16,39,42,34,47,17,47,107,41,104,46,47,21,17,55,36,32,45,51,132,70,25,30,48,73,102,85,48,25,30,51,52,100,58,48,25,30,46,49,49,50,49,82,104,102,71,56,25,30,47,50,30,49,75,101,55,54,25,30,50,75,101,55,91,83,98,111,70,56,33,38,128,33,29,34,136,52,29,25,30,28,51,34,25,71,56,25,132,100,99,100,86,56,25,17,13,68,9,140,5,43,88,101,98,46,45,28,31,31,30,42,30,31,33,33,35,33,30,30,73,72,24,42,80,46,37,55,57,39,101,37,17,97,47,37,146,13,48,70,95,20,54,52,41,21,36,51,66,68,82,32,156,21,17,122,9,5,84,52,81,19,9,40,94,98,28,9,33,25,90,45,64,9,5,68,25,42,24,51,33,40,36,74,31,57,45,107,17,13,92,39,9,53,35,97,9,83,5,42,23,63,63,76,76,65,75,69,72,36,36,35,40,37,44,40,30,40,48,20,76,9,5,94,44,52,61,112,24,9,27,38,38,46,41,105,20,116,9,5,46,57,94,10,60,97,27,52,44,52,43,50,42,64,41,48,61,56,58,30,38,20,54,9,5,53,24,40,37,39,36,37,48,54,65,40,43,46,49,45,37,37,44,49,50,55,41,37,35,50,38,41,47,43,54,60,71,42,43,46,43,45,38,37,48,44,56,54,28,20,29,9,5,58,24,36,37,37,43,40,42,28,20,29,9,5,35,34,35,9,105,36,9,91,40,9,24,40,46,39,46,40,45,51,56,46,48,49,39,42,39,42,37,20,54,49,17,42,9,5,19,110,149,5,63,74,95,93,91,94,91,20,10,96,96,40,23,45,44,48,47,43,46,41,65,9,5,19,117,23,51,70,91,23,13,77,85,84,61,110,67,106,27,87,17,13,34,11,62,55,37,101,30,31,29,9,5,77,65,38,68,29,9,42,38,9,42,37,9,50,42,9,45,48,52,90,158,9,47,96,9,52,149,9,14,29,9,5,92,41,68,122,11,5,46,23,65,74,65,78,77,68,76,74,56,78,73,70,85,76,98,86,85,99,90,93,112,82,67,139,87,9,5,61,64,42,24,51,25,68,75,15,9,22,5,19,79,118,5,65,19,86,35,37,49,129,136,24,35,63,58,31,32,30,9,63,48,26,55,82,67,33,17,48,53,40,87,41,33,17,31,47,50,65,33,57,56,102,67,91,94,89,54,33,54,51,56,95,56,86,78,37,25,98,101,88,68,30,47,64,30,28,51,17,13,9,61,58,94,29,107,81,114,72,73,27,17,13,64,66,27,17,13,47,43,9,49,62,9,51,43,37,34,78,37,96,90,42,61,21,80,135,42,55,39,57,44,60,156,34,56,43,153,34,56,57,42,66,34,55,43,313,34,56,66,34,52,63,42,66,34,52,52,66,34,54,63,42,131,34,51,121,34,56,58,57,34,21,58,93,21,63,79,21,17,13,41,60,13,19,52,38,62,106,39,17,41,72,55,49,17,39,62,106,39,17,13,9,62,99,124,78,60,62,25,29,13,77,82,78,41,54,64,29,13,28,58,35,80,35,101,35,36,30,26,62,33,26,17,91,43,68,41,17,106,47,42,81,51,17,88,47,42,81,51,17,125,47,13,35,32,57,13,27,85,39,13,36,28,49,13,24,9,47,76,35,38,13,9,62,87,75,18,43,57,26,17,13,66,47,61,44,13,9,46,58,56,56,52,23,61,13,9,11,102,110,11,40,35,28,13,41,28,13,72,109,29,13,117,51,45,33,87,27,69,17,13,24,9,51,56,49,57,55,21,26,49,57,56,21,26,53,57,62,21,26,44,54,53,21,26,13,29,9,91,90,42,54,42,39,13,98,29,98,101,86,83,48,17,13,46,28,46,61,83,76,76,66,69,52,25,21,69,74,75,74,48,21,17,44,13,60,46,13,59,46,13,60,143,13,71,86,45,13,59,102,45,13,54,40,13,57,28,48,56,62,58,29,35,53,62,66,29,35,60,62,62,29,35,55,62,57,29,35,57,62,59,29,35,49,62,109,29,35,21,64,47,21,17,42,13,9,42,27,23,13,79,111,84,94,39,50,56,46,21,17,13,9,5,79,20,16,7,16,19,28,18,27,36,45,90,96,100,26,35,60,58,68,68,76,58,68,66,70,66,67,63,70,30,39,80,70,68,74,86,68,82,61,95,118,72,50,32,59,33,76,56,23,17,30,13,74,102,24,91,48,18,13,88,86,38,71,145,18,44,91,17,36,13,93,59,41,38,40,57,56,60,59,55,58,53,77,21,128,31,21,56,84,44,21,51,45,21,137,75,37,69,78,29,98,56,52,50,162,91,79,37,33,70,120,63,33,87,67,43,86,82,70,75,37,70,74,37,101,153,81,41,37,146,74,37,99,83,37,33,171,79,33,70,29,25,21,49,52,17,34,13,54,46,45,41,17,50,40,17,58,40,17,54,49,49,21,17,62,49,17,100,56,65,17,74,13,67,45,116,69,33,57,105,26,132,49,25,196,102,25,21,17,31,13,59,48,65,17,53,145,17,58,96,17,29,13,63,30,69,56,21,26,53,21,17,13,43,41,125,13,57,74,39,17,91,13,71,164,13,58,66,57,66,65,58,59,60,63,67,66,61,58,58,64,68,63,65,65,73,15,64,59,20,15,7,16,20,29,30,39,128,68,105,70,17,72,79,41,158,136,17,13,88,134,47,37,17,106,42,39,72,46,61,224,94,210,21,41,86,45,57,56,76,95,31,209,21,28,64,17,13,154,75,37,141,142,13,100,121,42,41,104,160,21,46,106,142,21,39,218,28,64,17,13,62,143,204,65,97,182,19,161,13,60,36,77,71,79,75,71,75,81,75,75,81,75,75,155,57,28,63,17,13,44,53,96,106,96,82,133,60,38,49,75,51,59,66,130,51,174,33,49,29,61,66,55,56,56,41,77,107,85,53,33,123,54,181,55,82,53,33,118,193,101,29,36,49,25,21,54,98,93,59,58,37,62,65,37,30,67,41,65,39,104,25,52,61,112,78,76,49,51,32,40,59,117,25,41,21,50,49,87,122,103,63,59,141,25,87,53,53,59,93,78,74,78,75,72,173,28,52,17,47,81,77,156,17,13,46,36,53,65,59,71,28,36,17,13,78,67,142,19,13,86,44,43,36,110,73,125,31,96,89,64,19,95,13,67,32,45,195,65,18,13,97,88,36,37,110,142,24,45,37,75,18,13,59,67,26,41,47,124,147,13,57,72,13,44,95,13,66,73,106,48,81,251,19,13,132,202,13,138,66,49,70,152,155,131,54,119,163,17,13,84,102,160,13,146,95,47,190,17,22,135,17,13,81,76,107,103,31,13,15,108,67,15,102,77,190,130,92,156,37,119,269,13,162,85,103,118,188,13,40,49,92,92,128,74,15,140,15,112,101,55,45,34,17,57,19,112,70,19,66,61,17,38,59,17,73,193,72,134,103,64,34,60,125,28,23,107,137,22,57,23,80,82,51,62,120,37,25,51,132,248,97,96,25,271,110,75,25,30,73,96,25,21,66,95,23,17,61,76,34,100,58,92,57,72,25,21,17,47,78,38,73,66,60,95,80,113,43,119,25,21,17,30,13,114,41,53,33,47,35,72,133,97,80,29,26,162,102,59,25,21,17,13,15,104,62,123,81,122,15,122,27,85,32,76,30,91,90,136,32,124,21,17,71,132,45,132,17,128,105,162,88,44,58,61,103,51,143,29,26,124,52,48,25,21,39,141,37,121,117,81,54,110,57,37,135,33,44,72,33,50,172,33,29,25,30,89,92,79,155,33,31,25,21,17,30,13,53,147,13,108,46,97,101,17,64,81,132,112,19,52,99,17,13,98,42,37,17,57,66,37,17,129,88,69,155,135,62,156,126,177,71,116,104,145,115,109,69,68,158,70,58,143,19,171,56,82,19,90,52,109,100,17,13,56,129,13,60,80,13,88,62,122,138,109,108,25,54,107,166,17,46,13,101,72,91,166,29,37,17,70,73,29,37,17,78,70,188,179,42,89,13,126,27,55,66,40,136,90,47,62,17,126,97,42,66,21,17,22,96,104,49,112,70,21,17,30,73,64,31,104,55,90,86,37,62,57,144,60,29,25,30,94,147,66,162,29,25,21,17,13,76,55,41,32,100,45,109,74,142,66,57,42,37,55,101,49,29,25,21,17,30,13,81,68,122,58,70,50,165,13,103,51,86,101,68,100,17,29,13,15,110,112,31,40,14,44,14,22,14,45,15,116,124,46,74,13,15,22,27,28,15,50,110,115,13,102,62,20,15,7,16,20,29,34,57,70,78,73,56,21,30,56,48,46,64,53,49,53,53,66,58,56,74,63,59,63,75,23,32,97,81,77,113,91,83,91,40,93,81,61,80,44,11,77,76,74,79,10,76,74,73,39,11,29,38,66,63,76,75,110,65,99,33,42,84,92,80,82,85,97,95,108,104,64,43,54,9,47,58,9,41,62,9,49,73,9,51,76,9,52,108,9,42,53,9,49,55,9,48,70,9,37,46,84,82,116,124,132,124,118,100,98,84,72,26,35,70,68,62,50,131,27,39,106,48,33,34,43,38,130,148,274,179,138,26,66,42,134,35,39,21,36,17,186,206,96,180,32,138,51,17,121,76,56,40,17,30,13,9,166,19,86,164,33,13,43,64,120,147,17,33,13,86,68,63,191,158,182,45,50,17,13,18,139,13,181,36,41,13,84,165,74,13,201,34,33,13,42,34,161,100,153,21,36,42,116,86,38,106,82,48,110,38,132,24,64,13,9,72,118,113,113,115,117,115,89,72,23,105,45,97,13,218,67,134,13,45,115,41,13,26,9,54,88,9,123,47,34,33,65,88,127,74,88,120,77,37,21,88,73,41,21,145,81,142,32,37,143,96,71,72,66,83,33,19,57,62,17,31,15,50,36,9,47,126,9,52,20,48,46,45,53,14,9,82,20,42,42,65,41,14,9,106,20,39,99,65,14,9,66,40,71,102,13,9,55,89,161,9,144,1061,57,79,86,37,42,17,13,49,63,84,428,128,13,18,120,37,17,66,428,13,50,92,164,46,63,115,21,17,13,86,104,42,57,111,17,13,83,45,160,13,20,53,116,75,65,78,32,14,9,63,109,9,47,27,55,40,44,32,24,33,13,9,67,75,79,36,53,36,45,51,45,60,37,28,38,17,15,36,129,132,31,45,79,106,122,76,31,82,81,132,124,78,61,86,91,29,41,53,45,56,18,171,13,19,9,93,70,75,39,27,17,67,90,46,46,39,54,42,65,49,49,17,15,9,77,89,108,9,84,184,9,368,23,27,89,21,26,53,30,26,55,77,97,53,55,133,81,13,118,166,83,167,84,57,17,103,103,27,37,17,102,126,93,13,35,45,38,57,60,94,17,13,79,45,38,100,35,121,36,17,97,179,137,13,49,70,43,231,97,17,13,107,33,13,72,63,56,64,41,225,103,37,65,17,13,209,87,83,113,70,60,152,227,68,128,41,21,26,57,43,21,17,34,80,37,17,13,92,33,13,75,59,50,13,90,94,97,89,80,97,60,20,27,84,88,35,31,56,117,39,49,45,37,84,81,27,14,9,64,38,42,29,13,60,54,50,17,22,17,14,51,14,22,18,14,40,61,69,14,31,24,27,14,69,62,14,52,44,39,49,61,60,66,39,52,58,9,136,81,40,44,13,26,34,51,54,48,37,39,39,45,113,15,99,68,21,64,33,91,105,121,66,81,85,13,18,72,13,41,63,117,83,99,109,104,37,151,96,51,74,36,98,27,106,29,53,33,60,17,43,119,62,17,52,46,95,39,77,21,100,73,85,99,95,17,89,43,51,41,98,52,36,43,164,71,79,26,22,104,79,85,130,45,108,23,92,17,77,167,17,13,94,9,52,41,27,14,28,14,22,33,14,62,58,64,14,22,37,14,62,58,43,79,78,14,60,59,13,64,80,13,29,9,39,38,33,13,115,48,13,29,9,55,97,71,741,20,51,14,66,65,31,68,40,13,9,54,107,82,49,36,50,60,57,46,61,18,36,13,34,46,50,42,106,81,14,34,9,92,78,63,54,38,50,48,58,47,44,47,53,57,18,38,13,36,37,44,48,43,40,43,49,53,14,36,9,156,27,66,196,98,71,91,34,84,116,340,111,123,135,50,33,250,239,234,281,13,9,67,37,28,13,59,9,92,59,140,9,46,41,64,13,49,46,13,101,53,13,107,54,13,9,421,19,39,71,70,55,35,141,131,140,39,54,40,132,121,161,29,17,99,223,131,376,29,29,17,112,230,60,100,13,106,71,70,32,20,67,73,14,73,44,49,90,65,36,21,71,52,97,37,21,88,93,90,91,68,73,69,101,60,64,103,114,116,37,21,86,143,86,67,21,45,86,88,21,17,84,57,13,9,86,53,61,33,130,13,9,53,29,39,31,29,49,26,17,53,50,45,48,38,39,57,54,63,27,21,17,41,13,27,9,113,31,119,33,139,28,39,50,83,55,53,48,50,50,22,17,13,63,234,34,40,13,55,68,13,429,140,38,61,60,94,87,32,70,58,179,210,226,32,35,9,142,55,63,82,75,68,197,13,56,130,44,33,59,43,50,83,46,79,56,89,46,212,32,65,21,17,32,225,298,168,17,33,59,242,17,28,98,198,24,59,13,9,74,57,101,9,137,93,150,125,185,9,88,125,211,9,70,221,83,119,63,106,17,13,65,172,34,164,28,49,39,49,133,31,22,17,13,48,161,119,81,13,89,76,13,137,51,109,196,424,141,96,9,107,124,80,9,72,31,40,72,88,80,100,80,60,27,36,106,68,84,76,68,64,93,83,79,140,49,84,147,75,32,15,9,82,46,41,41,82,42,42,59,99,56,74,52,84,32,45,21,42,61,42,73,92,45,195,24,118,36,83,167,160,85,68,69,13,9,79,154,22,39,147,9,41,19,153,9,143,55,39,93,170,85,35,83,85,53,41,32,61,83,109,59,62,21,26,105,111,30,39,26,32,34,32,26,32,35,32,26,32,43,32,97,98,62,25,21,17,81,53,57,72,26,85,62,21,138,83,44,67,91,82,83,102,25,21,175,78,21,17,52,107,110,138,37,17,13,35,125,115,98,65,53,51,86,62,89,42,36,40,37,45,41,43,41,48,37,76,46,48,31,95,92,66,76,32,51,120,77,26,21,111,17,165,137,133,139,98,85,17,74,85,108,41,118,36,17,49,113,75,91,42,64,61,70,115,77,90,68,69,111,125,54,64,44,49,29,34,53,47,34,57,47,34,50,42,34,52,68,121,34,32,108,84,45,21,17,95,60,138,91,87,46,47,21,35,59,52,59,148,60,33,38,53,99,60,33,38,25,21,42,57,76,58,56,29,34,56,72,38,29,40,61,50,57,59,79,56,56,29,34,53,58,124,133,63,29,34,52,143,71,63,63,38,29,57,58,60,42,57,67,154,147,74,62,103,73,37,29,34,21,17,13,47,46,53,49,74,29,43,43,51,60,95,139,15,55,45,13,40,74,105,38,48,46,13,42,80,73,32,42,17,48,46,13,18,99,97,80,45,41,106,36,17,13,89,118,230,144,20,35,33,47,51,65,65,35,47,35,61,61,45,43,51,75,61,55,65,51,59,67,14,51,35,53,52,50,48,51,36,28,37,17,13,51,54,56,79,68,65,55,55,96,103,99,78,40,55,71,33,67,82,61,89,120,167,141,63,133,241,60,123,127,96,120,75,68,65,33,29,156,50,54,199,116,62,60,81,64,103,90,73,70,69,41,37,33,118,29,35,25,21,17,38,146,142,107,84,88,50,48,69,52,91,78,61,58,57,29,25,21,106,17,13,78,70,80,51,17,93,38,95,96,99,95,94,205,17,22,95,44,108,98,25,21,17,82,81,38,106,48,119,101,29,25,21,17,13,80,23,90,94,84,178,43,139,99,131,123,124,51,60,72,44,71,151,131,25,30,219,100,62,61,61,63,66,104,99,50,46,102,63,59,75,75,55,69,34,70,29,25,21,76,52,50,45,21,17,22,48,46,41,17,52,51,106,21,17,54,71,103,127,25,53,96,25,21,17,64,79,17,13,46,41,125,13,44,85,58,54,68,64,52,57,51,65,50,13,52,76,44,44,46,57,47,57,70,39,13,51,76,81,103,31,44,130,207,46,52,48,39,13,54,42,44,47,37,39,13,45,138,57,48,78,53,131,17,91,88,103,82,18,105,76,18,33,18,91,59,18,88,100,108,99,93,18,33,18,58,88,68,50,71,46,29,103,61,159,114,108,99,58,44,65,115,99,21,94,147,55,113,62,25,21,17,125,110,104,95,120,48,95,49,107,25,21,17,37,41,98,55,47,17,13,53,85,41,32,117,49,33,70,68,33,74,93,32,107,86,32,86,58,13,48,41,46,54,49,41,36,28,57,17,13,45,51,104,68,97,60,73,13,64,38,70,124,130,13,63,35,62,48,49,82,77,69,79,66,50,81,49,73,52,76,81,53,74,21,17,29,13,90,43,27,52,27,200,63,91,27,17,64,91,43,90,86,104,27,130,99,148,133,148,55,96,116,41,92,41,112,41,107,41,106,65,99,41,43,40,92,87,151,35,25,86,49,35,25,124,100,196,88,130,54,93,61,51,55,143,64,61,66,76,27,23,81,19,55,101,38,80,173,41,25,48,153,35,21,249,17,13,59,54,85,103,27,17,63,132,37,13,15,81,77,15,71,41,89,41,17,29,13,60,43,92,73,58,48,53,102,30,13,48,61,32,17,93,49,59,71,77,57,163,37,21,83,36,75,49,78,84,21,147,120,21,17,29,13,58,35,70,65,98,40,49,96,181,95,99,103,108,114,53,93,97,93,108,177,55,97,100,140,65,71,65,40,47,100,53,99,111,50,103,95,51,98,53,101,52,113,122,52,108,21,68,36,21,17,29,13,83,76,55,69,97,235,133,13,79,74,37,44,130,80,112,43,44,93,93,99,62,112,143,67,47,39,13,15,105,78,14,86,15,58,92,41,44,99,67,32,36,85,111,76,57,89,48,25,60,48,21,114,104,104,91,136,69,51,63,50,64,52,25,21,17,22,97,95,52,92,60,87,85,87,61,150,94,170,86,70,97,25,152,154,25,21,37,97,45,48,121,160,27,71,21,17,60,64,132,17,46,39,13,15,94,103,14,51,61,14,26,14,33,14,78,15,68,34,44,80,198,149,43,44,63,71,57,17,78,179,39,51,115,17,111,45,51,40,17,52,48,97,203,145,59,38,83,50,17,39,13,15,72,14,30,14,96,97,53,15,64,23,143,72,32,36,44,17,116,46,48,119,31,41,161,96,21,19,39,13,15,78,78,15,57,120,26,44,77,52,57,47,94,107,117,42,43,132,140,123,105,53,39,100,34,38,100,34,40,105,34,21,17,69,65,17,53,69,105,204,89,79,76,180,74,23,132,17,39,13,15,97,104,15,72,35,53,48,70,72,108,46,29,34,52,136,49,121,73,21,17,33,13,61,118,97,13,15,81,104,15,77,35,53,48,53,49,118,32,81,53,29,21,17,33,13,78,35,31,90,51,42,25,89,40,25,38,37,23,50,17,13,63,35,53,48,86,57,49,49,64,53,52,58,141,86,134,129,46,33,46,29,78,79,61,69,86,60,29,34,95,89,66,52,137,79,61,69,86,60,29,34,54,41,74,97,79,61,69,86,107,67,29,89,79,61,69,86,60,29,34,21,17,33,13,15,126,15,73,49,53,44,45,86,88,81,98,82,104,97,102,43,51,54,58,79,43,95,45,96,51,95,49,78,80,49,94,48,97,101,102,100,70,49,118,49,76,116,49,50,52,121,45,82,79,77,46,46,74,45,79,59,59,48,41,25,30,47,46,52,50,46,49,46,47,48,36,47,47,80,48,118,17,100,58,128,33,17,69,76,69,71,74,57,87,63,37,21,17,94,55,51,47,47,50,46,50,52,46,50,52,49,49,46,36,48,77,17,98,74,93,141,61,17,116,110,46,53,66,56,55,127,99,65,21,71,71,119,80,73,36,21,17,57,77,62,159,85,130,13,86,68,66,95,13,60,85,13,58,67,58,64,17,29,13,72,77,89,13,15,79,14,139,95,15,88,51,51,17,69,55,108,50,69,66,75,62,65,59,59,64,33,21,97,52,33,21,46,51,99,21,72,70,74,70,25,21,26,67,93,72,62,137,21,53,62,21,17,135,114,39,13,107,56,73,95,57,33,60,77,23,17,13,73,52,46,27,60,57,154,21,19,13,103,128,67,27,17,132,79,93,130,21,17,13,15,69,14,115,15,109,55,108,50,69,67,65,59,59,33,21,97,52,33,21,104,70,33,21,79,100,33,21,85,39,62,21,17,69,82,56,104,141,19,13,15,102,14,96,95,15,63,45,69,93,48,97,55,33,21,63,61,21,61,102,21,17,109,114,39,13,51,90,13,9,58,76,137,142,84,13,81,9,88,113,61,110,135,30,30,33,73,67,98,24,33,78,92,111,9,110,90,34,89,119,99,142,46,33,13,84,209,39,13,27,40,37,55,37,93,44,132,134,128,34,36,43,24,47,13,9,91,37,61,25,82,26,46,50,49,56,19,13,23,11,80,41,70,57,48,92,114,9,65,145,56,40,38,37,37,62,64,63,61,66,65,93,58,63,54,68,58,79,62,68,55,88,46,54,45,62,28,67,17,16,9,48,27,47,42,45,46,46,42,45,49,44,48,41,44,45,48,44,45,45,47,46,48,45,47,45,45,43,45,46,32,24,33,13,9,66,54,9,55,27,47,50,42,42,44,46,47,32,24,58,13,9,50,50,50,47,90,9,39,99,9,64,29,15,70,37,30,76,43,66,15,31,56,49,90,84,112,62,51,34,72,54,53,61,23,17,13,27,9,88,56,55,89,51,15,9,98,91,92,73,33,71,83,101,94,48,14,37,97,58,52,32,101,13,9,88,61,32,52,104,66,58,84,79,112,16,9,53,150,9,11,87,69,11,60,33,155,123,9,11,77,100,11,111,55,36,42,83,44,143,96,35,21,26,43,51,112,41,21,79,64,85,21,17,13,30,33,58,62,54,130,69,13,40,98,37,81,76,50,101,48,75,60,77,87,24,69,76,207,44,25,41,21,161,216,65,13,9,46,22,33,37,32,45,55,38,21,26,45,41,41,109,45,21,26,13,29,9,69,22,33,77,63,13,78,19,33,32,49,97,48,43,41,29,13,9,180,52,121,9,87,39,25,25,32,25,25,25,91,142,25,123,25,38,192,25,82,76,116,25,131,24,66,13,9,51,31,42,9,118,66,106,110,127,99,28,13,131,103,28,13,139,111,28,13,25,9,43,172,9,71,59,23,28,13,141,68,66,13,29,9,65,34,48,43,20,65,53,102,106,31,31,14,37,49,59,120,104,17,122,34,17,80,102,72,69,66,21,63,111,122,59,70,25,30,56,25,21,37,17,82,107,62,40,17,89,39,62,104,17,33,13,9,80,56,140,9,62,95,93,46,9,61,19,44,28,185,9,51,81,105,28,53,15,39,9,44,95,9,9,81,84,71,116,124,160,68,97,112,151,13,9,48,74,99,9,11,86,86,85,85,10,16,32,30,45,10,17,32,31,43,11,86,51,28,13,46,25,35,46,64,68,78,84,116,150,100,48,41,21,72,36,21,17,35,13,42,25,9,44,68,37,13,28,9,62,20,7,16,19,27,36,111,72,142,90,116,89,45,72,19,91,13,166,9,73,60,20,46,70,39,14,9,113,106,187,34,33,171,106,77,61,52,132,41,21,75,161,49,66,17,78,15,9,67,69,105,9,54,32,40,42,117,45,94,44,92,42,43,45,110,101,45,105,42,47,90,123,21,37,17,43,46,121,41,44,40,170,50,111,42,42,111,44,101,44,77,44,69,24,129,88,36,13,65,135,144,23,13,58,95,13,44,113,13,9,11,78,70,11,54,44,30,13,47,114,241,13,48,110,9,11,91,89,42,11,57,39,34,42,89,34,17,94,90,99,33,17,31,13,29,9,63,166,9,44,28,48,38,42,65,17,15,26,9,65,65,58,9,53,63,36,51,77,41,25,36,48,50,50,50,47,98,28,59,41,65,17,15,9,64,165,9,73,65,47,37,43,42,37,42,45,103,98,113,21,26,52,21,43,49,51,162,48,47,52,43,50,104,85,94,98,42,111,25,21,65,97,21,33,87,55,37,24,79,13,9,52,30,59,49,13,61,40,28,13,25,9,60,30,133,101,62,60,70,93,34,25,21,17,13,105,72,120,17,15,28,9,83,74,24,37,48,50,50,47,50,70,51,70,17,13,29,9,67,30,94,104,77,111,97,83,98,21,19,15,28,9,74,30,88,43,105,13,44,107,81,13,28,9,66,63,25,33,13,30,88,102,15,100,87,44,77,108,19,13,28,9,68,65,24,33,13,30,98,104,15,79,92,102,15,28,9,52,54,24,33,13,30,33,60,78,19,13,52,72,53,94,21,19,15,28,9,44,54,24,33,13,30,52,72,53,94,21,19,15,28,9,72,60,21,197,111,13,9,64,70,28,96,77,55,91,50,96,54,77,97,88,59,34,25,21,49,37,58,105,61,27,53,33,21,17,61,78,13,26,9,61,30,95,110,49,13,111,26,67,73,92,64,85,30,21,17,97,26,17,56,13,28,9,11,78,47,11,47,159,9,83,20,7,16,45,34,5,82,91,5,55,17,105,67,97,30,35,94,32,151,48,37,56,57,42,39,68,67,27,21,26,178,21,19,86,24,33,44,18,15,65,9,102,83,72,121,9,120,142,9,101,83,72,120,9,119,143,9,68,223,321,25,9,132,67,122,46,92,29,52,131,85,98,163,17,134,102,93,84,138,37,146,17,13,47,89,42,70,33,47,29,47,50,22,37,17,13,25,99,155,36,69,17,25,43,47,18,33,13,18,97,96,35,59,199,40,79,21,17,103,101,103,104,33,32,52,17,13,65,36,39,35,44,17,64,53,86,57,52,17,22,55,17,13,9,77,83,72,65,9,64,65,47,74,44,64,54,59,40,17,22,51,49,101,21,17,13,9,64,66,48,51,93,69,15,9,16,45,59,43,57,45,59,69,37,70,10,5,71,53,142,5,20,85,15,7,16,26,35,153,95,96,69,202,170,14,9,68,23,32,58,62,72,93,25,34,64,64,99,154,119,93,60,60,35,81,85,55,87,41,47,90,39,17,91,57,101,42,121,50,25,21,17,208,76,13,65,81,41,121,62,60,37,25,46,77,46,58,62,61,42,33,64,63,127,63,80,69,50,41,37,33,38,85,56,67,154,38,61,59,109,104,137,33,99,168,33,38,61,59,122,100,33,98,88,138,33,38,151,63,33,38,54,70,97,115,33,59,38,36,94,25,21,17,13,51,112,129,13,60,84,62,80,38,115,19,13,101,58,72,44,62,17,53,98,137,94,95,21,26,56,21,17,13,99,81,96,59,65,27,27,80,47,27,82,34,27,76,67,36,106,63,65,136,25,21,17,13,53,85,13,9,11,121,94,103,11,110,36,38,50,56,13,32,102,51,39,17,13,90,41,70,61,61,21,27,17,56,52,27,17,57,41,84,90,67,25,21,67,69,21,27,17,52,75,27,17,64,84,64,21,27,17,142,36,49,55,74,34,52,98,97,68,29,34,32,64,21,17,179,99,134,188,79,56,17,13,15,73,90,112,15,60,92,115,83,17,13,58,37,27,17,85,41,81,75,33,21,39,179,60,87,107,92,56,79,25,21,26,108,165,64,53,21,17,13,40,113,125,13,9,126,72,74,98,55,27,103,93,158,15,9,81,26,51,92,56,75,139,98,41,108,105,25,21,106,41,104,116,105,25,21,17,88,84,62,80,21,19,13,24,9,70,113,79,35,92,51,38,69,82,84,39,73,50,39,54,25,49,21,19,13,23,9,120,81,159,151,15,9,81,52,89,81,35,63,17,13,18,89,45,57,59,49,99,67,29,34,25,65,49,69,78,29,34,25,21,19,13,9,11,125,67,55,99,168,11,83,79,34,23,41,48,42,77,161,67,181,91,40,21,26,100,21,17,22,65,92,110,163,51,49,29,89,79,25,30,95,25,21,60,65,21,108,61,65,21,136,66,70,21,72,61,87,21,66,92,21,60,65,21,17,56,107,42,41,96,149,17,71,29,68,53,49,34,51,56,34,32,45,21,155,56,17,13,34,50,30,37,113,79,36,37,95,84,65,63,89,17,97,100,137,81,132,76,17,13,47,70,102,13,77,56,106,13,9,76,70,61,96,13,78,69,69,13,82,64,13,60,58,13,35,9,87,103,46,160,30,57,161,13,18,30,13,9,37,37,34,55,88,47,129,48,44,47,58,32,46,117,24,33,13,9,67,51,30,119,140,92,155,9,56,72,61,139,38,82,45,135,88,21,181,75,72,21,74,75,114,93,21,17,13,26,9,63,99,9,62,57,44,13,37,55,30,13,67,70,9,51,106,9,51,146,9,80,20,15,7,16,26,35,27,36,68,66,70,64,68,96,105,22,31,54,54,72,98,98,90,40,57,20,27,40,57,14,9,48,53,51,9,86,51,41,44,13,29,33,88,60,42,79,37,61,72,69,48,38,113,64,21,17,27,97,46,17,67,57,65,39,17,56,79,38,92,60,55,52,27,66,61,44,21,17,48,84,37,57,30,13,87,59,53,94,96,60,36,123,51,13,29,9,39,22,33,32,51,112,30,68,48,73,68,44,46,62,47,53,47,47,46,44,47,39,48,66,37,29,46,46,28,48,44,22,50,59,94,85,96,29,29,24,32,13,9,58,63,25,33,69,69,49,99,46,26,9,56,30,39,15,142,15,72,15,119,15,82,15,119,123,156,15,74,114,103,72,155,51,59,129,75,80,38,186,100,18,15,9,72,110,72,33,117,71,64,73,58,79,13,18,72,45,47,46,77,33,21,74,139,36,59,21,17,13,51,115,9,86,109,53,33,13,51,82,95,77,34,146,32,13,95,111,48,63,87,13,18,97,159,13,9,127,224,9,86,127,53,129,150,9,82,51,107,9,89,37,35,42,48,149,98,106,118,188,21,41,44,210,21,43,44,65,202,21,40,44,71,230,171,21,42,44,240,21,56,32,80,49,57,56,141,26,21,28,57,17,17,165,233,9,51,50,20,39,107,14,9,74,84,111,254,68,9,93,156,9,62,50,58,46,107,13,53,222,9,62,45,46,78,13,18,60,67,139,13,9,71,79,57,41,45,85,165,66,66,70,43,21,70,43,21,108,112,48,56,72,72,90,47,25,43,21,26,43,21,17,80,90,194,126,17,80,97,145,55,54,17,13,35,9,59,58,46,38,107,13,18,106,13,9,64,109,25,79,13,71,24,61,156,18,13,63,24,64,163,18,13,18,72,13,9,41,58,46,24,52,27,56,57,21,18,13,68,302,67,9,60,57,50,49,68,55,27,25,13,59,9,44,65,68,9,66,112,50,55,127,9,82,54,19,24,29,59,68,92,133,41,99,170,9,11,68,80,11,49,111,55,28,32,48,46,48,47,45,47,42,47,62,55,47,52,48,47,44,49,58,47,47,41,59,52,45,32,50,107,94,51,50,43,49,43,43,39,51,51,79,47,49,48,49,33,24,60,13,9,67,17,26,130,132,27,57,133,57,65,17,58,62,17,44,104,104,41,21,105,39,156,21,77,46,41,21,29,125,129,27,17,47,100,34,39,21,17,55,89,120,66,30,143,83,61,85,272,124,49,195,29,107,109,105,25,108,21,37,17,74,153,17,165,85,44,17,110,69,153,143,110,13,75,95,27,133,121,35,232,17,73,69,151,13,69,85,28,86,93,47,51,84,102,67,58,51,67,78,31,25,21,17,31,13,96,82,73,78,57,44,21,17,33,13,148,146,38,37,84,122,131,84,44,60,55,61,191,13,15,145,15,47,43,63,62,17,27,114,61,58,33,34,44,33,21,52,92,47,46,25,61,103,69,65,46,47,46,25,57,44,61,118,92,92,64,84,33,76,76,78,90,91,30,26,22,97,53,39,21,17,30,13,64,62,59,47,68,13,131,59,139,54,62,59,89,91,49,29,25,135,60,21,26,32,47,73,80,26,21,19,42,86,42,44,54,160,38,61,88,74,33,38,36,69,174,25,21,17,80,96,88,42,62,70,84,135,147,74,61,25,21,17,142,13,109,51,62,57,74,13,63,88,50,101,98,41,21,91,77,99,41,21,90,65,175,17,97,114,17,25,53,84,108,70,112,17,62,107,71,17,38,93,17,59,62,17,33,13,74,140,208,85,110,32,177,172,38,112,231,17,140,54,137,17,22,286,75,17,30,13,77,87,84,51,28,181,17,22,36,84,48,79,65,21,17,13,49,36,47,54,51,45,58,71,49,25,36,28,44,17,13,83,118,41,87,91,17,166,77,39,61,68,45,152,152,21,102,113,36,19,13,34,43,74,88,76,62,69,85,37,155,43,13,15,65,58,15,52,140,51,57,63,43,63,55,43,41,62,58,23,96,58,110,105,97,23,80,23,127,35,34,60,53,22,138,86,79,23,68,51,112,54,17,76,72,18,152,89,44,160,109,18,95,103,73,99,153,150,55,297,72,154,235,18,19,79,112,19,74,64,73,38,78,129,21,100,18,69,93,38,46,100,23,18,109,86,60,136,46,88,48,106,21,41,18,29,17,101,96,185,119,46,68,115,63,71,46,21,17,90,105,96,151,17,43,48,52,43,110,34,45,97,182,34,50,34,21,41,110,67,79,25,21,17,13,153,181,259,105,65,39,17,102,59,154,42,80,71,216,161,37,25,21,17,13,59,65,58,33,57,32,113,48,33,129,126,13,76,61,41,27,82,45,68,126,166,17,13,117,63,88,73,17,13,84,99,82,32,13,15,89,86,36,14,82,58,15,45,98,70,145,154,44,17,36,37,17,91,69,189,45,94,21,90,37,17,104,67,86,37,17,18,73,58,40,127,117,18,93,103,37,17,26,99,57,69,55,85,41,21,125,104,72,41,21,38,57,42,78,41,25,21,17,144,118,69,87,160,89,13,112,97,81,138,13,69,102,81,107,116,62,28,37,136,39,120,33,77,50,93,158,44,32,39,21,17,13,71,78,72,33,96,96,55,123,42,129,37,70,137,80,133,49,44,29,25,21,17,29,13,57,89,69,170,13,93,69,35,78,68,88,56,37,17,43,47,57,71,39,59,49,30,97,77,66,115,128,63,49,21,89,17,33,13,71,59,49,131,115,168,19,108,13,71,107,36,52,64,40,25,44,45,76,64,50,39,322,72,21,48,136,49,76,28,37,17,13,102,80,69,159,111,64,25,23,19,149,13,94,79,71,106,13,15,119,85,60,15,104,86,27,17,134,42,100,17,13,67,94,13,102,89,80,87,87,27,213,97,94,98,79,128,21,27,17,66,27,91,39,27,17,54,96,131,27,17,51,84,129,27,17,104,37,85,27,17,50,38,46,82,30,45,95,30,39,87,30,28,70,17,109,52,81,110,70,122,107,41,31,17,95,13,161,184,126,54,135,76,27,17,36,127,116,33,21,17,62,154,91,61,33,21,119,97,21,17,22,71,33,21,17,76,96,107,96,87,85,110,37,101,21,17,95,167,102,33,65,17,35,42,76,17,13,117,165,13,81,126,98,35,129,62,17,22,66,110,58,17,13,101,168,36,27,51,61,79,63,21,17,22,106,17,13,74,77,109,89,18,133,129,131,136,120,18,107,68,17,13,76,184,58,52,82,17,22,52,17,13,132,93,66,74,17,89,63,143,80,86,17,22,116,93,41,79,82,21,17,13,85,70,57,87,27,70,65,80,40,82,33,21,38,68,70,45,29,89,54,29,27,21,17,13,15,76,71,15,85,79,74,97,42,108,93,44,21,17,42,67,59,80,49,39,109,80,61,37,35,29,25,23,17,13,61,105,13,88,78,85,65,27,17,87,38,73,41,31,95,66,46,29,27,21,17,13,58,76,13,82,56,27,58,111,76,13,80,111,88,42,27,17,59,27,17,84,99,108,17,78,84,38,50,27,17,134,101,171,53,142,60,72,21,88,55,60,88,63,84,31,25,30,54,25,21,72,71,21,17,49,54,40,17,13,65,135,122,13,15,93,15,55,36,59,75,49,54,59,51,58,36,28,37,17,13,15,109,108,104,58,40,40,14,113,109,110,109,110,32,14,64,69,122,15,85,40,32,17,80,52,43,34,17,66,46,105,95,76,126,23,19,49,32,13,65,100,39,37,17,77,49,47,55,53,53,51,47,47,47,84,101,30,28,41,17,65,135,63,31,21,90,87,85,88,164,19,122,13,44,130,13,102,113,76,49,47,53,51,72,88,115,34,25,36,55,53,47,47,47,84,101,30,46,106,45,25,36,55,54,30,114,71,28,41,17,164,69,168,47,41,25,101,55,62,63,83,61,59,128,59,60,67,100,103,153,54,140,25,23,62,141,25,102,46,23,13,99,91,80,69,113,84,39,109,91,81,33,29,34,136,74,29,25,23,19,25,73,46,23,13,92,64,131,32,151,146,31,78,45,25,21,53,19,111,77,30,13,15,103,15,151,15,133,15,39,100,53,135,152,79,152,89,46,48,152,140,49,22,131,85,116,150,21,105,103,45,106,266,30,37,107,49,64,103,162,29,36,174,29,36,17,114,36,90,122,30,37,17,43,24,31,140,146,149,195,115,17,97,110,118,38,124,34,41,21,17,120,143,58,62,71,196,21,26,131,21,134,17,68,90,112,105,60,131,134,17,46,51,132,130,101,77,141,95,88,135,146,177,45,23,17,102,99,105,95,21,17,13,15,98,83,67,73,170,130,15,89,40,37,40,95,51,60,29,127,31,176,76,114,113,141,27,17,13,45,45,33,90,59,13,90,44,135,204,95,37,146,93,51,25,21,75,141,127,36,19,58,184,19,13,15,122,126,82,134,134,59,15,75,62,55,35,54,24,151,140,72,94,52,55,107,65,95,63,62,29,25,63,17,31,13,97,45,135,72,74,88,13,101,66,108,38,100,49,88,54,25,21,17,13,119,66,56,46,38,21,65,19,13,137,61,115,13,15,118,115,113,85,15,82,118,121,175,117,19,58,13,66,101,13,75,80,20,15,7,16,22,31,79,42,112,9,114,47,108,56,51,52,76,9,11,83,10,72,11,59,40,47,49,48,46,45,57,47,45,52,53,9,11,76,10,72,11,56,40,77,49,46,57,47,45,52,52,42,48,9,93,65,38,28,44,33,45,40,103,9,42,57,9,64,73,74,73,9,84,58,40,63,13,114,99,38,111,17,13,57,54,94,56,59,74,107,84,13,76,116,72,75,57,105,39,34,37,59,71,29,68,17,13,37,91,104,162,13,84,9,57,23,47,138,82,17,23,13,32,43,43,49,81,120,21,121,51,48,49,100,65,21,13,9,56,28,28,13,52,67,13,81,84,145,51,17,33,13,24,9,64,80,29,48,64,143,154,106,38,117,56,64,104,73,25,40,21,17,13,32,9,97,80,27,57,28,13,53,192,13,110,9,66,69,164,35,48,38,83,63,29,53,24,26,14,116,117,55,40,26,64,93,17,67,94,105,17,53,75,104,21,78,105,109,21,154,59,21,37,17,60,75,47,21,37,17,117,47,29,17,25,129,48,17,39,75,33,65,74,25,54,51,63,37,25,21,17,33,13,9,88,78,57,50,63,71,44,58,174,80,180,9,72,31,35,9,48,46,38,122,117,115,128,59,70,58,104,106,17,13,9,45,51,9,67,56,9,71,196,9,90,76,63,135,26,13,81,229,154,9,58,62,43,77,69,60,75,48,83,34,89,50,104,57,80,25,21,26,83,21,17,13,36,26,27,57,57,27,17,60,102,47,83,48,88,64,29,25,21,27,17,36,45,59,53,53,56,56,87,31,63,45,31,59,48,76,49,31,55,45,94,43,50,31,50,86,45,49,60,31,49,85,45,49,60,31,60,97,45,42,47,31,53,57,92,45,46,49,31,45,45,49,31,60,59,45,55,30,17,48,48,27,17,47,13,27,9,62,49,9,69,110,58,13,9,88,71,33,63,45,13,9,79,31,9,72,49,67,27,45,13,71,36,55,55,48,17,78,59,41,17,68,36,17,13,9,50,31,70,32,42,64,26,49,71,26,51,50,45,49,43,43,103,26,48,47,74,26,59,81,26,24,47,13,29,9,65,52,9,71,196,9,92,57,97,26,13,174,9,58,68,20,15,7,16,129,80,92,110,110,147,157,98,11,5,53,25,101,70,32,109,90,31,153,30,10,47,72,40,107,86,9,5,39,93,80,75,62,5,149,65,24,19,65,82,31,19,78,35,29,31,33,64,124,31,149,46,31,144,75,151,152,170,21,27,17,39,93,72,115,50,25,60,92,92,43,113,51,55,33,31,25,23,27,13,11,40,134,40,83,45,78,13,35,9,43,45,29,76,52,40,126,28,13,25,9,37,111,9,5,100,48,45,59,116,80,59,70,80,96,85,54,37,90,56,184,41,103,64,222,37,55,142,36,187,118,120,138,243,32,15,10,79,44,32,9,5,42,63,5,45,73,5,119,35,105,99,52,138,9,14,86,50,190,134,114,9,5,96,108,154,22,29,36,38,79,25,32,9,62,105,116,132,133,19,26,84,116,72,52,111,76,9,64,99,9,41,52,78,9,5,86,116,29,50,93,77,9,73,45,60,78,124,9,5,50,75,5,49,57,19,79,34,89,49,13,9,5,20,15,7,16,23,32,73,84,188,93,73,47,13,72,38,33,13,37,55,143,93,13,21,49,70,173,13,93,51,65,98,102,56,68,73,64,207,19,13,54,77,105,26,119,13,82,119,122,103,100,87,133,37,17,22,118,98,168,17,13,123,126,128,131,82,77,111,284,126,13,119,126,79,27,126,14,78,36,52,21,53,117,66,62,72,125,53,84,19,13,171,9,73,11,105,86,44,11,63,49,56,70,113,9,129,111,22,32,42,34,17,43,53,75,69,26,94,37,169,90,23,17,13,9,71,72,53,23,80,33,23,76,98,26,23,98,59,126,64,24,23,70,9,72,23,94,32,89,116,13,111,41,114,107,125,13,109,40,82,124,13,99,69,190,195,123,28,62,43,36,49,47,47,26,54,22,17,13,29,9,71,21,81,72,38,33,13,54,24,33,85,93,97,119,153,59,170,32,9,81,58,115,84,15,9,68,62,120,41,98,182,52,38,76,13,29,9,75,85,59,33,13,62,90,88,85,26,99,13,72,79,68,9,77,102,69,189,9,43,59,84,89,42,54,175,63,43,35,17,13,26,9,52,10,78,71,10,53,52,29,13,46,28,13,39,44,55,32,47,78,46,51,129,24,33,13,9,86,96,55,95,186,29,214,56,104,97,194,161,92,17,13,51,99,96,32,13,88,45,37,17,134,98,110,42,55,127,98,32,13,9,101,75,115,83,97,109,9,80,118,57,28,79,71,13,169,214,9,60,58,28,36,29,71,104,72,202,39,51,43,43,49,75,78,37,88,32,43,50,59,55,47,45,50,76,24,33,13,9,78,78,9,53,109,9,73,86,20,41,60,51,27,41,41,39,14,9,85,54,108,89,136,9,64,63,83,77,142,9,42,32,43,47,50,32,24,33,13,9,71,20,15,7,16,14,23,29,23,21,20,23,20,23,21,22,23,20,24,23,26,25,24,22,25,26,20,19,20,22,22,22,23,20,19,27,20,23,24,21,30,19,21,25,25,20,23,24,19,20,22,19,22,21,23,21,20,21,19,24,23,22,20,22,23,24,21,23,23,22,18,20,21,22,23,19,21,19,23,19,22,18,24,22,22,20,10,42,38,74,74,89,50,67,87,62,27,67,97,39,115,34,87,144,51,44,128,41,150,154,33,21,86,87,45,21,17,15,75,9,82,64,124,9,53,39,49,48,41,48,47,61,24,67,13,9,70,74,27,67,56,111,30,140,133,140,27,17,75,41,103,17,15,25,9,74,63,46,46,13,164,9,55,55,55,27,50,47,48,47,48,42,44,49,91,21,64,56,64,25,116,78,72,61,133,29,27,21,34,151,21,42,44,56,47,48,48,49,43,40,48,59,75,24,108,13,37,50,13,36,30,46,115,21,26,128,21,17,22,44,17,13,9,46,27,49,48,48,47,48,52,47,48,48,24,39,13,9,47,127,24,34,50,38,71,18,16,9,70,78,43,119,24,46,50,38,70,18,16,9,62,53,20,27,39,34,50,45,32,39,14,9,74,56,45,37,13,44,35,34,39,26,66,49,37,43,176,88,37,17,151,15,9,82,63,20,27,57,34,50,45,32,39,14,9,94,11,90,79,30,71,30,61,40,41,44,44,39,45,10,43,89,92,92,66,66,94,24,11,90,73,77,121,52,33,13,61,154,63,33,13,76,36,33,13,143,63,33,13,86,78,126,78,54,41,119,42,35,34,41,109,36,37,23,78,86,97,73,13,75,9,80,71,39,85,32,93,17,46,9,94,52,71,92,93,110,24,9,61,76,9,59,114,9,67,40,51,50,49,43,47,45,44,124,50,88,48,52,49,47,42,52,58,51,52,84,95,86,36,33,126,57,17,42,34,49,90,97,102,129,51,87,50,42,79,38,21,54,130,57,17,51,56,94,128,21,13,9,43,111,71,167,9,62,78,57,13,41,50,45,41,47,87,13,9,44,20,15,7,16,19,28,124,70,32,37,30,49,65,70,38,17,89,125,19,14,116,92,51,36,13,50,123,9,59,112,87,80,77,25,62,13,95,53,58,29,57,113,98,36,171,21,17,22,159,17,13,9,55,39,44,47,55,99,70,73,24,32,13,9,71,60,168,9,98,10,29,69,54,175,9,48,116,9,45,32,92,48,60,131,37,13,46,31,90,61,31,74,41,17,59,13,40,9,49,84,63,70,9,48,50,61,80,20,35,50,64,66,57,43,65,107,71,92,14,9,59,20,15,7,16,22,31,15,11,61,10,16,10,23,10,50,10,28,10,26,11,37,11,49,45,11,28,104,33,26,11,118,78,86,11,30,19,40,30,109,37,71,53,39,17,121,13,21,24,13,9,68,67,53,39,17,72,13,21,24,13,9,60,26,38,45,30,31,37,9,33,58,9,43,31,9,43,34,44,13,18,42,13,9,52,50,140,26,80,39,50,13,22,61,24,9,42,66,9,53,20,27,124,43,31,36,41,14,9,43,37,49,13,46,9,40,43,26,9,59,27,59,60,77,51,77,29,33,13,35,56,36,44,13,48,9,11,49,102,11,40,61,39,34,38,59,42,29,9,72,28,34,55,46,13,40,61,9,63,34,42,22,9,56,84,32,74,26,13,18,66,13,9,11,99,106,102,11,45,46,60,74,71,77,9,100,47,19,64,44,23,13,32,43,126,35,61,91,81,43,76,47,25,21,26,49,43,43,47,53,67,21,26,51,53,62,21,26,49,53,42,21,26,44,44,55,46,44,55,21,61,52,56,67,40,79,55,25,30,97,53,53,29,25,21,26,59,63,26,48,53,107,100,26,46,50,53,37,58,59,21,26,63,21,26,17,51,45,85,64,58,21,63,26,45,50,63,26,47,36,79,44,58,48,25,21,30,26,48,47,52,36,79,44,55,21,30,26,49,82,26,50,55,128,130,32,40,54,34,21,26,42,21,26,17,47,55,46,45,50,52,38,26,46,50,72,38,53,51,72,35,47,57,56,73,89,61,49,42,51,101,91,78,84,71,29,34,134,29,64,91,87,79,104,50,37,33,29,133,99,29,34,71,111,42,29,50,35,25,63,69,50,91,57,67,69,115,65,119,70,38,38,50,35,25,48,56,73,77,137,98,132,108,33,97,80,149,46,33,39,29,34,25,50,42,65,34,32,58,21,17,32,24,49,65,67,63,53,33,31,27,21,66,13,9,51,48,43,63,81,58,28,56,32,17,62,41,49,32,17,57,118,71,77,41,25,21,50,32,17,22,61,73,37,21,69,32,17,15,9,40,40,49,57,61,37,48,46,60,41,45,16,57,50,121,13,107,57,29,107,57,29,91,138,124,124,153,128,136,136,15,101,124,133,19,79,64,38,53,191,68,51,90,163,21,26,55,108,45,61,57,29,25,21,91,48,99,52,66,17,22,72,37,53,21,17,35,111,140,61,76,64,80,77,87,17,22,43,47,93,48,99,52,67,17,28,13,78,9,49,42,57,28,13,60,28,28,13,25,9,73,50,114,29,13,29,51,49,43,43,61,49,46,93,24,32,13,9,38,56,9,113,110,40,78,83,9,86,90,38,37,41,13,129,9,91,40,19,66,53,41,85,13,79,34,55,46,13,9,83,41,43,9,50,119,98,9,11,79,113,65,11,35,60,43,13,57,58,83,83,13,32,50,45,47,56,24,37,13,9,42,60,54,13,23,60,109,41,38,43,17,13,32,42,42,58,143,37,48,135,45,51,50,48,47,81,41,21,113,107,38,56,43,41,50,35,45,32,46,32,24,39,13,9,97,47,119,112,155,44,34,60,54,40,84,47,41,25,21,17,13,24,42,81,60,87,36,32,17,110,54,52,51,51,56,53,46,56,51,52,36,49,55,54,67,28,37,17,62,42,37,21,65,51,50,57,51,40,32,41,21,17,13,9,35,20,50,45,52,35,56,61,14,9,52,20,50,45,52,35,104,33,30,29,14,58,24,54,49,63,39,52,30,34,33,18,13,9,30,46,36,80,38,50,17,13,25,9,51,51,56,64,13,66,9,65,94,83,107,59,85,13,36,9,11,63,99,11,42,104,9,45,87,9,36,138,9,37,84,35,13,45,9,47,37,62,72,13,71,56,74,13,112,107,74,13,82,55,45,13,50,78,33,13,44,33,13,51,70,41,43,50,60,21,176,75,17,13,32,9,62,48,40,33,13,59,68,43,87,13,18,33,13,9,52,32,45,50,47,32,24,33,13,9,34,103,89,96,29,35,38,43,68,9,68,20,15,7,16,24,33,11,31,39,55,31,11,117,145,267,81,91,83,81,91,72,107,43,40,29,108,92,108,81,13,46,70,54,27,17,104,100,94,100,70,60,148,189,92,80,47,38,19,60,50,95,40,75,90,52,17,22,112,42,88,90,92,22,118,129,84,90,43,17,13,9,58,99,94,45,34,13,55,71,83,89,33,89,50,105,36,124,49,29,17,89,33,55,37,17,36,62,43,69,54,25,21,26,48,124,81,62,91,44,25,21,17,44,104,17,69,94,100,55,121,69,53,21,104,107,104,26,53,21,17,13,31,52,116,146,108,13,9,85,98,118,53,63,15,9,51,79,32,28,9,31,11,90,11,47,19,43,35,13,176,38,38,59,13,92,37,61,142,101,72,127,90,58,190,29,17,96,118,37,129,71,44,175,17,79,29,17,46,45,50,75,17,22,109,65,196,21,17,106,81,58,39,38,73,38,35,70,47,79,142,117,119,59,72,135,181,17,22,123,17,13,36,9,58,10,94,92,26,10,99,11,53,36,97,96,92,58,67,92,86,83,29,17,107,106,27,67,17,36,62,73,21,26,69,21,17,13,20,57,49,47,14,9,31,11,90,11,47,43,35,13,172,38,38,59,13,90,43,49,29,17,45,215,81,50,225,100,164,13,36,14,98,96,30,15,57,40,38,41,96,62,71,96,90,87,21,60,64,21,26,61,21,17,24,61,47,53,18,13,9,58,91,276,79,9,45,78,9,58,67,93,56,9,90,46,50,81,81,82,117,63,9,74,45,70,9,60,19,39,55,155,49,55,49,96,13,9,44,80,9,60,53,78,9,78,79,114,46,9,96,77,112,46,9,92,60,140,9,94,44,84,9,33,31,31,29,27,38,41,41,19,30,49,41,33,51,33,138,33,45,33,29,55,29,49,29,13,9,55,68,99,160,153,42,19,15,9,58,19,167,65,28,9,74,20,15,7,16,35,44,65,25,70,53,109,9,69,76,36,28,103,127,38,33,83,60,30,17,34,26,42,82,115,30,17,45,49,221,17,13,44,23,41,27,65,166,97,17,126,109,17,59,111,17,72,108,17,66,25,35,33,45,37,53,37,60,111,17,103,81,53,56,37,56,37,17,22,55,17,33,13,9,59,29,56,89,56,80,84,57,78,29,17,33,117,137,17,22,47,33,81,81,41,21,17,13,9,73,46,80,99,52,51,67,13,56,56,9,96,76,26,23,49,46,43,54,83,86,65,31,57,88,71,61,70,55,34,25,94,93,59,64,25,55,49,30,56,66,101,51,30,28,51,17,13,54,64,85,49,140,17,13,9,95,32,23,92,9,64,84,9,57,29,37,54,69,21,96,95,59,44,51,54,54,52,51,54,53,51,57,52,76,56,62,61,29,71,113,41,61,29,40,32,99,85,116,21,43,49,48,47,52,47,41,43,52,42,41,141,42,45,58,55,58,54,85,42,48,43,49,53,49,62,50,60,53,51,142,45,51,46,52,13,50,45,37,17,94,96,120,37,17,129,13,49,131,37,17,105,105,13,46,131,78,74,118,13,47,133,44,118,13,49,51,37,17,114,13,51,101,37,17,114,13,62,72,106,66,94,168,13,89,70,69,72,139,72,74,145,13,50,132,13,9,55,76,92,161,9,113,66,65,150,135,9,90,61,66,62,126,9,66,71,99,37,42,17,13,81,9,107,20,15,7,16,90,25,34,66,68,74,74,77,56,16,23,44,10,5,44,97,96,93,73,45,115,79,104,29,16,148,152,64,10,5,51,100,95,85,26,103,30,29,9,83,58,75,87,48,29,9,22,115,129,9,25,5,52,48,21,74,9,21,5,66,72,26,90,152,188,9,32,29,33,98,99,24,14,100,100,88,71,86,43,88,163,17,13,113,110,99,111,114,62,105,98,13,9,14,94,98,24,52,97,13,99,50,80,119,116,52,91,17,13,9,5,66,97,96,93,65,10,95,30,126,93,22,29,9,60,10,86,96,29,10,78,10,37,10,88,150,10,47,64,101,26,10,97,96,95,25,10,108,56,10,18,96,100,26,10,95,25,10,87,58,22,106,59,111,9,25,5,32,44,5,35,90,109,5,89,91,138,190,5,47,80,5,78,55,95,92,95,39,33,33,23,23,22,51,66,28,13,66,75,29,13,65,49,94,97,94,77,87,79,47,94,95,48,117,113,30,21,17,108,26,17,48,86,94,96,40,74,149,13,92,57,92,53,72,35,13,44,31,9,5,34,16,50,63,10,5,36,42,51,24,9,100,25,9,77,33,42,41,5,36,42,52,24,9,100,25,9,77,33,42,41,5,44,46,42,40,121,40,13,10,50,41,44,37,9,18,5,30,44,51,50,9,47,22,9,75,33,67,5,26,71,54,5,29,119,5,50,24,26,27,50,43,33,39,34,17,29,13,18,37,88,35,17,13,9,29,80,9,22,5,36,47,16,23,41,48,57,10,5,50,59,5,57,45,58,5,47,47,24,26,53,68,67,96,109,66,62,49,48,48,66,77,17,30,13,9,74,85,9,22,5,36,21,38,38,31,34,36,38,36,37,35,32,32,30,32,32,36,35,29,38,36,39,28,37,38,28,9,21,5,55,115,5,71,31,42,38,44,10,15,82,84,79,79,81,80,78,20,34,44,62,66,70,5,66,78,77,92,92,70,10,80,10,49,10,43,10,38,10,92,57,5,45,43,27,29,13,9,20,5,41,44,47,91,5,20,7,16,83,67,84,29,41,31,40,32,40,39,32,39,33,10,31,35,22,25,29,108,105,35,30,37,45,59,31,13,65,31,13,32,9,37,54,47,80,9,48,42,44,13,90,9,37,51,45,9,51,37,38,13,9,11,74,11,38,46,53,39,36,56,40,59,54,21,17,28,13,25,9,11,74,11,37,50,29,13,46,52,36,56,40,111,41,43,36,21,17,60,36,39,32,17,22,58,80,58,106,68,64,53,27,46,48,25,21,79,44,62,48,67,55,51,44,29,25,66,83,44,29,25,65,59,48,25,30,45,40,25,21,60,44,65,57,104,48,25,65,48,66,52,71,66,71,55,33,29,25,21,64,44,60,48,87,52,70,56,75,68,71,59,37,33,29,25,21,17,28,13,25,9,37,46,51,49,36,54,76,54,66,62,23,42,44,21,17,56,40,61,48,100,44,21,61,44,62,48,67,62,64,51,29,25,21,17,60,40,58,44,63,50,47,25,21,17,61,40,58,80,58,67,52,27,46,48,25,21,79,44,61,83,44,29,25,21,17,28,13,25,9,81,84,79,53,36,56,40,59,100,43,43,21,17,28,13,25,9,37,46,91,36,56,32,17,36,107,88,40,56,44,21,26,43,36,21,17,53,58,32,17,36,36,40,98,61,111,43,21,40,17,28,13,25,9,35,43,24,24,31,37,46,43,50,44,32,37,44,50,55,31,41,48,26,71,26,17,70,56,50,52,40,56,43,57,51,38,55,50,38,57,55,54,33,38,58,55,94,133,56,41,37,42,52,37,33,38,25,50,21,32,17,82,42,41,41,133,47,29,17,22,32,17,13,42,9,30,29,9,60,60,29,87,41,101,129,60,49,17,13,305,9,14,120,44,41,129,60,43,50,52,25,67,21,26,53,21,17,13,314,9,5,39,20,15,7,16,15,24,72,102,48,116,33,38,17,13,85,9,45,88,63,26,51,99,209,119,21,17,48,54,114,17,33,13,93,51,59,23,96,117,137,13,92,156,33,13,91,129,13,81,168,71,28,82,93,152,9,63,57,128,9,73,62,105,13,116,34,33,197,93,111,69,106,141,20,32,35,27,34,38,45,41,14,9,108,20,32,40,27,41,49,45,71,14,9,49,104,9,61,50,50,47,37,27,27,13,51,9,48,32,41,48,44,60,43,32,44,84,24,33,13,9,65,47,20,15,7,16,28,37,58,19,34,101,14,40,33,64,37,26,59,51,43,51,94,36,21,111,86,76,21,74,80,124,80,113,125,69,44,108,70,103,96,117,124,46,34,25,107,119,76,73,63,25,104,122,130,112,101,113,123,85,25,55,99,85,67,25,42,30,21,76,78,39,52,36,21,17,13,34,53,36,36,75,44,67,76,79,76,120,21,17,13,60,47,32,76,26,17,45,13,9,76,11,84,85,85,50,66,44,53,11,66,87,85,25,45,33,28,13,40,34,82,13,25,9,83,11,78,81,85,81,86,75,11,45,38,40,81,13,73,74,79,76,74,75,81,80,80,30,44,92,76,83,85,49,91,102,94,19,65,99,39,64,59,60,19,24,35,35,87,43,60,24,36,18,13,68,47,83,85,19,62,39,56,19,13,104,39,100,80,19,106,98,19,78,39,57,19,13,27,44,72,39,57,19,13,38,9,11,74,62,11,51,28,22,83,43,37,40,38,17,22,32,61,42,21,39,17,13,24,53,13,26,9,11,59,69,50,70,78,110,54,111,108,111,65,11,78,91,38,32,13,66,41,32,13,66,55,46,108,121,37,81,27,83,15,73,9,45,66,129,9,38,43,51,53,51,56,9,38,43,52,54,52,56,9,46,32,49,48,48,47,44,76,24,41,13,9,86,20,15,7,16,22,31,27,36,64,72,76,52,105,55,52,83,33,54,33,13,103,100,139,137,33,13,88,126,30,33,61,71,133,61,33,98,71,136,13,99,63,144,103,15,9,68,32,41,84,74,62,105,77,38,36,114,41,21,40,151,155,17,40,51,153,41,21,101,48,124,69,76,17,40,132,24,60,13,9,68,48,29,66,41,45,74,43,78,95,17,44,94,24,33,13,9,87,68,33,101,82,100,55,117,108,124,74,66,218,52,21,19,15,9,79,51,98,101,101,100,38,53,35,114,37,76,17,53,13,67,9,76,88,105,125,9,84,77,76,22,33,69,122,38,70,13,80,124,9,71,96,76,76,120,13,18,96,82,108,88,62,65,55,91,13,9,11,96,73,11,83,37,51,40,47,94,113,89,18,54,18,29,122,29,141,29,117,81,86,26,37,145,106,212,13,105,63,65,77,99,17,33,13,108,48,62,90,99,96,13,104,42,57,82,105,37,17,88,108,96,13,58,96,147,22,105,53,63,123,24,47,69,112,37,36,18,13,18,84,34,97,80,107,177,17,33,13,9,113,144,9,38,84,9,53,99,9,84,104,22,33,161,47,80,75,40,33,174,164,9,99,109,33,46,34,55,49,50,45,99,30,41,131,167,170,50,65,84,139,89,198,17,24,37,13,9,135,40,49,135,20,9,56,89,89,85,88,21,14,93,91,89,88,25,34,86,35,37,26,17,57,36,17,13,33,9,71,97,95,97,94,95,46,14,93,52,96,30,59,121,120,32,13,33,9,67,85,90,123,54,79,107,123,113,110,14,48,80,77,77,47,108,50,77,29,17,37,13,33,9,91,110,145,38,70,13,20,43,72,93,45,44,14,9,75,96,39,14,72,71,14,86,45,67,121,99,9,81,51,58,54,103,78,27,14,38,30,111,114,65,63,60,120,17,13,99,9,100,40,85,82,225,127,35,51,17,14,108,41,48,41,13,29,9,89,58,67,97,52,9,58,115,9,68,147,9,157,118,19,192,89,277,194,219,38,70,13,38,30,52,36,58,50,42,145,70,38,83,49,91,70,38,29,36,25,21,17,41,13,187,204,57,38,103,83,118,68,17,22,102,17,13,24,9,71,146,101,32,33,138,150,9,101,77,69,174,72,52,148,262,9,94,147,161,48,115,118,171,88,61,242,15,9,94,59,45,39,88,32,109,17,22,143,17,15,9,107,98,69,193,198,95,263,77,102,19,217,15,9,103,69,77,100,214,92,17,15,74,116,68,134,65,54,168,137,70,19,9,122,71,129,82,15,85,78,171,9,130,71,131,82,15,187,9,68,20,15,7,16,19,28,32,71,83,10,60,133,9,71,77,9,45,166,43,63,51,28,26,26,36,57,27,17,36,53,52,56,55,51,54,53,49,73,17,86,27,17,42,27,17,98,55,17,114,55,17,97,42,17,128,51,17,22,157,64,21,125,72,21,17,54,13,66,184,13,81,29,120,39,54,42,19,13,51,29,72,39,44,43,19,13,62,29,72,39,44,43,19,13,46,41,27,17,65,46,78,17,13,50,78,13,57,74,27,17,86,46,27,17,70,61,27,17,79,40,67,17,13,53,42,44,27,17,36,95,55,27,17,55,46,62,106,33,21,104,45,115,209,92,37,25,80,78,37,25,97,21,17,13,99,44,55,17,58,60,17,29,13,71,113,33,17,82,87,33,17,74,128,13,46,36,59,51,140,21,47,47,47,64,54,36,47,52,83,21,17,52,13,70,47,83,31,21,17,82,60,27,17,74,33,27,17,77,56,27,17,74,41,27,17,81,13,54,95,38,47,17,43,13,62,74,33,27,17,101,51,91,50,33,21,110,45,33,21,68,17,13,71,63,77,37,17,101,64,37,17,65,13,50,46,76,17,28,13,50,145,55,56,73,115,85,98,19,13,40,44,13,9,57,59,20,15,7,16,111,36,99,58,42,51,176,35,79,9,79,49,58,22,29,23,49,91,13,37,64,357,13,86,58,9,45,57,33,52,22,33,90,99,9,48,56,33,58,28,33,44,118,82,33,13,55,46,43,69,179,46,33,110,56,9,42,44,25,33,40,140,57,73,9,54,40,57,44,65,78,48,33,13,47,43,65,43,43,9,113,46,44,80,49,9,57,69,64,9,31,35,44,9,5,41,101,75,26,58,24,31,48,121,17,55,40,13,9,38,26,51,9,62,131,115,54,111,82,47,91,13,48,52,13,9,25,5,61,73,52,65,36,29,9,63,71,29,71,5,50,16,23,29,59,89,13,10,5,20,15,7,16,57,83,70,23,47,171,30,49,122,51,200,9,53,50,26,79,77,45,79,75,26,29,143,96,193,125,17,13,9,65,92,77,30,27,59,206,17,13,18,51,49,65,69,80,100,128,21,17,71,139,17,13,46,75,13,37,9,5,67,117,51,64,37,49,88,159,23,53,58,59,103,75,94,17,24,33,13,11,5,47,104,5,56,28,45,93,191,53,32,51,33,20,33,9,5,73,107,115,226,9,5,51,43,24,36,71,42,5,44,66,93,78,5,39,73,119,5,66,146,5,72,116,5,95,86,53,64,170,25,9,45,53,93,51,165,33,17,64,13,18,53,13,9,20,5,57,37,100,68,69,5,50,45,99,49,25,49,24,77,106,11,5,88,53,27,47,46,61,56,33,17,28,41,81,28,39,28,37,54,62,30,33,17,59,198,13,20,29,9,5,34,77,5,51,27,57,133,28,13,86,176,9,58,95,9,21,5,42,28,47,45,46,41,28,20,29,9,5,53,20,15,7,16,22,31,157,56,63,118,46,30,13,72,41,83,87,13,39,48,47,48,43,58,51,67,43,61,44,43,42,52,26,9,52,111,59,114,34,60,107,131,60,13,56,51,13,56,62,13,121,58,13,72,43,69,62,17,93,54,17,69,50,17,128,13,42,138,162,109,48,63,48,63,42,60,48,76,43,96,131,114,68,100,74,25,23,45,60,92,106,77,72,25,70,21,45,17,62,13,36,9,55,68,94,79,183,43,35,79,32,48,17,13,22,9,58,26,37,13,77,53,74,48,98,48,23,17,13,57,65,13,99,9,62,135,155,19,102,34,35,26,78,175,43,147,21,24,39,30,46,79,167,13,105,119,120,135,133,38,51,55,85,38,55,85,38,36,66,25,21,26,76,21,17,39,140,101,53,120,86,51,21,17,83,48,57,50,17,101,57,17,188,57,17,41,103,211,122,127,95,91,88,21,36,87,42,94,82,25,69,61,55,62,57,73,97,70,33,88,66,29,54,25,30,77,25,45,68,72,61,60,56,68,72,99,91,66,101,225,74,33,61,77,101,74,37,92,70,33,122,38,36,49,83,25,50,73,21,17,143,174,74,64,124,130,151,23,54,198,93,121,25,30,57,25,83,69,94,82,25,30,68,114,162,25,40,79,25,50,73,21,17,13,91,44,81,96,97,59,74,17,22,69,77,17,50,42,64,13,89,36,78,50,42,64,13,93,36,73,50,42,64,50,73,50,264,13,47,36,122,77,54,17,72,50,42,13,71,36,95,115,118,50,42,13,97,36,79,65,80,50,42,36,53,34,75,85,17,22,53,88,43,47,50,38,70,42,115,84,88,66,29,104,70,29,158,25,87,56,42,96,42,85,62,66,88,25,21,17,13,51,67,68,104,124,82,54,58,81,58,218,21,17,13,98,53,36,42,78,125,74,84,46,111,87,111,256,93,66,80,62,25,30,129,85,25,21,17,42,58,66,86,62,90,34,56,86,62,150,34,55,86,34,32,87,21,17,50,42,72,81,66,98,62,85,62,88,91,200,92,25,30,127,54,66,89,66,93,29,25,36,21,19,13,38,54,31,47,48,85,25,30,77,25,82,84,85,85,80,61,84,47,87,62,81,96,97,146,162,35,78,29,34,122,29,87,84,85,66,95,90,96,29,25,67,62,68,67,65,82,94,55,90,81,29,25,21,17,22,78,17,13,71,108,13,79,118,118,115,179,86,49,108,37,25,98,41,37,25,87,67,55,34,25,21,17,13,149,58,48,93,83,75,122,57,92,40,17,13,62,88,13,71,55,13,53,37,13,148,35,31,73,17,31,13,42,42,58,17,44,13,50,28,56,54,17,13,36,50,71,50,13,79,58,44,17,259,66,61,82,17,13,71,36,33,47,184,58,50,21,17,13,49,37,53,58,48,52,78,76,31,28,87,76,88,31,17,13,80,63,164,47,54,83,75,134,54,106,84,17,79,48,98,90,59,17,13,80,81,140,154,19,62,13,9,120,52,32,56,13,75,49,72,32,17,127,33,17,87,108,58,104,37,21,17,46,28,15,9,68,20,7,16,6,101,83,85,31,36,21,25,7,55,29,130,33,60,41,84,51,13,9,163,67,63,9,148,47,39,44,54,161,100,42,64,9,51,109,9,54,17,23,26,85,28,129,46,55,122,41,17,22,108,38,17,14,70,69,75,60,56,83,49,58,54,10,79,49,98,86,9,15,174,37,61,98,5,41,6,146,7,83,160,90,53,33,5,29,39,105,17,57,65,74,174,51,39,53,34,13,42,48,37,59,86,13,18,87,63,91,17,13,10,145,59,26,9,23,5,51,20,15,7,16,19,28,34,43,98,100,96,104,120,120,112,60,84,45,67,39,13,143,76,84,70,78,71,38,58,55,53,61,58,14,80,66,91,17,53,14,77,63,92,17,50,14,75,61,114,109,71,17,48,14,83,69,95,17,56,14,80,66,96,17,53,14,75,115,96,45,14,76,99,101,46,107,123,49,17,29,14,37,13,57,59,20,15,7,16,19,28,104,94,23,32,56,92,80,86,86,74,94,44,84,89,34,41,34,30,31,25,31,30,26,33,45,53,37,33,79,81,41,45,209,15,38,39,23,32,42,67,32,108,17,22,35,17,42,43,48,48,38,47,42,30,21,45,35,32,33,51,31,22,48,67,17,49,13,57,36,57,68,79,73,62,36,17,29,13,54,34,47,52,57,57,61,178,96,21,17,29,13,48,42,13,56,76,13,59,68,61,13,58,105,13,46,84,13,39,45,72,129,107,74,84,88,80,104,53,77,90,79,82,94,84,64,58,17,57,65,92,49,35,17,71,122,42,37,47,17,56,50,53,30,21,127,42,44,21,48,65,45,39,30,21,17,111,54,13,58,47,46,45,56,66,76,72,65,44,25,30,50,58,70,70,65,44,25,30,53,65,73,93,25,30,53,69,59,47,63,89,57,73,65,38,30,28,65,17,29,13,42,43,127,13,34,92,83,13,32,92,58,13,56,83,70,90,57,87,58,17,33,13,40,45,49,43,42,35,42,43,13,42,45,49,43,42,35,42,43,13,9,63,59,20,15,7,16,19,28,46,23,32,100,100,70,74,71,71,95,68,83,83,79,22,31,54,80,76,59,20,15,7,16,19,28,32,31,89,55,42,17,13,39,32,63,47,17,146,13,68,160,138,93,113,155,138,42,108,111,14,139,146,139,146,93,88,72,109,85,129,194,74,213,72,43,39,123,149,179,146,188,86,185,85,137,153,152,187,55,76,58,178,170,172,205,207,54,77,53,43,44,181,173,180,189,181,188,175,90,174,42,191,161,46,155,158,179,163,156,185,179,135,79,145,162,115,34,37,162,191,207,161,281,208,199,145,163,162,150,30,180,186,34,227,39,163,176,207,166,165,44,84,181,65,61,46,42,45,44,41,43,44,41,48,44,47,44,47,45,44,47,46,41,44,42,42,43,43,82,203,158,138,37,137,136,51,145,204,73,192,47,190,215,188,193,386,29,158,121,52,55,46,40,43,44,42,44,44,45,47,41,41,46,43,77,180,201,162,14,58,41,149,202,217,263,224,78,255,270,73,199,214,85,211,214,229,150,226,229,82,212,215,156,227,230,127,210,213,179,210,213,87,200,234,87,267,250,282,265,66,250,253,265,268,64,212,227,65,210,209,225,224,223,238,56,278,51,113,277,76,305,212,227,237,252,202,198,14,143,42,65,136,330,351,357,128,58,192,187,132,59,153,119,102,253,165,200,14,157,9,45,11,74,83,78,10,41,54,56,104,65,81,11,71,59,176,9,41,56,9,36,113,9,56,51,28,58,50,39,17,13,42,9,11,20,11,56,113,9,46,145,9,47,144,9,58,146,9,76,179,9,57,147,9,40,71,9,43,42,9,45,47,48,90,53,47,44,47,47,45,41,48,32,78,46,41,32,52,51,32,55,38,32,48,37,32,51,33,32,41,42,51,49,137,56,46,55,32,45,248,97,46,135,13,25,9,48,47,9,54,53,9,51,55,67,62,54,64,51,9,56,82,71,9,63,82,9,49,81,68,50,9,120,57,125,9,51,125,9,52,124,9,42,59,9,48,63,9,116,43,61,184,28,13,32,37,41,55,43,32,13,25,9,49,47,51,49,47,61,32,43,43,51,32,45,50,43,45,58,65,72,32,140,32,13,25,9,52,51,9,76,139,9,60,77,9,61,32,48,47,52,47,43,49,49,44,49,44,32,13,25,9,51,54,48,49,47,43,43,47,32,39,72,109,140,36,21,17,13,25,9,48,47,43,47,44,46,46,46,44,43,45,23,46,32,43,32,24,33,13,9,43,82,9,49,73,9,40,72,9,54,75,9,51,73,9,54,77,9,52,75,9,50,72,9,47,69,9,56,98,9,47,65,9,60,123,9,50,133,9,57,75,9,49,71,9,58,80,9,72,85,9,61,51,51,71,67,9,49,47,35,13,53,9,60,91,105,9,46,75,9,47,76,9,47,145,9,57,77,9,70,100,29,13,34,45,55,52,48,47,52,51,50,45,49,47,45,50,46,45,59,32,24,33,13,9,71,112,101,9,50,82,9,43,139,9,57,122,9,53,76,9,58,57,9,55,47,43,44,46,46,43,46,32,24,33,13,9,54,59,59,45,90,167,80,37,32,17,51,76,13,112,96,40,65,64,13,68,60,29,13,78,78,94,18,32,25,29,20,74,56,65,13,71,63,13,77,79,86,62,60,55,56,56,70,56,65,58,75,55,9,55,123,9,59,20,15,7,16,19,28,50,77,9,55,26,32,46,73,13,33,9,11,74,50,11,53,25,66,51,13,66,51,13,58,51,13,58,51,13,24,9,40,38,39,112,29,37,43,85,48,88,125,47,58,25,21,41,39,21,17,14,9,34,54,61,88,73,74,39,101,89,38,94,43,68,53,56,58,25,111,21,17,13,23,9,50,140,49,9,28,42,51,26,35,88,92,108,98,112,102,50,99,61,56,62,57,66,61,10,87,92,97,10,19,93,63,92,61,95,56,105,108,65,70,90,9,63,26,72,44,44,13,25,9,68,67,138,85,9,59,20,15,7,16,19,28,58,71,39,73,81,19,13,37,9,69,22,31,61,42,69,79,29,26,13,131,132,103,47,72,74,92,34,13,134,136,96,78,34,13,24,59,69,64,40,14,86,9,49,73,111,134,9,57,76,114,32,26,13,54,82,15,85,90,84,53,18,24,24,16,18,62,15,29,104,29,14,103,9,63,76,117,147,9,63,60,24,23,43,14,87,9,51,73,52,24,75,25,14,88,9,53,11,115,100,11,90,72,115,32,26,9,11,83,52,10,40,14,21,25,12,14,111,32,11,57,31,29,33,50,58,41,13,27,9,67,96,46,34,48,52,71,49,43,121,42,37,43,74,43,80,13,25,9,61,55,36,30,145,32,49,33,38,21,17,25,13,9,74,86,69,11,75,33,40,13,50,31,140,73,33,40,13,26,33,107,86,30,49,102,37,21,46,47,104,37,21,113,68,36,21,28,17,14,41,29,13,9,11,113,93,64,11,81,59,89,29,13,86,34,88,41,13,129,93,58,41,13,38,9,10,25,19,20,23,71,60,79,55,92,88,91,81,38,11,65,48,22,23,97,81,26,17,100,46,17,36,26,29,13,21,9,126,57,321,32,9,75,80,24,26,13,24,95,29,14,76,9,84,113,77,573,9,160,77,59,103,30,31,39,33,65,27,40,48,114,53,47,150,17,118,13,49,162,61,41,80,36,265,67,80,21,17,13,88,97,106,34,28,182,54,17,13,25,30,68,51,56,71,78,62,15,119,76,120,68,52,21,17,22,92,101,137,79,73,72,98,81,21,17,40,13,140,115,61,74,60,89,28,144,108,22,17,69,98,70,96,126,21,139,135,131,104,21,26,146,21,17,22,79,17,13,60,62,50,17,36,82,91,88,85,76,76,53,49,58,25,36,55,45,65,35,45,25,17,13,85,24,92,39,135,36,45,32,58,60,58,73,25,102,22,108,88,31,28,38,38,31,25,37,36,93,137,22,72,39,72,112,96,123,25,21,18,64,35,122,53,54,54,50,52,46,41,49,55,53,65,65,69,75,49,29,34,55,56,74,45,29,34,21,133,49,118,96,17,42,113,144,17,13,114,109,27,17,108,67,27,27,30,31,69,125,78,18,93,90,51,99,99,56,180,37,90,19,84,110,74,86,30,21,97,17,180,67,102,67,43,151,21,121,66,85,162,74,74,25,21,82,93,60,65,25,52,21,53,52,21,114,95,78,70,56,25,66,70,71,29,100,34,25,103,21,113,52,21,44,132,79,62,62,105,108,56,25,21,132,167,154,44,139,76,21,48,17,102,59,76,74,52,61,108,118,84,66,101,38,29,79,59,111,115,73,89,127,130,53,45,96,33,38,128,181,33,171,29,34,131,115,29,25,21,64,60,45,195,21,81,147,80,110,116,63,60,128,29,25,94,118,53,134,131,53,134,25,21,17,129,91,96,44,57,116,21,50,102,106,41,87,107,62,132,95,45,62,121,140,102,29,34,79,29,25,21,58,117,21,38,112,146,45,59,61,157,251,25,115,95,126,63,77,25,21,48,46,17,13,111,81,50,89,46,60,48,137,29,60,34,61,75,61,29,60,34,51,59,34,21,17,47,13,85,81,50,108,103,107,21,17,13,95,62,46,37,41,106,104,93,21,26,36,160,21,17,38,40,57,34,13,162,119,56,105,46,28,112,67,60,122,49,49,57,111,99,97,126,37,42,55,93,96,122,97,125,37,42,40,81,29,25,167,159,23,17,22,117,17,88,163,103,17,34,13,69,83,32,81,83,61,17,22,83,99,165,98,21,17,13,76,31,59,92,77,21,26,33,21,17,30,13,83,113,13,110,75,41,96,94,44,47,55,94,21,27,17,31,48,68,76,66,79,17,38,73,17,39,27,84,168,35,42,35,32,17,52,80,78,90,65,56,141,88,45,94,116,21,26,96,21,17,13,75,62,88,82,81,188,33,21,113,49,158,93,21,17,13,15,72,69,15,69,30,100,26,17,34,35,17,26,13,15,72,70,15,72,85,84,47,52,52,104,25,50,21,17,51,99,17,13,90,88,84,87,13,47,26,83,17,13,57,37,88,17,13,48,27,83,17,13,109,73,38,60,45,44,46,69,92,98,84,25,30,46,95,30,47,104,109,138,113,48,25,95,77,46,146,82,25,30,45,104,113,48,25,76,113,104,84,25,30,58,61,17,36,13,9,23,32,56,66,70,44,11,112,11,100,110,69,22,47,66,80,33,13,55,159,93,69,131,112,111,138,98,117,18,35,18,116,18,33,18,84,18,112,18,137,9,75,50,32,43,51,50,49,47,45,55,54,21,56,55,21,26,46,45,54,54,21,55,55,21,26,45,54,54,21,26,43,51,13,35,9,50,27,45,52,44,53,45,52,13,35,9,26,36,38,61,71,152,39,93,80,13,47,69,66,39,47,49,17,66,92,17,22,62,17,85,13,18,42,76,65,49,51,17,72,87,71,17,22,71,17,97,13,9,63,59,20,15,7,16,19,28,26,35,22,31,57,38,15,51,67,72,14,53,18,29,17,18,38,14,128,121,15,99,104,56,67,17,71,40,66,29,17,129,59,128,109,98,17,38,55,17,68,115,130,29,17,93,83,103,30,67,73,17,127,138,124,65,49,21,17,99,84,93,139,17,132,13,58,93,99,116,55,55,144,17,94,164,35,34,17,114,99,13,68,87,78,39,37,67,53,30,21,30,17,88,93,13,131,125,102,29,45,33,169,96,137,80,103,124,92,205,21,94,69,37,106,133,65,49,21,39,45,17,86,51,13,98,93,159,13,72,50,51,13,66,155,23,44,116,70,100,32,52,55,65,132,21,114,107,118,47,98,134,114,26,60,108,38,31,30,38,30,28,26,109,112,76,115,116,167,128,69,72,25,92,149,69,72,25,21,147,127,63,21,108,129,129,135,127,22,118,69,139,37,44,151,17,70,13,80,74,97,74,13,14,81,15,98,134,68,71,147,17,22,52,44,17,13,14,135,15,133,104,143,62,117,87,44,44,17,111,13,30,39,72,76,78,54,115,86,33,43,17,65,74,45,17,71,117,106,32,27,24,42,32,25,105,104,17,39,13,69,88,13,117,93,33,17,79,137,76,13,132,111,94,99,63,109,67,17,29,13,120,114,14,24,27,29,14,109,46,14,23,57,23,53,20,64,17,14,110,115,112,74,112,118,115,52,67,21,26,111,69,26,41,94,103,108,110,113,100,21,17,29,13,122,108,55,42,37,114,77,37,37,77,43,77,74,118,64,36,21,17,29,13,114,58,120,13,64,63,74,13,67,36,49,59,59,56,58,54,47,53,55,54,49,53,51,49,47,51,54,88,47,56,52,51,56,56,52,60,49,50,86,59,58,48,48,54,56,55,54,17,40,135,17,13,65,60,63,87,103,21,17,28,13,86,28,44,17,143,13,99,92,69,44,17,73,37,61,39,113,58,42,25,21,165,17,40,13,88,67,39,128,164,89,54,63,33,21,95,97,64,117,21,92,17,40,13,108,99,124,13,15,94,81,22,48,75,15,102,34,31,63,61,57,30,21,45,79,21,26,33,21,32,17,64,13,110,90,110,13,86,96,69,38,55,52,51,56,51,56,58,41,47,59,47,46,45,45,49,46,59,60,50,49,53,52,51,57,55,56,53,54,57,49,51,49,54,45,48,51,53,60,51,48,48,51,51,55,36,55,54,52,172,71,25,134,140,138,70,25,73,40,25,30,47,50,50,50,48,47,55,54,53,47,47,47,61,49,92,71,25,61,53,68,53,70,107,46,73,47,74,52,45,103,41,25,30,17,104,39,13,68,65,31,51,50,53,50,63,28,37,17,13,15,91,129,15,94,68,106,99,13,72,58,75,90,87,45,13,88,59,20,15,7,16,20,31,11,84,98,11,28,33,56,26,9,33,53,26,9,28,33,56,26,9,33,53,26,9,32,41,62,80,43,83,73,15,86,15,46,15,76,15,65,54,15,84,112,33,42,61,82,70,102,42,82,115,60,101,9,58,26,37,44,52,24,29,17,45,13,25,9,39,61,63,10,23,32,60,90,96,56,44,76,144,9,90,23,78,66,70,49,13,72,57,83,76,13,68,84,105,96,17,13,48,50,38,29,13,90,82,46,72,30,29,31,28,81,51,98,13,111,37,118,58,248,30,125,17,13,97,79,54,148,40,105,119,9,118,86,31,68,72,97,91,81,31,86,91,53,91,73,147,34,25,104,112,67,96,59,133,25,21,17,13,29,9,68,19,31,68,72,27,13,82,147,163,30,35,17,27,13,107,39,44,13,90,150,24,22,9,11,109,11,47,198,9,60,111,9,68,56,88,69,57,51,34,35,139,39,13,60,141,14,57,65,28,44,14,77,75,81,35,39,46,47,40,66,23,17,14,80,101,14,74,79,14,114,87,110,96,14,109,110,126,78,43,102,80,73,111,17,14,86,165,14,106,110,93,87,87,14,123,110,93,148,87,14,99,57,149,14,100,78,121,14,116,78,123,14,109,57,154,14,110,78,131,14,96,133,14,126,78,133,14,110,94,104,14,82,75,84,14,105,107,83,14,97,57,85,14,99,57,95,14,110,78,14,112,79,14,105,74,31,74,157,18,41,73,17,22,72,17,14,104,57,25,68,17,22,76,17,14,122,78,57,181,14,102,57,94,14,100,113,14,120,90,109,83,103,89,86,95,106,85,156,78,14,97,56,33,77,43,54,108,90,27,21,17,107,75,138,14,83,72,114,19,61,134,107,14,93,186,14,91,97,113,64,31,44,36,23,133,14,96,151,14,95,111,14,83,81,14,148,97,23,28,46,93,35,54,82,106,60,21,17,22,171,17,83,28,14,101,115,64,97,14,104,98,142,114,14,115,74,128,17,106,44,17,50,76,17,124,44,17,56,94,17,112,14,109,78,61,123,17,22,84,17,14,123,165,65,149,17,22,87,17,14,107,76,60,149,17,22,82,17,14,101,111,14,100,89,61,169,49,19,14,101,74,14,102,74,14,102,23,185,161,14,15,123,61,15,102,32,36,90,40,93,69,41,21,66,215,52,56,21,65,76,41,21,39,17,35,14,97,23,56,187,104,14,113,25,51,41,124,86,112,108,122,86,58,51,148,126,142,24,45,84,58,18,14,98,131,119,14,93,89,119,14,98,83,14,95,100,121,14,99,59,70,106,91,130,21,17,80,35,14,94,74,195,14,87,36,52,53,96,55,48,45,48,54,71,48,47,45,34,28,154,65,17,14,84,44,60,102,95,33,59,188,60,21,26,58,131,114,111,21,61,68,217,188,21,17,22,166,107,17,14,88,82,14,128,69,36,91,17,22,213,17,14,15,133,84,90,15,115,133,38,64,27,17,66,32,27,17,41,58,54,52,81,69,35,34,68,73,93,105,60,31,31,31,118,31,53,32,31,65,110,91,140,96,21,17,22,64,108,43,46,100,71,43,57,54,156,54,78,56,21,26,90,101,137,122,156,98,21,81,87,45,21,40,122,110,67,175,105,131,62,112,40,25,151,21,26,141,21,17,14,96,128,14,89,33,76,67,118,84,80,110,92,89,107,25,43,100,25,21,19,14,76,33,150,60,154,47,103,25,30,111,25,21,18,34,80,80,47,17,61,58,95,47,31,140,53,175,21,19,14,15,82,45,128,96,15,70,48,61,137,76,110,137,17,31,14,94,101,14,33,13,52,42,58,30,13,82,31,37,43,53,29,9,52,46,33,13,34,51,42,42,150,186,36,17,46,121,44,119,13,9,79,68,206,9,61,84,86,131,9,46,84,9,90,134,9,54,26,35,100,126,65,54,153,154,49,128,139,27,22,98,69,36,21,78,71,111,56,122,45,25,66,23,124,19,13,80,101,142,130,13,58,109,125,193,142,86,82,13,70,100,23,56,30,17,54,39,17,99,149,78,206,42,112,201,56,81,47,13,50,117,87,115,29,41,98,66,33,189,42,139,17,28,31,67,75,21,18,205,51,13,63,78,60,66,34,37,43,49,55,84,85,13,68,50,46,59,74,125,13,24,9,50,30,52,9,46,154,58,91,71,27,9,68,81,76,27,31,13,43,103,75,29,9,40,42,54,52,27,56,17,14,51,27,56,17,14,58,28,57,17,14,57,28,57,17,14,53,27,56,17,14,52,27,56,17,14,57,44,64,30,81,28,21,48,47,17,13,31,32,61,13,38,39,13,38,39,61,13,39,40,61,13,42,43,61,13,48,49,61,13,40,41,61,13,39,40,61,13,36,37,61,13,44,45,61,13,42,43,61,13,39,40,13,39,40,13,39,40,13,32,40,13,34,35,61,13,38,39,60,13,35,43,13,32,40,13,34,42,13,34,42,13,40,48,13,30,31,42,13,20,51,49,61,59,53,51,29,43,43,45,51,63,47,45,39,55,41,37,47,47,33,35,43,39,33,37,37,49,88,94,28,14,9,50,66,29,80,34,51,40,17,22,26,17,13,29,39,31,44,39,32,13,46,40,42,39,13,68,24,32,82,28,30,77,41,68,62,82,33,21,17,89,78,29,17,34,74,56,30,88,73,95,114,62,30,17,51,52,123,98,59,30,17,75,13,30,49,39,13,28,45,45,61,51,35,144,39,25,21,17,13,9,68,186,9,80,45,157,141,9,30,41,88,36,47,54,62,66,100,107,108,90,80,25,30,93,25,30,21,53,59,183,112,63,178,27,30,50,50,129,44,66,25,30,93,25,30,55,98,30,49,89,30,51,55,65,83,25,30,93,25,30,51,71,30,49,118,30,50,116,30,52,55,171,30,28,43,91,66,25,95,82,25,112,93,25,30,66,25,17,13,70,77,50,46,73,17,22,56,71,93,78,108,136,82,21,26,75,21,17,13,69,39,79,56,54,111,112,17,22,59,53,51,87,64,17,13,96,41,60,99,187,27,17,55,85,27,17,39,34,50,50,106,30,48,64,30,53,167,30,28,49,17,13,58,101,74,65,106,84,80,86,9,46,83,120,61,42,46,54,23,13,125,90,85,42,45,71,177,15,9,62,20,15,7,16,16,25,51,47,82,153,9,84,104,157,9,58,115,178,9,80,110,179,9,39,73,35,57,13,29,73,39,69,56,17,13,9,50,43,57,9,64,76,53,44,92,45,55,46,48,26,13,64,34,132,139,14,9,36,54,80,153,9,36,39,50,107,9,42,63,60,9,70,63,68,9,62,55,30,183,100,9,40,58,82,34,57,29,17,13,9,48,37,107,285,9,50,20,15,7,16,17,28,76,79,37,108,51,42,9,55,50,92,23,106,186,58,16,9,67,73,55,79,9,61,53,20,15,7,16,16,25,64,217,33,35,105,85,44,37,144,213,14,28,125,68,32,62,17,18,11,67,58,129,131,85,9,48,42,33,157,9,50,20,15,7,16,16,25,33,25,224,222,14,89,52,93,79,46,45,77,51,94,19,163,14,11,50,20,15,7,16,16,25,38,26,92,67,66,10,33,28,35,79,178,175,220,82,28,27,17,108,61,14,51,52,53,89,204,80,32,31,21,77,82,19,14,11,73,124,176,9,90,36,73,27,17,13,133,266,84,9,67,22,33,70,104,98,41,63,101,34,17,221,15,24,9,59,34,117,128,41,43,161,14,9,50,20,15,7,16,16,25,38,89,47,64,69,10,40,104,128,129,71,78,108,102,60,77,148,144,127,99,110,92,30,50,33,28,35,79,178,118,34,27,17,63,108,35,97,88,19,14,51,126,63,53,89,134,38,31,21,77,128,121,19,14,11,103,80,29,95,78,9,114,122,127,40,68,82,55,108,23,94,101,21,19,93,122,163,131,64,13,9,106,150,155,9,95,71,84,55,117,128,41,43,145,15,9,105,89,31,23,13,58,29,50,69,30,38,17,96,96,97,57,39,47,71,81,36,70,42,38,17,96,147,135,19,38,42,38,17,60,56,46,19,14,82,40,37,13,36,43,57,14,9,77,116,92,13,46,74,13,52,35,41,98,38,63,65,53,50,37,25,59,21,17,85,13,9,97,101,76,30,73,77,82,15,76,90,89,88,86,86,90,51,73,9,46,104,117,102,80,75,78,15,9,110,55,104,38,69,71,86,37,25,21,63,121,73,17,13,111,92,94,82,31,21,17,196,107,13,129,74,76,82,31,21,17,160,89,13,18,136,88,95,31,21,17,118,13,9,88,83,117,91,13,9,50,20,15,7,16,16,25,38,26,51,130,10,33,35,79,170,41,183,17,14,28,51,46,173,14,11,82,63,73,96,73,15,31,90,38,145,81,13,54,57,140,27,17,82,13,74,69,85,15,34,55,86,27,17,91,13,9,82,73,99,13,9,54,32,41,54,55,50,59,32,24,33,13,9,78,71,145,30,76,9,66,32,41,48,41,32,24,33,13,9,76,53,29,13,72,162,13,73,51,65,9,50,20,15,7,16,16,25,48,26,192,10,33,35,91,153,41,188,17,14,28,51,46,156,14,11,73,63,42,23,13,43,69,75,102,13,9,50,20,15,7,16,16,25,55,149,33,35,96,153,165,14,28,183,11,61,63,67,90,143,85,9,50,20,15,7,16,16,25,49,103,33,35,90,153,169,14,28,183,11,61,63,37,41,131,13,59,111,85,103,68,204,70,9,50,20,15,7,16,16,25,74,26,162,176,201,10,33,35,48,67,94,36,37,17,140,161,14,51,11,58,23,102,32,37,13,83,87,66,56,223,37,13,62,9,81,60,112,88,9,11,66,58,11,54,19,29,33,13,127,89,13,98,95,13,61,81,131,37,48,37,70,29,37,65,42,63,13,107,69,85,34,37,129,146,33,37,24,125,39,18,13,29,9,65,74,38,45,96,162,71,31,70,17,13,9,50,20,15,7,16,16,25,48,92,33,35,48,82,26,27,137,180,14,28,125,65,25,55,18,11,44,56,87,127,9,56,71,9,82,39,53,103,56,9,54,157,43,84,46,87,17,124,31,133,78,39,38,63,38,110,21,17,31,132,33,65,35,106,17,13,18,181,137,97,13,9,46,56,62,60,60,9,43,32,44,48,84,49,60,52,57,49,60,49,60,49,60,45,61,24,108,65,35,13,9,51,161,9,51,156,9,51,95,9,51,19,190,101,220,9,48,61,137,70,107,190,9,52,37,42,49,53,62,17,46,45,34,35,34,34,50,30,33,32,35,69,30,17,57,86,114,17,22,81,17,13,66,9,53,62,38,37,110,159,39,184,64,34,9,50,20,15,7,16,16,25,48,113,33,35,48,87,172,19,189,14,28,124,155,18,11,97,102,126,28,33,13,62,60,118,13,65,91,40,37,17,61,125,64,84,17,22,80,17,13,60,40,82,37,67,79,60,87,35,25,96,44,85,25,23,17,81,37,62,81,74,73,67,82,81,102,94,79,118,52,93,33,29,25,30,126,48,89,29,25,23,17,38,68,118,96,88,57,103,40,57,21,26,81,37,111,44,47,134,44,59,66,44,41,27,21,17,64,116,96,37,108,39,21,68,78,74,87,39,21,133,148,89,61,42,131,72,39,21,33,150,93,107,35,101,25,39,21,44,76,90,113,107,64,29,117,120,29,59,66,47,38,27,21,26,75,58,43,78,43,198,100,43,39,21,92,64,93,28,98,21,96,141,177,130,95,54,21,96,67,38,59,73,58,25,48,30,118,25,136,177,111,95,54,21,17,13,63,51,107,37,17,80,39,177,17,102,108,93,89,27,13,63,79,32,163,17,88,108,93,89,27,13,9,58,103,9,45,24,29,73,28,25,9,77,54,33,13,51,48,32,13,51,143,150,35,13,29,9,50,20,15,7,16,16,25,45,90,39,33,35,48,43,199,192,14,28,226,11,33,42,88,96,64,81,63,78,34,152,103,121,71,13,18,144,13,37,23,13,45,66,104,110,72,23,13,207,161,43,23,13,85,113,59,90,87,55,71,52,111,42,96,25,92,21,56,53,42,96,25,21,19,34,45,17,14,107,61,56,48,41,13,9,72,25,60,80,34,15,23,9,10,115,10,66,29,36,13,56,61,78,69,54,17,84,81,69,158,49,17,67,69,110,17,22,49,17,15,44,9,72,43,29,88,81,78,9,112,110,50,70,42,9,99,65,60,33,13,124,131,67,84,75,79,66,71,86,67,21,76,86,67,21,17,22,63,17,13,9,58,39,29,87,9,10,85,127,94,10,80,73,57,64,45,49,27,17,63,29,63,80,80,75,136,63,45,60,58,160,95,133,78,96,90,88,69,67,21,117,153,53,84,111,129,89,86,71,73,25,30,78,97,73,25,21,17,15,121,132,76,101,111,162,21,17,53,71,101,37,76,21,17,15,9,60,89,123,53,9,30,40,9,31,40,33,9,65,93,11,151,100,11,114,86,160,13,87,128,13,89,130,13,54,130,13,71,85,100,142,13,32,9,46,37,52,28,110,63,68,13,25,9,53,111,57,9,84,39,152,148,147,43,74,61,65,75,90,90,77,25,23,17,22,154,17,105,110,111,63,13,42,9,126,32,167,34,77,111,61,93,176,135,158,45,13,42,105,67,83,134,52,58,36,13,30,9,11,119,100,11,103,74,69,152,13,107,166,177,28,65,134,59,165,28,65,71,71,112,127,9,11,119,100,11,102,76,69,152,13,74,107,172,177,28,65,134,59,146,28,65,71,183,112,127,9,11,119,100,11,114,78,95,107,13,125,76,36,13,75,163,167,28,65,134,59,144,28,65,72,9,11,125,11,137,63,67,38,80,17,71,13,158,9,111,68,88,77,13,82,92,174,13,20,51,83,124,82,34,14,9,77,55,86,177,58,26,13,74,9,94,11,149,100,70,11,123,19,32,43,81,26,56,74,40,75,30,21,212,60,157,21,75,101,49,88,44,21,71,252,46,117,21,47,50,47,45,189,89,47,49,56,90,51,66,59,116,190,33,38,222,226,33,29,110,189,34,80,113,112,90,98,117,79,113,98,91,75,73,34,143,34,80,112,94,102,91,91,79,84,110,95,83,88,95,83,79,75,73,34,112,52,29,34,64,29,25,64,105,116,21,26,107,174,42,59,53,25,43,140,69,188,58,133,33,60,29,34,184,29,25,30,48,25,21,17,24,160,40,13,33,9,71,65,126,9,54,81,54,9,86,25,74,39,49,42,189,56,102,25,97,170,25,30,314,25,21,17,22,63,17,13,120,68,317,13,23,9,11,150,100,11,133,33,64,48,114,59,49,31,21,17,52,49,17,15,31,9,59,27,21,57,53,60,64,17,13,49,54,13,97,59,13,69,54,88,33,13,24,65,49,61,84,56,34,73,19,72,13,55,63,53,30,68,17,96,76,13,38,97,13,44,60,13,9,50,31,28,13,49,52,13,70,9,59,49,136,9,77,66,49,118,9,52,45,38,9,53,124,9,59,80,37,49,13,47,9,50,43,38,9,49,59,9,53,63,9,56,120,9,50,20,15,7,16,16,25,33,108,48,114,93,227,56,95,55,140,25,21,19,94,133,14,11,99,80,45,149,88,29,17,79,42,59,165,30,50,103,169,25,30,17,13,9,86,95,105,81,65,54,36,122,115,39,138,34,173,17,13,120,144,39,169,102,13,58,148,71,15,49,9,73,35,64,97,122,103,85,81,17,15,23,9,71,81,38,27,17,42,110,15,9,57,58,155,45,138,17,41,15,9,144,37,49,124,33,53,58,46,56,106,104,180,29,41,25,58,73,172,25,21,17,32,24,33,13,9,122,60,36,82,69,34,86,74,43,52,21,104,43,130,21,161,43,155,21,17,103,176,15,30,100,130,39,52,48,183,21,19,42,13,9,78,113,32,52,53,101,72,45,94,99,23,17,41,84,123,24,121,13,9,108,65,55,29,13,71,76,99,66,17,22,132,142,40,38,100,46,21,26,137,36,21,17,13,87,77,13,25,9,11,69,117,11,76,81,36,47,47,133,36,63,52,41,54,165,53,198,28,110,17,15,53,9,79,71,49,43,39,18,33,43,18,32,81,114,18,86,13,18,82,13,9,58,101,50,71,76,107,98,109,158,9,48,86,9,51,155,9,76,69,38,156,154,183,32,64,91,25,53,13,18,134,263,13,9,105,92,77,36,52,55,73,94,45,21,17,32,45,79,107,47,69,104,24,41,13,36,61,151,13,9,74,171,35,13,42,111,111,44,123,75,72,143,57,39,17,13,9,11,53,92,114,11,108,32,54,88,146,39,102,23,43,137,21,17,118,53,22,38,40,22,130,45,134,127,23,17,41,119,24,119,13,9,11,45,16,72,73,11,110,63,105,50,75,42,36,94,33,86,105,29,17,40,60,56,53,49,62,210,21,26,155,74,51,79,73,25,199,21,17,22,45,17,13,149,57,196,16,33,80,41,13,189,9,30,52,88,40,13,45,24,9,47,42,88,23,9,11,107,77,11,50,64,25,93,9,41,37,34,56,48,46,56,47,56,24,32,13,9,23,102,149,372,9,100,147,255,9,94,45,133,134,9,58,218,9,51,226,9,75,54,38,37,196,9,68,20,39,56,14,9,50,20,15,7,16,16,25,62,171,33,35,48,93,35,37,146,112,192,14,28,125,64,24,52,17,18,11,52,108,99,83,9,69,53,231,78,9,50,20,15,7,16,16,25,136,46,33,35,87,209,37,191,17,14,28,93,59,89,104,128,86,21,19,13,11,72,106,9,80,35,23,13,54,56,89,79,102,13,18,158,216,44,79,42,41,125,44,100,87,85,19,102,13,9,74,60,53,45,13,186,72,23,179,15,9,50,20,15,7,16,16,25,156,46,33,35,87,87,116,78,19,37,201,17,14,28,93,89,108,84,19,13,11,74,108,9,82,122,23,13,62,97,108,90,66,137,134,42,71,56,81,45,13,9,50,20,15,7,16,16,25,53,133,33,35,94,73,59,28,37,17,67,129,189,14,28,125,58,27,55,17,17,11,43,63,41,93,61,24,87,53,45,59,18,13,29,9,52,109,87,138,36,51,36,9,50,20,15,7,16,16,25,26,75,133,10,137,33,35,48,73,72,123,210,249,19,14,28,51,57,89,75,94,123,61,140,25,21,19,14,11,44,142,9,57,122,9,129,59,100,87,42,81,86,217,72,121,50,88,13,50,88,13,112,253,50,73,77,38,229,17,13,105,77,34,87,17,22,86,17,13,9,74,83,36,46,83,92,106,9,50,20,15,7,16,16,25,41,45,26,51,66,91,86,56,125,91,131,103,10,33,35,48,166,104,26,37,117,85,112,138,14,34,51,135,130,140,125,14,11,76,116,9,54,105,63,68,36,32,51,45,53,42,174,67,107,48,27,32,13,90,80,118,55,92,179,71,188,26,104,17,13,38,27,69,42,35,46,49,30,49,45,30,49,156,85,59,37,177,25,59,125,116,25,30,196,51,49,170,30,25,30,21,42,159,110,147,45,49,192,214,38,47,124,120,38,50,51,200,135,38,25,30,21,49,49,30,28,99,17,73,127,127,126,130,128,75,106,17,100,97,100,96,101,100,99,96,100,68,74,36,49,48,55,46,22,95,42,49,62,40,21,99,67,21,43,48,21,61,36,17,75,92,17,13,48,85,105,51,74,17,93,47,83,17,53,153,161,64,78,41,19,36,55,163,100,86,172,64,78,45,80,19,38,108,17,13,33,123,13,9,54,26,35,78,84,80,66,84,50,88,99,91,40,26,35,68,70,74,50,163,63,87,91,169,67,117,192,20,53,172,123,14,9,70,121,63,111,92,81,236,9,88,165,208,106,209,9,48,91,86,9,84,23,63,108,34,39,13,197,193,69,102,90,237,17,104,71,215,17,13,9,172,28,63,95,139,15,152,55,99,158,27,17,102,306,321,17,116,42,188,296,21,17,15,26,75,23,281,13,9,149,63,36,46,156,168,118,9,90,57,55,95,51,174,146,135,101,199,124,9,96,104,19,14,45,58,14,45,14,55,54,80,70,67,49,78,91,57,100,108,150,21,17,15,9,79,19,39,51,99,55,72,49,162,95,24,61,13,9,58,27,39,51,125,55,49,49,204,24,61,13,9,133,42,84,42,13,104,134,40,13,90,105,108,116,85,40,13,35,9,108,67,127,148,78,37,17,73,151,224,36,17,60,90,37,89,111,112,96,37,91,113,79,161,131,156,18,37,51,206,17,37,24,48,63,43,70,49,18,15,9,93,125,56,88,37,87,84,70,77,201,17,109,188,17,15,9,56,74,49,29,13,86,90,28,90,29,72,63,45,84,13,94,83,39,132,29,92,32,92,33,13,44,24,9,149,53,63,102,189,51,228,212,46,73,71,167,100,182,74,140,140,91,156,27,49,61,106,51,57,51,46,26,19,15,90,9,155,233,188,9,119,123,87,34,46,40,146,160,13,9,79,77,21,145,70,13,53,33,13,128,154,114,112,13,18,96,13,130,166,9,87,141,209,9,88,32,23,94,100,32,13,54,82,280,15,9,72,106,85,131,116,231,99,13,35,9,103,97,101,103,97,101,19,33,97,101,65,93,72,13,25,9,44,122,9,80,72,125,72,125,35,9,54,19,111,51,57,27,33,61,44,180,67,214,169,9,47,64,100,48,33,124,38,118,203,28,9,11,128,82,11,96,33,57,61,130,112,65,13,9,46,87,55,70,39,13,111,67,33,39,44,39,55,127,21,44,42,42,42,42,42,40,70,45,42,44,123,24,105,13,9,86,153,51,63,94,107,130,85,67,208,93,51,173,16,99,9,88,51,115,24,33,87,109,33,105,9,50,72,9,83,44,174,71,79,40,17,13,36,9,75,56,149,126,166,9,96,160,19,153,103,66,98,126,95,139,15,110,104,164,125,59,367,17,13,152,55,65,67,102,259,128,17,51,127,124,130,17,15,47,9,96,93,52,100,96,89,84,13,102,56,23,79,82,39,13,90,90,38,83,39,113,110,44,17,13,80,74,79,9,139,21,89,150,15,138,9,145,31,42,68,126,45,77,142,45,191,303,87,57,100,94,17,38,155,86,136,135,203,186,57,87,78,17,47,80,130,81,149,131,17,24,94,13,9,62,23,81,292,95,9,94,80,116,44,47,54,156,73,174,149,132,25,30,94,25,48,21,26,83,76,62,21,44,58,44,47,65,51,55,84,44,24,65,13,56,104,48,97,75,98,82,84,98,95,73,112,25,92,49,86,105,29,25,21,17,13,9,110,19,65,36,86,17,99,55,99,17,23,13,224,171,111,110,108,109,108,96,139,32,118,145,13,38,207,148,190,106,55,94,96,94,90,31,108,117,21,17,125,106,55,121,21,17,22,47,90,51,98,25,30,184,25,21,17,13,38,98,70,121,65,99,21,17,13,85,112,53,105,17,22,118,17,13,9,65,77,76,9,74,77,108,9,72,67,87,9,36,49,54,9,116,95,27,131,131,224,73,119,83,75,13,38,85,63,46,200,57,46,111,153,48,65,13,53,9,117,95,27,67,117,131,39,123,26,36,138,17,149,65,13,44,38,119,65,13,53,9,83,54,79,122,48,162,31,9,48,47,119,9,87,136,9,78,93,90,25,40,55,62,58,38,44,17,13,18,41,13,55,48,62,30,55,44,50,21,32,17,43,13,58,89,9,84,50,20,15,7,16,16,25,15,44,56,62,26,124,138,152,125,133,141,154,153,140,10,41,23,132,67,40,86,14,148,67,40,85,14,23,145,70,43,93,14,161,70,43,75,14,23,140,67,40,86,14,160,67,40,86,14,23,159,67,40,93,14,23,131,70,43,93,14,147,70,43,93,14,16,33,35,89,71,56,26,41,119,162,24,117,18,14,69,51,89,61,55,64,31,21,67,19,13,11,74,32,134,150,161,142,162,95,133,149,147,163,98,24,73,13,9,78,78,48,147,23,13,68,73,77,120,71,53,71,146,122,104,9,81,78,48,103,23,13,170,55,71,9,51,32,43,51,49,43,43,32,41,80,24,33,13,9,65,63,71,41,34,56,15,86,32,9,50,20,15,7,16,16,25,60,26,102,10,33,35,28,48,108,83,154,204,14,51,203,13,11,67,81,121,82,114,96,9,63,105,9,50,20,15,7,16,16,25,38,119,33,35,79,100,31,87,95,19,162,14,28,125,91,18,11,62,63,34,33,81,78,33,149,116,35,130,50,118,112,41,21,53,58,31,57,21,68,125,17,22,64,153,110,68,68,104,17,13,9,50,20,15,7,16,16,25,51,26,164,126,10,33,35,92,73,83,141,202,14,27,11,55,63,106,9,66,36,23,13,54,36,32,166,68,39,17,69,35,17,51,13,334,47,23,13,71,9,50,20,15,7,16,16,25,34,26,83,82,66,69,71,91,86,81,139,155,39,62,25,67,10,33,35,48,83,87,26,37,77,91,154,201,14,28,125,78,91,25,99,18,11,63,65,32,27,62,37,103,83,88,43,33,59,32,80,112,82,60,80,17,105,13,162,75,103,13,75,70,65,107,17,13,76,107,86,124,70,118,17,13,73,103,76,80,100,13,130,76,110,98,31,124,17,13,18,62,50,78,139,13,112,9,79,60,105,63,104,99,17,22,175,17,13,18,95,13,9,63,26,46,46,13,41,43,13,42,44,13,25,9,101,97,33,181,32,33,82,9,50,20,15,7,16,16,25,41,62,90,68,26,107,67,91,10,24,33,94,86,46,33,35,112,82,138,91,26,37,71,281,17,22,110,17,14,125,103,26,37,40,49,96,30,62,66,45,143,30,52,66,45,98,30,28,69,17,18,11,84,83,64,57,90,9,79,115,33,71,189,24,45,61,58,46,60,18,13,115,166,137,105,62,49,61,41,50,74,25,49,65,41,50,74,22,17,13,96,78,124,180,151,109,32,53,69,45,54,62,26,21,17,13,29,9,95,33,75,26,80,71,21,135,82,59,84,17,22,52,17,13,62,9,68,67,29,33,89,32,116,129,41,135,101,102,41,80,100,30,41,93,76,122,41,78,104,41,127,13,29,9,58,39,51,41,46,51,50,51,44,149,59,49,42,48,49,37,13,9,81,60,73,102,80,82,58,15,9,111,141,63,52,71,9,83,116,9,84,160,176,9,116,202,238,9,89,162,239,9,50,20,15,7,16,16,25,50,58,58,76,26,68,83,87,95,106,92,50,10,33,35,48,67,124,28,37,17,58,148,192,17,58,138,192,17,53,144,252,17,49,171,203,17,146,14,114,51,69,55,40,53,120,81,103,121,35,25,104,75,25,105,79,25,105,69,25,30,61,81,29,73,101,125,106,53,33,29,25,23,82,85,56,90,78,94,86,57,74,35,31,50,213,85,73,152,29,34,96,145,33,38,115,158,33,29,26,86,51,43,25,23,20,14,11,21,30,52,76,60,70,70,40,77,58,32,27,68,38,112,140,37,112,33,37,149,92,37,76,85,37,227,43,37,141,13,40,33,144,239,43,37,156,13,85,82,87,43,37,126,13,72,162,13,55,33,101,51,48,33,79,93,154,137,182,17,85,55,37,94,187,17,13,80,87,67,33,85,111,106,127,113,37,70,133,65,74,203,13,85,138,96,13,29,9,57,109,9,71,122,80,9,79,145,63,33,13,198,39,33,13,108,153,158,9,107,39,29,74,27,17,64,124,102,13,53,68,42,52,45,36,43,78,31,86,17,22,101,17,13,18,88,40,27,17,111,115,13,9,67,166,9,80,145,40,59,99,252,299,60,31,13,50,197,13,122,27,9,64,25,74,59,126,135,103,13,18,77,153,13,86,9,126,64,38,153,51,39,74,27,82,13,18,97,13,9,135,52,20,70,36,54,26,29,13,23,9,112,64,91,74,38,37,47,57,39,65,38,68,170,109,151,9,71,171,37,33,13,55,48,33,13,40,248,316,50,193,13,27,9,125,120,196,164,106,100,13,18,97,13,44,9,65,75,15,80,90,70,15,93,61,75,15,143,301,83,81,15,9,65,128,222,105,9,59,128,97,59,70,100,65,127,66,140,123,49,36,15,251,104,95,9,69,128,97,86,59,65,133,176,15,27,80,82,45,14,235,9,92,52,41,13,82,114,13,46,58,13,47,60,13,48,48,13,51,133,186,193,13,55,67,13,56,66,13,55,122,13,56,159,13,48,47,13,51,158,101,13,48,65,13,44,87,200,87,19,91,13,63,154,39,45,80,44,45,356,83,13,58,87,95,45,94,91,45,160,13,37,9,36,60,9,44,56,171,9,66,73,40,37,56,40,37,41,87,40,52,63,17,58,80,87,42,56,21,17,13,65,224,15,9,50,20,15,7,16,16,25,44,107,33,35,48,73,142,179,14,28,125,80,18,11,67,96,116,65,9,61,70,43,37,37,13,25,9,50,20,15,7,16,16,25,44,61,120,26,38,108,10,33,35,81,101,79,46,37,106,53,24,258,14,47,51,100,87,50,41,44,56,105,38,90,29,34,25,32,79,21,19,14,11,59,89,9,61,109,37,33,54,74,90,9,76,19,57,92,172,9,50,20,15,7,16,16,25,26,113,122,10,69,33,35,103,73,87,124,19,219,14,28,116,57,89,75,94,119,21,19,14,11,44,73,76,63,57,9,103,76,59,81,87,42,157,112,253,50,9,68,127,73,89,80,9,50,20,15,7,16,16,25,54,128,33,35,48,73,61,27,37,81,147,225,14,28,51,52,89,89,64,31,31,85,86,78,21,19,14,11,72,85,50,9,44,63,53,33,62,60,79,76,225,9,35,78,19,38,31,56,9,50,20,15,7,16,16,25,57,106,33,35,48,73,58,128,159,14,28,125,93,18,11,43,63,121,32,9,53,187,77,9,50,20,15,7,16,16,25,51,26,216,10,33,35,92,81,47,37,17,147,166,14,28,119,81,47,37,17,46,18,11,54,125,9,50,20,15,7,16,16,25,39,94,33,35,80,81,47,37,17,99,63,19,24,139,18,14,28,51,83,85,51,41,21,50,19,13,11,54,122,9,50,20,15,7,16,16,25,33,25,196,194,14,82,75,60,47,37,17,35,71,111,39,97,132,23,187,17,69,91,39,97,93,42,35,93,68,144,97,25,90,23,187,17,64,13,11,50,20,15,7,16,16,25,44,26,164,10,33,35,28,48,73,67,141,173,14,51,166,13,11,54,132,9,47,108,9,50,20,15,7,16,16,25,56,100,33,35,48,52,69,27,37,95,155,182,14,28,125,60,26,93,18,11,44,63,79,66,144,9,80,111,101,47,71,75,73,73,150,104,92,43,46,94,26,17,95,13,9,50,20,15,7,16,16,25,50,115,26,91,205,39,10,33,35,48,52,86,28,37,17,129,230,14,28,125,69,25,64,18,11,53,62,72,142,13,9,52,57,93,54,177,9,50,20,15,7,16,16,25,67,67,26,68,71,10,33,35,55,48,108,186,185,24,239,234,18,14,51,216,13,11,26,24,28,10,46,57,9,83,56,27,47,23,13,132,98,9,50,20,15,7,16,16,25,66,66,26,100,10,33,73,35,85,73,33,59,27,71,71,35,17,33,14,91,51,120,79,61,56,35,136,25,23,72,73,61,134,25,23,20,13,11,47,99,95,134,15,231,9,47,99,49,33,48,50,37,71,37,79,52,17,13,87,56,84,122,15,44,33,287,95,171,15,183,9,43,63,109,53,80,32,115,17,13,29,9,50,20,15,7,16,16,25,41,52,52,66,50,26,75,62,83,77,69,57,63,10,33,35,48,157,55,59,82,51,179,17,60,146,93,17,57,33,136,212,17,43,217,42,225,21,17,104,62,61,42,159,103,26,32,101,96,43,26,21,28,97,77,83,22,17,74,28,97,94,69,22,17,32,60,146,97,198,17,22,92,144,23,42,98,145,21,17,152,36,231,17,30,14,79,51,126,55,59,89,78,44,41,88,34,50,69,45,71,29,55,150,29,34,25,43,91,54,29,68,66,29,77,81,29,79,70,42,33,149,84,33,29,127,38,29,91,97,29,34,150,29,34,25,40,72,81,29,34,32,73,21,19,14,11,67,118,9,49,131,9,67,188,9,34,57,155,9,113,42,121,9,70,122,9,75,110,9,73,94,9,78,48,101,23,56,85,13,61,108,51,83,56,126,25,23,17,13,9,35,40,41,45,32,53,47,57,54,54,40,21,17,13,25,9,127,127,41,112,93,41,64,70,21,19,13,9,133,38,41,124,13,143,122,92,49,13,9,129,58,120,76,148,126,17,109,58,17,13,9,74,71,69,176,9,120,42,34,49,43,69,89,151,34,92,54,91,55,70,61,89,85,90,63,112,94,92,97,83,155,85,91,97,53,33,29,25,21,32,53,90,76,21,32,17,50,45,148,72,43,51,33,43,52,32,24,62,13,9,60,122,145,15,9,61,45,54,89,29,127,48,9,44,88,185,9,50,20,15,7,16,16,25,41,73,33,35,48,130,48,27,191,160,14,28,205,11,74,65,67,80,46,77,69,41,33,34,19,96,13,97,103,41,47,54,63,38,29,34,114,29,35,25,36,50,48,62,31,17,13,47,43,197,78,13,18,54,13,9,37,21,62,36,33,26,29,13,24,9,50,20,15,7,16,16,25,37,60,33,35,48,151,153,14,28,181,11,55,65,80,49,79,131,93,153,68,9,50,20,15,7,16,16,25,47,53,106,33,35,48,52,63,76,26,37,63,60,113,68,93,77,202,17,31,62,152,173,17,14,48,51,102,55,88,69,30,31,67,171,80,19,13,11,79,167,9,52,96,45,99,9,40,56,125,32,44,45,50,51,43,46,42,49,47,41,51,49,43,52,55,51,32,24,33,13,9,50,20,15,7,16,16,25,48,26,141,10,33,35,28,48,73,67,30,27,141,170,14,125,66,29,59,17,11,54,86,9,49,65,62,43,71,45,17,36,13,41,29,13,29,9,50,20,15,7,16,16,25,45,26,123,121,98,10,33,35,48,73,61,27,37,130,182,14,28,92,40,89,64,88,31,65,19,14,11,38,28,33,13,56,35,58,45,13,9,46,65,69,38,23,13,29,46,49,59,26,51,50,112,26,45,116,135,26,24,27,13,36,43,61,14,9,52,75,29,74,110,153,17,13,91,9,50,20,15,7,16,16,25,26,124,114,10,50,33,35,48,126,28,202,17,14,28,125,93,28,82,47,66,21,17,18,11,63,30,28,139,38,45,13,134,63,69,128,50,118,96,26,30,94,96,60,30,62,60,73,13,18,103,13,171,9,50,20,15,7,16,16,25,37,26,36,119,28,68,37,69,76,40,123,102,40,126,36,66,28,36,128,28,113,37,114,121,40,133,112,40,133,36,111,52,104,10,33,35,48,241,69,32,93,157,19,79,64,177,14,28,51,182,52,88,161,19,14,11,50,32,78,123,200,85,130,75,113,74,24,69,13,9,48,53,32,137,134,122,83,123,84,130,91,142,138,121,117,142,141,120,81,13,29,9,123,182,33,13,38,96,59,32,53,75,128,174,128,56,38,21,64,106,95,39,132,166,129,25,56,38,21,37,79,85,150,182,56,55,21,37,17,13,69,51,33,13,28,32,41,78,74,132,57,30,21,32,85,55,68,138,44,21,26,44,132,111,118,186,57,21,26,44,135,74,132,57,21,26,34,113,115,112,57,21,26,24,60,13,44,31,9,127,52,164,13,9,147,62,23,13,130,149,52,97,13,18,152,31,147,120,101,87,101,21,17,31,146,13,9,106,111,52,23,13,112,104,28,23,13,52,85,13,18,94,13,9,87,66,117,15,9,130,79,103,114,69,97,17,60,118,17,22,91,17,13,9,95,88,27,100,149,34,31,21,88,265,72,17,178,87,17,13,9,128,112,128,151,28,13,25,9,99,100,29,23,13,86,50,98,98,27,17,114,31,64,95,140,17,15,37,23,13,86,134,33,138,17,54,65,135,96,105,19,33,137,17,13,18,66,91,217,19,71,13,9,67,73,165,105,15,9,83,78,92,9,96,97,116,60,35,157,23,9,100,28,46,43,115,26,45,50,59,138,37,48,26,51,49,47,58,26,13,31,33,13,74,9,82,51,39,72,72,75,79,14,28,40,40,62,64,14,20,31,39,45,14,41,24,40,40,48,46,42,37,42,43,43,50,45,18,13,44,54,81,41,39,65,64,65,29,65,27,21,17,46,64,60,19,24,79,79,95,98,43,80,90,92,92,106,65,18,13,31,80,13,46,73,37,17,47,93,53,69,59,17,116,88,35,63,43,82,47,74,68,67,25,42,94,100,29,25,30,109,25,21,58,129,130,21,51,28,76,58,46,22,19,13,38,47,93,53,69,59,17,79,13,65,47,93,53,69,59,17,41,13,56,77,39,17,43,55,70,30,58,46,30,57,79,30,52,80,30,46,49,78,30,50,49,62,76,25,30,69,25,30,60,82,30,59,89,30,54,63,76,30,55,77,30,57,91,44,124,96,29,34,25,21,36,28,72,17,13,63,48,77,17,13,68,114,13,70,40,48,50,45,45,46,30,44,54,30,56,42,17,13,73,52,45,56,45,36,48,45,47,36,36,56,62,73,38,36,49,43,45,49,36,51,62,54,51,53,55,49,51,62,79,68,39,36,45,41,36,48,54,51,57,119,70,65,25,30,50,25,30,50,44,124,75,70,25,81,50,25,87,50,25,72,80,25,30,58,25,30,43,46,52,58,63,57,126,30,45,51,50,25,30,59,46,56,51,175,47,60,93,25,30,58,45,53,48,30,17,13,71,100,13,65,28,38,47,18,39,83,46,85,21,17,59,63,67,17,22,77,17,13,75,73,40,52,17,85,60,58,13,82,57,50,27,17,22,89,56,61,65,55,21,26,55,21,17,13,73,91,46,38,89,13,75,91,13,74,34,93,45,97,80,38,94,47,25,21,17,114,13,46,55,13,47,39,48,76,61,94,108,34,21,118,72,22,21,101,100,22,21,172,99,21,18,79,108,35,110,60,17,129,13,51,41,36,17,31,36,39,39,48,48,48,78,43,100,39,144,21,93,108,91,42,65,96,21,91,42,65,96,21,17,75,95,86,57,37,19,36,41,144,41,144,108,13,40,31,31,37,56,17,37,56,17,45,105,17,40,93,17,190,59,17,132,141,50,120,17,22,36,46,21,52,64,21,17,78,29,13,49,43,39,65,82,58,50,23,17,93,108,168,131,13,59,64,30,114,59,101,17,26,13,69,38,33,86,77,34,36,21,42,85,122,21,26,96,21,19,13,15,38,55,65,15,63,90,32,17,42,87,41,32,31,69,93,119,136,19,89,13,81,52,39,17,81,132,17,130,129,76,72,35,51,70,47,122,29,25,21,33,17,89,85,73,92,17,26,13,79,31,72,64,60,116,38,30,21,177,100,38,55,21,52,157,110,17,81,77,104,29,13,50,159,13,51,36,110,45,132,139,102,64,21,44,18,50,32,17,118,208,13,52,96,85,17,13,56,96,93,17,13,9,50,20,15,7,16,16,25,51,26,145,10,33,35,28,92,100,55,85,28,37,17,163,157,109,171,14,125,92,27,93,17,17,11,52,44,33,13,63,76,87,34,33,13,73,91,134,35,146,13,9,82,127,9,50,20,15,7,16,16,25,45,43,84,43,89,11,33,35,84,160,122,37,17,134,29,119,123,75,127,102,76,18,89,281,17,29,14,28,51,45,89,92,78,21,19,14,11,71,89,64,70,97,13,9,50,20,15,7,16,16,25,11,100,61,105,181,68,11,149,63,125,58,60,158,17,13,9,68,60,20,59,101,14,9,84,34,43,82,86,76,106,11,127,148,11,173,80,60,56,57,33,13,59,92,46,113,105,110,111,70,94,81,39,49,51,133,136,38,116,50,68,84,25,21,73,185,48,26,43,45,152,96,70,83,55,38,118,50,70,84,25,21,115,62,68,84,171,25,30,137,86,133,84,220,25,21,26,17,47,49,99,51,95,75,89,88,69,85,47,30,21,52,106,54,154,30,21,97,57,117,189,21,35,70,119,136,25,30,137,223,25,21,26,13,86,244,27,44,13,9,70,169,42,51,84,228,168,40,33,13,69,61,49,30,37,101,70,68,41,122,54,74,88,29,25,42,123,54,75,88,29,25,141,23,63,153,21,17,85,122,50,46,60,80,21,243,19,51,133,17,27,108,46,60,80,21,17,13,102,67,64,266,13,59,235,13,63,264,13,29,9,98,131,97,92,68,59,50,96,84,53,149,15,65,197,15,41,104,28,60,64,28,68,27,57,176,19,116,59,27,100,55,58,74,174,13,56,189,9,108,118,85,60,108,42,76,60,17,13,105,56,9,76,88,32,48,73,42,41,46,63,152,121,43,46,13,30,9,155,75,82,35,15,49,66,48,89,43,84,56,51,17,172,43,17,13,127,121,153,42,122,74,42,145,145,43,47,13,66,158,9,98,40,102,138,13,9,128,54,49,208,9,59,101,9,59,144,45,53,113,32,9,54,50,41,71,13,50,74,13,29,9,82,90,39,33,101,56,205,64,81,42,23,13,70,65,23,13,80,80,83,51,142,17,22,99,17,13,9,74,97,96,9,72,66,106,9,76,46,162,9,52,11,95,98,103,11,90,24,63,38,64,13,34,23,73,67,80,97,65,111,41,73,117,88,17,84,13,9,102,74,52,37,13,124,9,54,130,9,46,50,20,15,7,16,16,25,96,96,73,33,82,285,59,62,61,59,34,31,44,78,46,70,50,47,17,22,107,101,17,13,102,121,61,85,29,73,76,34,138,17,13,18,125,65,89,13,46,9,76,42,69,9,46,139,9,57,124,9,81,97,215,9,65,115,46,56,48,13,33,9,62,45,49,45,33,9,106,77,58,68,82,103,95,120,24,125,18,13,55,24,88,18,13,84,24,110,18,13,45,68,136,140,20,60,73,63,117,52,41,37,43,51,14,9,100,101,59,63,55,42,112,36,9,101,59,102,42,41,84,77,183,36,9,106,213,67,9,99,114,83,9,103,56,104,13,60,97,13,18,283,13,9,88,146,120,79,9,131,34,23,64,57,69,66,68,45,120,17,169,103,17,72,45,17,15,9,59,65,97,59,69,92,91,176,17,13,28,9,46,25,26,75,103,33,26,123,100,31,26,36,33,13,23,9,44,50,20,15,7,16,16,25,44,66,58,65,60,32,47,206,72,57,113,42,41,120,13,30,9,71,140,153,9,33,25,68,73,14,61,11,61,48,156,142,24,26,13,39,66,9,33,25,120,96,77,71,135,76,93,88,111,85,108,108,14,62,11,62,48,217,24,26,13,66,9,65,80,66,26,13,27,80,50,93,13,110,54,197,132,13,25,9,50,20,15,7,16,16,25,50,100,70,66,127,33,35,96,75,26,27,32,86,100,84,30,14,103,51,89,62,30,31,44,66,90,34,51,71,34,49,75,81,45,39,87,34,32,73,21,19,14,11,43,63,83,75,27,97,17,13,29,9,83,26,33,160,273,9,116,284,100,9,69,141,232,9,68,97,131,70,28,175,13,18,80,13,9,67,26,33,59,65,29,33,157,225,9,113,248,100,9,63,125,9,57,56,159,13,46,66,13,46,67,13,61,66,13,38,113,13,38,87,103,37,94,87,37,160,13,53,65,13,29,9,50,20,15,7,16,16,25,34,90,33,35,48,92,28,37,17,137,164,14,28,125,75,27,64,17,18,11,54,201,99,202,229,9,52,71,87,57,13,72,75,139,52,24,109,57,47,83,56,18,13,9,70,38,72,37,76,37,17,159,13,42,71,13,9,50,20,15,7,16,16,25,39,91,33,35,48,80,54,26,37,150,165,14,28,125,58,25,76,18,11,43,62,39,46,37,111,110,13,52,54,107,13,9,67,185,9,50,20,15,7,16,16,25,39,26,150,10,33,35,80,147,41,187,17,14,28,51,138,14,11,62,112,34,23,13,116,67,107,9,50,20,15,7,16,16,25,73,42,137,33,35,80,73,75,135,146,14,28,125,103,18,11,53,63,109,112,32,9,60,164,69,9,50,20,15,7,16,16,25,40,92,33,35,81,73,65,26,37,129,169,14,28,125,73,26,37,60,18,11,49,72,71,68,65,53,84,59,47,55,37,13,60,33,30,9,52,53,20,168,9,47,35,51,47,49,30,31,26,150,48,55,53,66,40,21,68,48,33,21,39,24,41,17,35,20,37,13,9,50,20,15,7,16,16,25,51,166,33,35,89,73,59,26,37,129,58,188,14,28,125,58,25,55,17,11,43,63,97,32,33,171,27,33,76,9,66,156,9,52,77,108,117,64,138,210,87,35,163,38,120,114,9,50,20,15,7,16,16,25,54,26,124,10,33,35,48,137,38,37,17,87,119,19,117,14,28,11,50,20,15,7,16,16,25,45,26,83,10,33,35,86,147,41,174,17,14,28,51,138,14,11,62,155,104,35,23,13,54,92,39,127,58,103,89,69,21,17,13,99,9,50,20,15,7,16,16,25,126,42,33,35,28,83,87,115,19,37,192,17,14,126,103,18,11,57,106,9,75,37,23,13,85,370,110,38,223,9,50,20,15,7,16,16,25,43,91,33,35,81,100,80,40,27,130,150,14,27,11,63,19,51,93,198,42,23,96,41,23,66,9,55,67,9,50,20,15,7,16,16,25,39,64,45,33,35,48,52,86,26,37,129,160,14,28,125,69,25,64,18,11,46,62,60,30,61,92,9,52,31,70,59,9,50,20,15,7,16,16,25,41,39,26,126,10,33,35,28,48,164,41,209,17,14,51,169,13,11,71,69,149,23,51,59,59,95,90,23,82,75,23,71,78,41,52,52,115,161,34,74,17,103,13,18,77,74,110,114,42,87,53,84,144,21,17,22,82,51,100,21,17,13,9,50,19,38,64,135,159,55,21,17,13,18,42,13,9,50,20,15,7,16,17,26,44,36,59,87,49,10,36,59,87,51,10,49,20,42,41,14,109,81,26,41,58,95,104,17,77,28,132,114,114,31,22,17,37,14,117,144,44,114,173,94,14,11,9,57,81,63,58,64,192,161,110,13,136,177,59,81,121,117,13,51,47,91,107,14,38,51,48,52,47,52,51,42,35,41,51,141,17,51,40,61,118,41,21,73,42,41,83,51,139,17,50,42,44,41,57,147,17,24,37,13,9,91,87,69,9,74,99,29,86,52,71,221,17,22,183,17,13,18,161,42,55,52,56,133,30,53,137,85,138,82,204,34,25,36,51,56,53,92,83,159,30,28,93,17,13,9,73,121,51,136,194,62,33,99,17,22,82,17,15,9,92,36,34,56,46,107,26,47,49,38,84,116,26,17,46,40,105,73,61,41,84,109,21,80,118,159,196,170,95,21,26,97,65,105,21,26,17,24,55,13,9,80,36,34,56,46,106,26,49,80,87,86,62,95,21,26,68,100,21,26,17,49,95,102,99,77,119,26,17,24,96,13,9,58,188,9,58,188,9,53,20,15,7,16,17,26,15,44,31,33,66,94,54,14,37,66,94,58,14,35,64,92,56,14,16,49,81,112,97,26,41,58,57,104,17,77,85,43,56,102,27,17,37,14,120,151,60,114,146,94,13,11,73,81,36,58,64,143,67,76,47,82,56,33,55,32,107,13,46,127,13,80,88,13,71,86,111,35,84,87,9,63,51,51,150,13,18,129,13,9,114,49,36,48,116,69,52,17,22,93,107,63,21,131,51,17,15,78,54,101,73,109,72,47,162,17,120,13,38,74,208,15,53,76,59,141,13,18,193,13,9,89,155,9,88,160,9,111,53,61,48,63,75,29,49,17,15,183,60,155,174,122,97,131,117,114,200,221,25,160,21,123,19,13,91,123,117,159,50,47,79,118,139,70,121,21,63,56,21,26,68,21,19,14,77,37,34,13,71,66,102,42,104,208,19,153,13,9,65,84,32,29,83,51,9,65,309,9,53,20,15,7,16,17,26,45,54,70,139,41,35,69,66,14,53,52,76,80,15,74,81,26,41,58,29,47,81,61,27,17,77,29,47,81,122,27,17,37,13,84,44,114,85,105,19,94,13,13,46,87,13,45,116,13,57,73,13,59,81,67,62,53,56,37,107,73,92,165,147,116,32,127,55,132,13,62,53,85,109,127,17,92,81,114,17,60,104,129,122,17,13,48,89,125,17,17,82,37,127,106,125,118,13,15,107,15,70,37,129,116,33,30,21,44,36,49,17,71,33,49,17,72,13,15,76,15,56,136,37,17,79,13,15,72,15,55,60,131,83,30,45,17,101,107,102,83,37,45,51,17,63,117,13,47,85,42,17,58,57,17,57,71,17,33,13,15,121,15,67,37,122,36,21,39,17,33,13,15,112,15,58,37,107,36,21,39,17,33,13,15,96,15,42,46,32,17,51,81,111,99,17,107,13,15,109,110,61,87,15,54,123,104,48,50,64,17,89,161,32,17,33,13,15,113,15,74,140,95,114,165,37,42,57,45,160,136,21,72,45,140,116,21,71,45,153,129,21,17,33,13,80,121,74,95,175,60,111,21,70,197,21,17,13,141,53,20,15,7,16,17,26,45,54,75,103,42,35,49,63,14,53,53,84,87,15,82,106,94,26,41,25,43,57,57,23,13,80,106,104,36,37,55,80,46,47,53,272,30,21,55,355,30,21,51,190,30,21,49,222,30,21,56,195,30,21,57,326,30,21,148,17,50,60,17,85,116,19,94,86,90,80,197,113,21,55,62,50,106,150,23,17,66,94,211,17,64,122,196,100,46,86,48,69,143,73,44,44,61,60,36,25,21,34,17,13,59,33,51,53,49,47,54,55,36,17,29,13,89,70,94,38,27,17,55,60,39,27,17,57,44,27,17,100,27,17,67,27,17,44,84,27,17,43,202,27,17,128,65,27,17,80,120,27,17,38,13,141,53,20,15,7,16,17,26,26,35,48,41,41,90,50,14,41,41,90,50,14,53,24,47,46,18,67,71,15,15,50,34,15,65,53,142,61,48,146,45,21,36,105,37,47,75,148,27,21,105,37,47,75,148,27,21,34,17,79,48,46,41,17,41,53,49,41,53,49,26,96,135,69,105,69,78,95,67,70,73,54,61,70,68,35,29,25,65,60,57,66,95,64,30,25,21,105,69,78,95,67,79,72,75,54,63,70,68,35,29,25,65,60,57,66,95,64,30,25,21,84,88,24,17,31,45,32,43,98,49,23,17,114,32,43,98,63,23,17,45,32,43,98,48,23,17,114,32,43,98,63,23,17,60,49,54,52,50,21,33,17,13,96,36,75,105,78,89,47,61,120,85,17,89,47,61,120,85,17,58,13,92,77,25,34,49,112,17,85,97,90,85,91,84,103,108,183,161,223,239,118,126,106,108,129,185,112,125,114,144,83,27,36,60,70,74,82,68,19,90,19,81,48,15,109,106,109,84,15,38,67,59,41,47,126,17,60,91,94,140,141,117,137,132,94,140,54,109,38,79,79,49,37,59,126,17,56,126,17,50,71,126,17,36,108,53,130,21,40,90,47,71,64,43,60,29,55,25,48,34,25,21,45,79,100,85,102,42,130,21,113,17,71,85,126,17,48,45,68,29,46,17,152,19,112,61,19,43,53,46,51,25,21,98,130,48,53,109,65,58,50,74,29,25,52,51,25,82,21,62,47,52,25,21,32,17,46,99,100,21,37,17,78,46,57,77,55,72,29,34,25,72,81,78,72,29,34,25,80,55,72,29,25,49,21,17,77,49,39,48,76,78,84,80,64,91,159,67,167,134,113,21,68,109,21,162,77,42,76,21,31,56,35,39,34,42,37,68,40,25,53,122,89,129,119,54,135,44,29,59,25,79,44,61,127,44,60,135,44,56,109,94,84,61,88,167,134,52,37,33,38,70,33,38,57,68,73,55,74,37,117,53,37,42,66,37,35,44,60,63,120,77,149,33,44,59,62,61,55,55,55,72,45,25,65,44,55,62,38,56,69,62,38,49,134,86,68,33,38,57,54,76,64,38,36,103,82,87,33,38,25,44,52,55,66,38,62,55,90,61,49,38,29,58,63,55,44,86,105,202,37,33,38,138,94,180,37,33,38,29,59,73,38,59,69,38,59,70,71,33,38,166,33,38,36,61,38,25,61,21,17,13,64,15,112,47,15,79,59,43,77,26,17,61,13,58,43,34,17,53,91,86,91,86,88,17,33,13,36,133,13,15,88,105,57,15,52,97,56,146,73,42,104,49,67,48,21,17,32,30,45,118,63,107,134,21,137,101,46,57,57,43,45,68,42,25,21,17,13,96,290,124,91,175,13,96,290,124,146,73,56,28,54,156,13,15,105,120,75,15,67,224,110,66,90,90,78,73,47,74,76,44,44,62,176,176,21,67,176,176,21,26,178,178,21,90,60,174,21,28,45,61,62,26,45,61,62,26,22,19,35,13,73,46,65,88,173,74,13,62,58,38,43,34,37,13,62,44,38,33,13,70,37,47,45,54,55,41,71,43,49,48,53,76,47,73,47,73,28,103,17,13,67,64,105,116,13,68,59,76,86,13,29,38,68,68,52,15,71,108,15,107,126,63,96,129,64,49,115,48,81,31,36,39,27,62,33,32,95,106,70,146,21,74,46,45,50,35,59,47,56,62,21,74,19,185,125,85,31,102,110,67,68,144,32,81,73,53,73,119,17,207,58,32,44,71,102,66,91,21,67,90,21,69,201,95,17,22,71,310,17,86,110,95,41,125,17,22,91,17,54,34,51,81,162,31,59,114,17,63,66,17,43,94,17,68,62,88,93,125,67,81,81,73,340,60,21,26,76,56,49,46,90,52,152,88,81,58,56,92,99,181,81,53,70,57,52,104,97,25,119,42,77,25,73,184,60,50,71,21,17,72,61,142,152,88,73,56,79,29,77,266,25,21,46,112,73,242,21,130,46,111,21,44,51,98,53,105,132,65,78,25,21,26,36,68,45,166,50,126,25,21,17,22,61,78,21,60,82,21,26,44,21,17,51,129,17,22,92,17,55,101,74,130,104,67,49,41,21,69,46,71,59,21,156,31,128,17,13,15,71,108,15,83,23,53,63,64,49,111,48,76,31,125,104,148,65,86,44,105,39,88,65,91,21,89,75,72,76,121,93,95,47,118,21,30,51,99,125,30,82,17,22,160,109,95,109,74,103,49,34,157,117,34,88,86,21,126,122,70,86,132,99,21,26,86,132,34,92,59,128,25,30,143,25,34,81,83,76,25,30,92,119,61,55,126,29,90,25,21,17,55,67,126,104,89,106,51,88,101,130,88,71,122,85,43,88,116,64,88,55,40,39,89,39,37,47,25,30,73,67,46,245,25,21,100,102,69,31,88,45,58,300,21,26,85,81,154,149,140,120,94,60,59,72,127,29,25,314,21,84,17,13,76,29,62,57,56,68,62,36,21,36,39,17,13,48,37,41,52,86,49,103,59,25,21,17,40,13,61,67,67,96,141,60,13,74,86,44,161,93,17,22,45,17,13,113,117,103,120,128,17,40,42,198,138,76,89,96,128,123,134,55,108,25,30,142,25,21,143,17,22,124,17,40,106,134,46,55,65,29,146,25,55,89,25,30,123,25,21,26,61,116,92,158,57,38,21,17,13,79,41,42,34,40,88,148,17,13,58,58,60,43,47,21,17,77,44,17,49,41,17,22,41,17,37,13,15,98,45,15,67,86,125,19,13,67,44,138,31,41,84,47,46,56,21,77,97,104,55,42,25,46,21,40,17,45,101,34,13,65,56,30,75,40,41,21,17,82,44,51,86,51,59,38,29,54,25,70,86,126,54,25,88,103,21,111,17,13,114,164,140,79,56,38,52,45,71,13,41,37,13,15,83,59,14,69,40,43,42,15,69,57,121,40,13,22,31,61,50,81,52,38,125,76,40,47,48,48,61,80,53,55,68,39,102,57,36,41,47,55,64,54,128,17,113,112,17,37,81,45,130,61,52,44,47,66,21,72,112,21,79,98,128,21,64,17,46,128,122,74,38,102,100,76,78,104,62,17,54,81,32,116,51,91,90,95,31,34,25,120,71,121,63,97,94,108,33,29,25,21,104,105,77,94,17,107,113,65,105,35,72,98,17,45,56,86,100,102,109,118,142,21,41,51,71,60,44,80,64,108,91,29,25,23,112,180,74,115,61,61,21,67,159,61,61,21,66,136,61,61,21,18,57,32,17,228,51,175,17,58,101,100,100,145,80,103,61,60,95,25,21,17,58,77,43,67,56,21,64,71,21,58,66,64,50,21,67,67,21,105,66,61,21,53,43,35,25,91,35,25,108,35,25,96,21,26,61,21,17,60,77,35,65,118,86,47,110,29,25,21,17,77,77,34,58,41,21,69,61,58,144,142,51,149,64,58,40,21,52,36,122,67,113,64,81,44,121,29,25,40,21,58,57,120,38,41,21,110,87,41,21,96,129,65,175,137,70,46,25,137,70,46,25,21,61,46,125,56,37,25,70,141,47,85,29,50,125,57,83,130,73,73,33,29,34,130,29,25,21,36,17,57,115,133,31,21,51,51,63,60,30,123,35,65,73,78,75,81,33,29,34,91,71,112,29,25,21,68,17,19,106,19,70,114,101,140,86,66,17,101,34,41,21,57,95,72,21,115,47,41,21,37,106,89,17,13,49,158,13,15,99,28,97,99,66,15,52,41,38,46,37,17,36,48,77,70,49,56,50,37,45,74,72,70,17,28,13,40,36,41,46,47,46,36,28,37,17,13,43,176,13,84,53,20,15,7,16,17,26,42,40,42,91,42,10,40,41,90,47,10,38,39,88,44,10,49,20,46,46,43,14,84,91,26,41,58,29,47,98,48,143,27,17,77,29,47,98,38,116,118,118,29,27,17,37,14,92,40,54,116,61,91,41,59,87,80,57,86,78,59,110,80,32,68,21,19,51,117,104,13,11,65,77,75,47,69,87,78,170,105,56,113,59,126,97,32,125,83,148,9,65,22,33,50,32,42,73,38,94,181,41,21,62,17,30,13,56,75,13,50,36,13,29,9,58,94,9,77,28,59,36,51,57,53,137,157,46,103,118,81,135,48,33,136,66,42,33,29,25,21,17,52,176,113,36,21,17,85,91,193,36,21,17,52,57,140,243,40,25,21,26,128,40,25,21,17,172,62,17,54,13,9,63,119,68,40,202,126,359,9,63,19,153,68,40,61,59,112,126,359,9,61,119,180,31,65,89,94,180,41,15,207,213,9,53,20,15,7,16,17,26,46,55,66,90,40,33,47,68,14,51,51,113,45,41,158,118,168,31,41,63,98,88,186,108,18,57,45,45,195,30,45,62,33,49,63,64,31,21,81,33,49,63,125,31,21,41,17,15,144,53,20,15,7,16,17,26,9,11,64,11,44,44,9,59,11,67,59,11,59,27,28,67,9,65,53,20,15,7,16,17,26,48,89,35,31,37,42,10,49,46,86,62,83,110,17,77,249,27,17,37,14,94,87,85,187,94,13,11,42,36,87,45,102,38,33,60,132,107,13,93,58,33,121,52,130,33,20,123,96,14,9,81,51,67,73,67,126,69,57,212,130,9,47,54,42,33,25,28,79,97,59,40,76,15,79,9,54,94,102,101,82,13,9,37,32,49,32,55,74,49,187,24,33,13,9,118,62,21,23,117,114,120,88,116,15,82,169,13,9,125,51,94,87,71,100,13,70,78,153,37,98,13,106,67,100,194,107,48,127,41,39,13,120,9,68,74,83,84,13,9,86,77,39,51,29,196,13,9,100,51,50,43,38,53,79,114,35,58,73,94,109,72,26,143,145,140,49,97,68,31,149,23,18,84,43,40,17,14,83,40,37,13,9,47,32,49,151,73,55,37,51,66,24,97,13,9,151,120,39,30,114,63,27,150,85,39,17,15,34,140,87,45,104,17,148,13,9,92,79,85,32,49,62,211,48,55,216,51,168,24,97,13,9,47,78,93,50,9,58,52,66,34,13,63,142,34,17,13,57,101,38,124,33,21,17,13,9,127,30,29,57,69,114,17,22,46,17,15,121,9,100,54,32,186,98,13,18,149,169,45,176,32,13,9,72,60,225,9,53,139,9,76,60,64,72,134,72,34,41,17,33,15,9,81,38,49,96,26,55,52,63,21,26,51,104,26,24,109,13,9,94,41,23,95,56,55,211,55,55,13,18,44,53,17,36,46,208,21,77,93,49,55,68,25,21,17,13,9,99,36,32,41,41,57,21,26,51,26,52,116,175,21,26,84,49,90,73,29,25,21,26,13,9,162,38,77,42,69,177,19,13,118,31,41,128,65,43,27,17,82,38,53,33,63,30,33,68,43,91,21,75,46,21,26,60,21,17,15,196,36,9,81,43,35,83,43,59,69,13,9,49,82,9,57,47,60,60,131,72,85,66,13,77,45,71,180,19,13,77,45,72,45,31,86,42,47,66,25,145,66,25,21,19,13,77,60,77,39,51,29,94,95,72,17,72,49,62,60,19,13,264,57,48,37,17,72,98,98,69,135,99,40,32,13,9,40,35,32,55,47,44,47,32,51,63,46,125,24,33,13,9,54,64,116,9,57,29,51,48,32,41,99,112,57,239,36,17,55,56,53,63,134,17,24,93,13,9,59,67,76,13,18,103,99,13,9,48,32,41,57,51,32,54,112,156,111,17,13,9,63,49,75,64,28,41,17,22,42,17,15,9,52,34,40,13,57,69,14,57,68,14,60,64,14,57,37,14,62,53,14,53,44,52,29,14,29,13,46,170,9,56,92,9,55,96,90,9,57,32,51,48,49,47,52,52,55,32,24,33,13,9,60,37,51,48,49,47,52,52,55,41,49,167,53,58,135,39,36,17,13,9,68,32,41,132,51,52,179,24,97,13,9,47,139,9,53,29,51,43,46,165,24,29,13,9,85,66,23,32,52,67,13,18,61,39,98,13,9,68,19,32,216,13,151,9,49,82,9,34,109,29,51,165,48,145,49,95,49,106,47,107,52,127,52,149,55,137,51,105,24,98,13,9,42,109,9,51,32,51,48,62,49,152,49,47,52,52,55,41,51,142,24,97,13,9,39,47,266,9,53,20,15,7,16,17,26,45,54,75,103,35,53,81,58,14,38,58,86,60,14,53,49,74,77,15,72,118,115,26,41,58,29,47,61,38,85,29,27,17,77,29,47,61,38,109,112,29,27,17,37,13,82,79,86,114,107,25,58,89,93,143,17,85,85,145,146,136,137,17,22,52,17,85,57,19,94,13,111,89,70,58,28,28,117,22,17,48,28,119,22,17,128,37,17,112,82,17,152,72,63,136,21,17,33,13,141,53,20,15,7,16,17,26,46,55,75,43,124,40,35,49,66,14,53,51,91,94,15,89,79,55,29,59,130,41,41,25,43,57,55,23,13,99,87,174,122,63,37,110,46,174,98,17,55,13,107,60,179,32,163,69,17,85,164,102,51,66,149,282,21,17,91,179,37,137,39,91,89,23,17,13,92,74,124,133,55,212,68,144,52,17,41,60,84,131,91,85,89,137,115,59,58,60,37,25,153,36,65,71,100,26,100,76,80,41,29,66,39,75,41,29,25,95,99,65,39,74,41,29,25,161,107,83,83,52,41,133,160,142,62,26,138,87,58,41,29,65,39,74,41,29,66,39,75,41,29,25,131,112,87,58,41,29,65,39,74,41,29,82,51,89,41,29,111,106,84,62,43,74,45,33,29,25,56,21,45,17,58,67,73,17,13,15,104,15,64,73,30,99,124,84,38,21,17,13,51,38,53,53,64,59,32,17,94,32,17,33,13,48,58,38,17,33,13,49,40,55,58,42,65,54,53,99,110,59,29,34,37,64,109,149,130,125,65,33,29,34,40,63,107,160,129,124,65,33,29,34,21,17,33,13,53,40,47,50,42,34,64,109,112,64,29,34,37,63,107,110,63,29,34,21,17,33,13,41,43,150,37,17,33,13,85,68,84,58,42,37,39,79,71,108,47,33,13,44,76,38,123,100,17,29,13,51,131,13,79,23,88,33,51,55,125,53,87,113,146,251,25,84,47,80,136,25,30,96,88,25,54,49,86,17,29,13,75,110,13,67,55,110,44,17,28,13,69,92,152,13,81,63,79,81,37,17,137,13,55,139,13,51,78,13,66,51,49,17,41,13,60,51,110,17,34,13,77,108,78,17,78,13,80,91,79,128,77,72,91,71,58,82,51,36,19,88,87,170,50,17,110,37,13,78,55,103,115,97,90,38,136,76,83,17,76,42,41,67,85,71,74,81,46,45,70,69,79,79,45,83,83,21,91,17,69,93,66,50,254,65,82,95,21,35,17,62,102,114,36,17,96,66,123,74,21,79,229,75,87,78,91,21,45,17,44,63,81,17,68,67,83,58,21,77,17,13,57,78,13,60,61,52,77,50,59,107,103,185,49,51,76,87,61,38,73,58,17,13,60,51,55,53,62,110,103,191,49,53,58,47,230,92,88,74,25,44,49,65,54,53,95,65,28,147,17,13,144,53,20,15,7,16,17,26,43,52,60,109,39,35,49,47,14,53,50,77,80,15,75,79,77,66,105,106,67,42,17,82,199,42,17,37,13,72,70,67,88,40,72,72,54,17,28,13,85,79,77,37,45,86,28,63,17,13,66,66,40,86,100,44,94,102,120,73,84,61,74,23,17,22,146,17,13,48,72,13,54,75,37,64,63,41,58,56,103,32,42,21,19,43,13,43,47,58,87,116,21,161,122,107,21,97,83,46,58,115,18,145,113,13,54,42,113,47,144,17,17,52,65,89,55,48,52,144,64,21,18,14,52,85,97,84,101,105,82,107,13,49,54,98,69,13,60,33,44,46,44,105,42,99,44,32,21,61,47,67,30,21,26,30,21,17,55,13,48,63,89,112,134,45,126,94,57,17,39,88,73,45,89,57,159,37,56,63,94,57,92,94,117,88,78,82,27,71,21,26,49,94,97,83,101,21,32,18,28,60,32,32,17,88,13,75,68,51,48,133,153,13,69,57,49,43,17,28,13,135,53,20,15,7,16,17,26,53,62,79,128,45,54,103,60,14,41,50,99,56,14,41,50,99,56,14,53,24,51,47,46,18,80,83,15,78,127,73,26,41,101,41,32,88,132,116,32,115,21,26,68,21,17,92,90,120,32,119,21,26,72,21,17,88,156,32,115,21,26,68,21,17,25,43,57,121,52,23,13,88,106,73,26,37,37,31,37,56,105,30,52,65,42,45,115,30,52,59,45,101,30,28,63,17,94,13,43,41,61,43,44,31,21,120,58,21,19,36,13,68,71,59,98,106,77,17,64,32,92,68,54,73,119,41,83,17,33,13,58,134,13,93,59,37,17,116,66,180,39,17,33,13,43,44,81,52,73,142,91,17,22,32,17,13,44,54,136,37,73,63,159,37,172,13,78,40,53,179,127,13,88,40,53,201,52,142,92,211,72,136,17,22,84,60,68,23,17,13,74,40,54,41,25,66,43,62,48,17,22,37,17,189,127,13,61,107,13,80,125,13,165,53,20,15,7,16,17,26,36,45,60,88,41,35,49,60,14,53,52,69,72,15,65,44,66,166,98,17,33,13,67,44,26,41,58,29,47,61,60,27,17,77,29,47,61,121,27,17,37,13,75,103,93,89,30,37,119,119,21,94,17,13,39,126,27,87,71,166,52,19,76,127,17,67,76,34,123,17,111,37,88,17,13,53,36,55,54,49,53,36,28,37,17,13,58,67,93,48,127,21,17,78,32,75,17,13,114,53,20,7,16,50,31,49,73,96,121,52,29,64,20,5,49,45,27,27,38,51,47,36,29,9,73,52,168,10,58,48,10,84,41,79,10,57,41,28,10,51,41,28,10,63,41,61,10,57,41,39,10,76,41,56,10,66,41,91,10,62,41,30,50,13,87,10,68,55,10,72,55,10,66,174,89,10,68,41,56,35,33,13,144,53,23,48,10,67,41,56,53,25,33,13,93,10,76,62,10,26,9,47,40,33,9,26,52,76,48,37,15,28,9,70,27,44,62,33,28,10,45,62,57,28,10,54,44,103,102,55,23,53,57,38,24,5,57,35,27,42,50,33,52,140,17,68,13,26,51,22,13,9,5,46,82,28,28,70,35,69,38,27,9,66,20,5,62,52,57,27,27,38,51,47,36,9,71,48,10,97,79,10,70,28,10,64,28,10,76,61,10,70,39,10,89,56,10,79,91,10,75,30,50,13,87,10,71,45,10,73,45,10,69,102,10,71,29,10,70,29,10,70,29,10,39,9,51,44,31,36,9,55,30,10,63,30,43,14,30,30,11,61,36,10,54,29,10,62,37,10,77,45,126,93,70,94,17,22,100,17,13,45,10,96,85,43,74,154,21,74,43,74,154,21,74,24,65,13,10,66,42,83,13,29,10,85,85,43,58,141,21,58,43,58,141,21,58,24,54,13,10,28,9,56,39,46,60,30,25,9,27,32,61,44,52,60,45,25,9,67,30,39,14,30,30,11,32,32,58,68,51,59,55,9,74,30,39,14,30,30,11,39,32,72,49,45,35,31,9,53,30,10,54,31,10,58,58,10,68,70,10,66,67,10,62,72,10,67,77,10,63,73,10,63,73,10,57,91,10,59,53,10,63,57,10,63,57,10,58,62,10,55,66,10,52,56,10,59,63,10,66,70,10,54,68,10,60,60,10,60,60,10,60,63,10,63,74,10,52,63,10,56,56,10,70,15,77,15,30,66,63,17,33,14,30,30,11,26,9,54,50,35,31,9,64,36,10,67,39,10,63,35,10,63,63,10,79,64,74,59,33,65,17,13,24,10,73,157,10,62,138,10,31,9,7,80,40,87,7,42,104,5,64,26,33,80,89,45,51,99,27,53,50,119,87,25,149,21,19,36,93,17,14,95,53,38,13,9,20,5,61,26,33,83,88,45,51,99,53,50,119,98,25,71,21,19,85,34,115,14,95,53,38,13,9,19,5,62,15,46,19,190,41,19,111,118,51,11,5,61,44,51,66,46,25,9,81,71,10,88,68,10,64,42,10,107,120,10,74,68,50,28,48,44,13,31,55,13,46,99,120,10,71,42,73,13,42,10,75,45,37,26,50,59,27,50,17,13,44,52,36,56,17,36,13,54,75,141,94,13,34,36,55,54,53,51,55,86,46,80,83,93,164,87,69,88,96,33,29,34,71,29,25,53,30,52,51,56,56,51,53,59,51,51,48,51,47,47,47,45,53,30,45,61,100,34,25,36,55,52,40,61,62,34,25,47,52,25,21,36,46,55,53,45,30,53,58,60,53,61,84,91,29,34,75,29,25,30,53,61,43,63,54,52,66,29,69,60,64,61,100,79,33,38,91,33,29,25,30,52,85,49,25,36,28,53,17,13,10,32,19,60,68,37,29,41,9,88,63,10,37,9,43,16,67,69,79,93,79,71,67,77,89,10,5,45,46,39,73,51,22,13,9,41,32,9,26,39,52,98,53,13,9,24,5,43,29,70,5,49,27,102,9,18,5,51,42,72,16,32,33,10,5,61,38,51,5,53,62,76,54,48,56,29,40,63,48,59,58,98,51,109,13,9,69,22,71,33,25,43,66,51,69,18,13,18,33,13,50,25,10,62,50,10,70,55,59,10,80,85,74,10,60,27,59,41,38,17,22,51,17,15,25,10,65,57,67,10,25,9,54,40,29,9,78,71,34,58,76,13,67,63,27,52,52,150,13,59,93,94,121,13,29,55,50,48,64,52,13,42,10,31,9,71,37,51,5,123,133,65,26,5,73,118,91,41,30,49,37,105,61,75,25,95,92,82,25,54,75,84,17,22,101,145,62,46,55,32,52,53,17,112,76,78,62,52,68,80,60,60,21,58,17,37,13,9,52,169,5,73,33,48,46,6,62,61,55,9,81,68,10,86,49,175,58,13,10,39,9,19,58,65,94,87,63,69,102,100,31,47,9,84,38,75,60,75,54,76,13,25,10,89,49,178,58,13,10,42,9,63,50,33,35,40,37,44,33,29,33,26,32,24,33,30,31,44,44,27,6,123,35,36,35,32,33,34,36,38,38,34,25,35,32,29,24,30,33,14,93,15,15,186,32,60,66,9,72,47,135,9,14,66,9,56,20,31,37,57,70,36,58,90,142,31,27,34,13,9,80,92,47,89,74,35,60,56,90,74,20,11,47,61,30,94,105,76,103,28,13,30,9,40,27,86,53,41,66,41,175,31,21,60,17,13,93,60,74,54,56,13,56,70,61,91,91,119,120,35,35,69,39,35,45,54,78,61,14,68,266,23,13,86,96,99,91,35,40,32,53,65,80,59,93,150,106,35,78,39,35,74,60,59,75,18,49,80,18,45,63,71,67,93,45,80,92,104,114,59,14,105,103,27,41,37,35,36,52,14,48,122,85,34,43,155,155,66,38,91,37,37,19,53,87,132,43,49,56,57,78,103,30,13,86,83,28,37,96,50,58,173,111,13,93,23,48,154,17,42,82,17,13,43,87,72,30,41,69,13,41,50,87,72,28,101,17,64,13,79,158,85,13,76,43,72,95,126,13,107,175,13,121,195,94,96,81,104,43,37,17,115,123,91,49,69,85,40,98,98,106,26,35,37,53,37,35,26,99,94,97,97,100,34,26,100,99,100,52,94,96,50,90,227,25,30,111,199,25,21,103,17,95,216,13,9,56,31,75,55,33,13,34,27,9,42,19,115,9,41,50,9,28,26,154,104,67,104,19,54,13,29,9,23,52,34,108,9,11,114,67,11,51,34,64,140,61,106,72,51,13,136,112,109,9,53,34,109,9,50,34,163,9,92,66,65,319,34,282,9,116,74,34,261,44,9,90,74,34,164,9,61,34,58,72,38,72,33,13,55,61,88,65,145,34,43,49,86,208,114,93,18,13,101,178,125,20,33,88,82,43,45,27,14,9,44,82,46,13,85,35,13,24,9,60,32,41,113,56,45,80,65,43,40,44,48,32,24,33,13,9,27,62,34,110,9,64,34,112,9,66,34,131,9,31,66,34,163,9,38,63,488,9,75,64,117,34,132,58,134,9,126,34,58,102,57,33,163,116,77,87,162,19,13,18,387,13,9,62,34,271,9,67,34,101,71,132,43,139,9,53,34,156,9,46,19,34,117,200,9,93,72,34,99,156,9,74,34,58,96,134,9,25,11,40,11,64,92,34,58,123,9,30,50,66,9,71,76,39,72,38,33,13,32,56,45,44,43,43,43,44,43,40,41,26,44,24,37,13,39,26,120,157,61,17,73,114,174,64,93,88,76,77,21,26,65,30,21,17,22,89,26,17,13,90,9,71,70,76,90,9,50,125,9,46,121,9,69,34,69,63,134,13,18,166,13,9,76,34,69,63,173,13,18,141,13,9,62,70,123,9,69,70,130,9,46,70,76,96,9,62,67,67,71,67,18,114,65,76,66,123,93,69,188,9,78,39,59,76,95,35,100,95,26,9,76,76,138,9,67,161,9,85,76,96,56,30,29,103,29,103,29,100,30,96,17,13,22,9,103,74,34,58,63,84,115,65,229,15,9,79,74,34,51,64,84,208,9,68,74,34,50,63,84,142,9,94,74,170,9,86,101,161,9,55,110,65,38,106,77,9,79,165,9,85,110,54,47,61,17,32,53,29,13,76,81,54,29,13,73,60,13,62,29,13,35,42,42,39,65,13,24,9,65,76,68,23,33,128,98,52,105,13,130,99,59,42,13,9,58,20,55,88,86,14,9,72,76,33,139,54,52,46,68,81,51,55,57,120,92,78,30,81,68,93,84,21,17,13,37,57,104,80,29,17,69,69,50,32,211,21,44,42,49,35,42,71,29,27,21,121,42,40,35,59,68,29,27,21,17,13,31,9,90,19,76,33,39,35,54,31,36,105,53,54,68,69,40,42,65,113,76,77,35,102,32,43,43,21,53,79,57,21,38,47,17,107,147,62,39,200,99,17,13,96,58,46,154,80,17,76,86,44,84,38,47,31,38,43,25,23,17,100,64,118,42,52,35,42,51,29,27,21,92,42,51,35,42,51,29,27,21,17,85,51,38,48,31,38,66,25,23,17,13,18,71,90,48,101,121,38,36,31,57,49,25,23,17,13,31,9,56,76,111,79,76,85,81,9,58,76,33,36,36,80,51,30,70,13,46,65,35,48,61,172,34,60,177,21,45,17,13,31,9,36,107,95,148,9,41,73,136,9,79,76,87,142,9,57,94,97,95,97,93,29,34,58,61,47,28,99,84,53,40,64,69,111,22,45,22,68,22,81,22,60,64,63,47,96,94,22,92,76,56,108,49,75,98,56,69,33,21,44,66,74,56,25,21,49,47,92,54,107,33,21,48,103,17,13,26,40,82,13,46,103,67,74,18,60,18,60,18,30,37,31,18,101,35,67,66,90,75,103,92,147,103,99,18,50,18,99,96,65,134,100,58,66,56,103,89,77,87,56,112,62,98,33,18,93,18,72,55,13,44,69,65,65,13,46,65,13,9,61,34,101,9,109,177,20,27,45,41,38,27,83,53,41,45,26,14,9,64,20,27,38,27,27,41,53,14,9,61,123,9,102,74,34,52,148,9,119,74,34,52,148,9,57,87,87,89,83,33,49,13,71,9,59,34,157,164,9,72,34,58,184,113,9,72,34,58,184,94,9,65,74,34,58,104,9,18,29,55,61,59,63,73,69,67,83,81,63,65,63,57,59,61,65,69,69,61,43,49,63,57,61,79,51,41,59,53,57,49,49,45,67,63,67,73,79,77,79,67,65,59,51,59,45,57,41,57,35,57,59,53,51,66,86,55,81,81,49,59,47,51,49,10,38,49,22,56,79,50,138,22,19,22,50,73,50,132,22,19,22,20,58,9,18,5,53,19,111,39,36,44,9,54,5,35,46,60,53,147,72,87,13,52,44,87,13,40,41,73,39,49,17,13,11,5,7,77,82,79,74,7,34,44,69,56,62,5,7,120,7,19,54,68,133,5,77,60,28,40,56,40,74,106,17,28,37,64,141,72,9,25,5,61,61,21,74,142,56,44,13,9,49,5,86,19,97,57,18,33,40,58,53,9,281,146,58,23,32,9,56,66,101,9,44,5,83,56,22,26,69,52,5,7,94,20,96,7,45,74,47,89,9,100,5,53,56,20,15,7,16,27,36,11,54,11,67,48,47,33,13,78,89,119,81,53,34,113,132,87,36,121,37,17,44,13,60,64,33,13,59,47,51,50,78,51,91,13,92,146,13,74,122,44,17,51,13,49,113,13,47,79,13,43,83,13,39,27,45,40,57,65,99,59,59,57,67,49,68,59,57,55,51,51,51,58,53,67,45,59,65,29,40,51,53,51,59,59,53,61,55,79,81,54,49,84,51,68,62,57,55,64,51,49,84,56,48,62,54,57,80,76,52,60,54,53,84,54,50,68,55,50,84,50,53,68,66,52,48,62,54,48,67,56,50,67,63,75,72,57,75,72,57,75,72,57,76,91,49,29,40,56,55,50,54,52,50,53,48,62,49,70,60,59,62,65,60,60,45,34,53,52,109,49,60,53,62,54,63,56,65,53,62,54,63,49,58,55,52,74,36,52,60,50,51,53,56,49,57,32,80,43,53,93,99,29,92,59,100,69,72,77,87,95,54,29,75,96,106,60,60,57,97,103,33,151,111,56,81,80,58,33,81,60,33,29,60,54,63,74,72,61,79,71,64,66,62,68,101,123,66,41,46,65,72,118,66,41,46,33,29,55,66,112,68,116,83,37,42,71,87,68,80,37,42,67,59,104,103,118,72,37,42,33,66,64,118,108,72,37,42,33,40,83,102,72,37,29,73,59,21,17,79,153,66,149,21,26,56,61,21,17,73,86,94,77,21,60,92,72,78,21,100,55,58,87,74,84,21,83,93,98,86,102,54,130,21,17,71,141,95,93,17,64,62,60,68,21,76,51,21,26,67,97,65,53,78,116,25,30,78,72,25,21,17,85,90,143,17,73,63,52,41,21,85,69,61,21,48,64,17,53,114,78,94,21,58,17,45,48,57,99,49,29,85,40,54,51,54,99,125,52,54,145,21,66,59,17,71,98,81,83,78,87,25,21,26,60,72,21,17,59,51,72,21,49,64,21,51,66,21,17,63,62,181,46,63,21,98,82,63,21,63,82,17,86,129,116,166,46,63,21,77,78,91,64,106,17,26,53,47,55,62,226,56,63,229,49,108,21,45,51,17,54,47,51,86,105,49,29,40,55,56,56,50,45,66,60,54,29,40,51,90,49,78,56,83,45,93,29,45,60,111,61,109,49,32,100,115,64,111,29,59,21,17,56,47,59,111,61,107,32,100,115,63,107,29,53,59,21,17,53,114,72,71,56,21,81,52,21,45,51,17,54,94,47,58,59,53,57,55,51,51,51,54,51,52,54,54,53,63,60,49,32,59,21,17,49,89,57,76,67,56,21,51,17,65,81,52,21,51,17,51,69,55,87,21,45,51,17,48,72,47,52,21,45,51,17,13,9,83,83,20,7,16,7,67,67,105,56,7,63,29,98,59,161,77,22,5,29,20,2,61,2,66,67,42,47,2,70,68,75,70,33,2,15,36,16,5,60,35,15,7,16,44,21,94,9,5,64,64,57,9,77,63,10,69,55,10,85,46,101,48,35,46,13,47,64,123,10,67,110,45,55,124,13,10,41,9,69,59,29,37,40,40,105,46,65,82,133,64,77,154,23,18,13,53,122,13,81,101,153,127,18,13,9,69,38,37,13,10,71,38,39,13,10,71,35,10,82,51,66,51,13,53,10,84,53,25,13,55,10,90,111,10,87,70,55,63,112,13,59,107,56,35,10,83,61,39,10,90,75,83,10,86,51,79,13,18,39,13,10,89,60,10,95,48,88,83,28,13,17,58,13,23,103,28,13,47,10,85,77,76,10,84,55,10,83,66,10,93,80,10,119,174,220,10,87,58,10,79,50,10,46,9,71,66,56,29,37,137,53,122,13,18,67,13,46,108,13,18,60,13,9,119,177,223,10,80,54,10,78,52,10,80,66,10,43,9,65,83,18,29,42,35,9,30,29,37,100,38,33,39,56,17,113,13,9,22,5,81,99,5,89,13,94,76,9,21,63,58,13,42,48,50,9,5,47,36,35,39,9,56,46,10,24,9,55,87,5,47,53,16,86,36,38,60,34,62,59,10,5,70,53,76,59,30,52,41,38,25,9,100,96,10,19,11,86,73,11,72,41,43,79,25,68,49,52,13,70,55,10,19,11,59,11,79,138,14,10,80,29,72,61,67,15,10,89,68,60,10,110,29,256,10,109,29,254,10,117,29,144,91,60,162,10,116,29,143,91,60,161,10,91,29,105,90,61,15,10,90,29,104,89,61,15,10,92,29,201,10,89,29,88,88,61,15,10,21,11,81,30,11,100,29,204,10,32,11,89,30,11,109,29,235,10,11,24,95,11,110,29,224,10,25,108,29,211,10,27,11,67,37,11,101,29,206,10,11,67,37,11,103,29,210,10,21,11,69,37,11,105,29,214,10,31,11,61,37,11,105,29,214,10,100,29,195,10,100,29,204,10,165,29,373,10,30,104,29,212,10,124,29,265,10,118,29,225,10,28,138,29,129,55,104,15,10,26,101,29,206,10,92,29,188,10,85,29,160,10,102,29,208,10,114,29,126,121,104,91,143,15,10,28,11,63,84,29,11,135,29,300,10,83,156,29,156,103,143,15,10,146,29,146,55,108,15,10,137,29,111,55,99,15,10,155,29,157,55,117,15,10,118,29,231,10,23,75,115,29,247,10,89,29,169,10,85,29,161,10,85,29,161,10,96,29,182,10,26,98,29,200,10,111,29,226,10,111,29,226,10,103,29,257,10,16,81,29,95,137,108,15,10,87,29,86,126,10,96,29,214,10,101,29,224,10,95,29,212,10,97,29,216,10,41,17,54,106,5,65,48,56,59,34,41,53,25,9,128,29,92,247,10,24,122,94,119,28,81,34,45,53,13,51,26,10,36,17,67,50,64,59,34,30,41,25,9,97,96,10,115,29,99,70,122,114,211,49,17,24,55,71,18,15,10,139,29,109,70,146,24,145,122,71,18,15,10,108,29,105,52,151,24,89,85,74,48,105,102,18,15,10,106,29,123,70,86,15,10,82,24,33,13,28,71,37,29,60,38,45,19,13,26,10,104,29,101,96,71,178,24,48,64,48,40,144,18,15,10,86,131,10,91,29,107,74,59,51,145,17,322,15,10,38,17,64,46,29,9,10,38,11,78,38,10,89,17,58,166,17,75,121,82,13,25,44,26,13,10,86,17,62,13,25,46,26,13,10,86,17,68,71,13,25,44,26,13,10,65,46,34,46,10,76,35,10,78,58,46,42,27,17,13,49,10,41,9,61,20,34,74,78,26,15,39,15,9,62,30,28,14,30,11,20,41,67,69,45,48,38,24,39,9,20,42,5,19,67,60,20,35,5,6,37,109,13,56,78,16,56,16,74,16,92,76,56,16,51,1,54,24,1,7,16,113,105,72,6,54,6,85,141,129,50,24,22,22,23,45,143,185,116,92,121,102,120,100,120,100,128,116,131,122,119,98,117,94,124,108,112,84,111,82,111,82,111,82,112,84,115,90,133,126,120,100,120,100,127,114,127,114,131,122,131,122,127,103,127,103,116,92,116,92,126,101,126,101,124,97,124,97,129,107,129,107,129,107,129,107,129,107,129,107,120,100,120,100,125,110,125,110,121,102,122,104,124,120,124,120,124,108,124,108,123,106,123,106,126,99,111,27,126,105,108,27,120,100,120,100,122,104,122,104,120,100,120,100,120,100,120,100,123,106,123,106,119,98,119,98,120,100,120,100,127,114,127,114,126,112,126,112,120,100,120,100,121,102,121,102,124,108,124,108,119,98,123,106,128,116,128,116,121,102,121,102,122,104,122,104,127,114,127,114,126,112,126,112,121,102,121,102,129,108,129,108,130,110,130,110,131,112,131,112,126,112,126,112,130,110,130,110,125,110,125,110,121,92,121,92,116,92,116,92,120,90,120,90,120,100,120,100,130,102,130,102,125,110,125,110,123,96,123,96,123,96,123,96,121,92,121,92,122,94,122,94,123,101,123,101,129,103,129,103,123,96,128,106,125,110,125,110,119,98,121,102,119,98,136,132,122,94,123,93,123,93,124,108,119,98,119,98,124,108,124,108,119,98,119,98,119,98,119,98,119,98,119,98,128,116,112,84,112,84,124,108,124,108,121,102,126,112,126,112,126,102,126,102,118,87,118,87,118,87,118,87,121,93,121,93,119,89,119,89,121,93,121,93,121,93,121,93,124,99,124,99,121,93,121,93,122,95,122,95,120,91,120,91,122,95,122,95,121,95,121,95,121,93,121,93,119,89,119,89,124,108,130,120,130,120,126,112,126,112,123,106,123,106,127,114,127,114,127,114,127,114,122,104,122,104,124,108,124,108,118,96,118,96,116,92,116,92,133,126,133,126,130,120,130,120,124,108,124,108,122,104,122,104,119,98,119,98,122,104,122,104,123,106,123,106,119,98,119,98,122,104,122,104,130,120,130,120,126,112,119,98,121,102,119,98,119,98,124,108,120,100,123,106,119,98,123,106,122,104,123,106,121,102,123,106,123,106,125,110,121,102,121,102,122,104,124,108,123,106,122,97,117,94,117,94,128,116,128,116,124,108,124,108,124,108,124,108,118,96,114,88,114,88,125,110,128,116,118,96,119,98,119,98,120,100,120,100,125,110,125,110,120,100,120,100,117,94,117,94,120,100,120,100,121,102,121,102,118,96,118,96,125,110,125,110,134,128,134,128,123,106,123,106,117,94,117,94,117,98,126,112,133,126,133,126,126,102,126,102,113,86,113,86,143,146,138,136,115,90,120,100,127,114,122,104,122,104,112,68,44,27,117,78,113,27,119,96,102,27,124,92,77,27,160,98,70,27,197,96,91,27,121,121,88,27,124,107,102,27,124,113,108,27,268,73,40,58,9,50,82,57,9,41,78,9,40,86,9,61,301,122,137,128,27,122,143,125,27,123,106,21,19,38,9,14,34,46,9,65,27,121,120,26,23,52,9,14,47,9,87,27,121,126,26,23,52,9,14,47,9,93,27,113,93,67,43,116,9,78,27,118,154,160,227,57,27,112,101,26,25,54,9,14,51,9,75,27,122,141,133,27,122,147,139,27,124,137,92,39,20,27,124,143,101,47,35,53,13,46,9,23,27,134,133,87,27,134,139,93,27,120,159,153,182,57,27,120,165,159,179,57,27,126,152,140,180,57,27,126,158,146,153,57,27,119,109,58,78,27,119,115,84,27,124,152,58,116,27,124,158,141,27,124,122,220,27,112,75,51,27,115,81,54,27,117,85,56,27,121,93,60,27,123,97,62,27,110,71,49,27,115,81,54,27,117,85,56,27,116,83,55,27,123,93,58,27,117,81,52,27,67,76,40,40,125,99,117,94,80,100,7,108,6,121,48,6,147,7,76,47,37,41,21,184,48,38,24,22,22,23,33,63,76,63,8,21,25,59,7,17,38,24,22,22,23,33,7,46,7,108,37,8,21,25,46,7,36,20,0,0,38,0],"data":null,"url":"typescript.js.map"}}}