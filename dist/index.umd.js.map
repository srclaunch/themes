{"version":3,"file":"index.umd.js","sources":["../src/themes/applab-light/index.ts","../src/themes/applab-dark/index.ts","../src/components/ThemeProvider.tsx"],"sourcesContent":["import { Theme } from '@srclaunch/types';\nimport styles from './theme.css';\n\nexport const AppLabLightTheme: Theme = {\n  css: styles,\n  description: 'Default AppLab Light theme',\n  id: 'applab-light',\n  name: 'AppLab Light',\n};\n","import { Theme } from '@srclaunch/types';\nimport styles from './theme.css';\n\nexport const AppLabDarkTheme: Theme = {\n  css: styles,\n  description: 'AppLab dark theme',\n  id: 'applab-dark',\n  name: 'AppLab Dark',\n};\n","import { Theme } from '@srclaunch/types';\nimport {\n  memo,\n  PropsWithChildren,\n  ReactElement,\n  useEffect,\n  useState,\n} from 'react';\nimport { createGlobalStyle } from 'styled-components';\n\nimport { AppLabLightTheme } from '../themes/applab-light';\n\ntype ThemeProviderProps = PropsWithChildren<{\n  readonly className?: string;\n  readonly theme?: Theme['id'];\n  readonly themes?: readonly Theme[];\n}>;\n\nexport const ThemeProvider = memo(\n  ({\n    className = '',\n    children,\n    theme,\n    themes,\n  }: ThemeProviderProps): ReactElement => {\n    const [currentTheme, setTheme] = useState<Theme>(\n      themes?.find(t => t.id === theme) ?? AppLabLightTheme,\n    );\n\n    useEffect(() => {\n      if (theme && themes) {\n        const match = themes.find(t => t.id === theme);\n\n        if (match) {\n          setTheme(match);\n        } else {\n          setTheme(AppLabLightTheme);\n        }\n      } else {\n        setTheme(AppLabLightTheme);\n      }\n    }, [theme]);\n\n    return (\n      <div\n        className={`${currentTheme.id} ${className} theme-provider`}\n        style={{\n          display: 'flex',\n          flexGrow: 1,\n          overflow: 'hidden',\n        }}\n      >\n        <GlobalStyle theme={currentTheme} />\n\n        {/*<ThemeStyles />*/}\n\n        {children}\n      </div>\n    );\n  },\n);\n\nconst GlobalStyle = createGlobalStyle<{\n  readonly theme?: Theme;\n}>`\n  ${props => props.theme.css};\n\n`;\n"],"names":["styles","memo","useState","useEffect","createGlobalStyle"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAGO,KAAM,GAA0B,CACrC,IAAKA,EACL,YAAa,6BACb,GAAI,eACJ,KAAM,cACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECLO,KAAM,GAAyB,CACpC,IAAK,EACL,YAAa,oBACb,GAAI,cACJ,KAAM,aACR,ECUa,EAAgBC,OAC3B,CAAC,CACC,YAAY,GACZ,WACA,QACA,YACsC,CAChC,KAAA,CAAC,EAAc,GAAYC,EAAAA,SAC/B,GAAQ,KAAK,AAAA,GAAK,EAAE,KAAO,CAAK,GAAK,CACvC,EAEAC,SAAAA,UAAU,IAAM,CACd,GAAI,GAAS,EAAQ,CACnB,KAAM,GAAQ,EAAO,KAAK,AAAK,GAAA,EAAE,KAAO,CAAK,EAE7C,AACE,EADE,GAGO,CAFK,CAGhB,KAEA,GAAS,CAAgB,CAC3B,EACC,CAAC,CAAK,CAAC,EAGP,MAAA,cAAA,MAAA,CACC,UAAW,GAAG,EAAa,MAAM,mBACjC,MAAO,CACL,QAAS,OACT,SAAU,EACV,SAAU,QACZ,CAAA,EAEC,MAAA,cAAA,EAAA,CAAY,MAAO,CAAA,CAAc,EAIjC,CACH,CAEJ,CACF,EAEM,EAAcC,EAAAA;AAAAA,IAGhB,AAAA,GAAS,EAAM,MAAM;AAAA;AAAA"}