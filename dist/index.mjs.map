{"version":3,"file":"index.mjs","sources":["../src/themes/applab-light/index.ts","../src/themes/applab-dark/index.ts","../src/components/ThemeProvider.tsx"],"sourcesContent":["import { Theme } from '@srclaunch/types';\nimport styles from './theme.css';\n\nexport const AppLabLightTheme: Theme = {\n  css: styles,\n  description: 'Default AppLab Light theme',\n  id: 'applab-light',\n  name: 'AppLab Light',\n};\n","import { Theme } from '@srclaunch/types';\nimport styles from './theme.css';\n\nexport const AppLabDarkTheme: Theme = {\n  css: styles,\n  description: 'AppLab dark theme',\n  id: 'applab-dark',\n  name: 'AppLab Dark',\n};\n","import { Theme } from '@srclaunch/types';\nimport {\n  memo,\n  PropsWithChildren,\n  ReactElement,\n  useEffect,\n  useState,\n} from 'react';\nimport { createGlobalStyle } from 'styled-components';\n\nimport { AppLabLightTheme } from '../themes/applab-light';\n\ntype ThemeProviderProps = PropsWithChildren<{\n  readonly className?: string;\n  readonly theme?: Theme['id'];\n  readonly themes?: readonly Theme[];\n}>;\n\nexport const ThemeProvider = memo(\n  ({\n    className = '',\n    children,\n    theme,\n    themes,\n  }: ThemeProviderProps): ReactElement => {\n    const [currentTheme, setTheme] = useState<Theme>(\n      themes?.find(t => t.id === theme) ?? AppLabLightTheme,\n    );\n\n    useEffect(() => {\n      if (theme && themes) {\n        const match = themes.find(t => t.id === theme);\n\n        if (match) {\n          setTheme(match);\n        } else {\n          setTheme(AppLabLightTheme);\n        }\n      } else {\n        setTheme(AppLabLightTheme);\n      }\n    }, [theme]);\n\n    return (\n      <div\n        className={`${currentTheme.id} ${className} theme-provider`}\n        style={{\n          display: 'flex',\n          flexGrow: 1,\n          overflow: 'hidden',\n        }}\n      >\n        <GlobalStyle theme={currentTheme} />\n\n        {/*<ThemeStyles />*/}\n\n        {children}\n      </div>\n    );\n  },\n);\n\nconst GlobalStyle = createGlobalStyle<{\n  readonly theme?: Theme;\n}>`\n  ${props => props.theme.css};\n\n`;\n"],"names":["styles"],"mappings":";;;;;AAGO,MAAM,gBAA0B,GAAA;AAAA,EACrC,GAAK,EAAAA,QAAA;AAAA,EACL,WAAa,EAAA,4BAAA;AAAA,EACb,EAAI,EAAA,cAAA;AAAA,EACJ,IAAM,EAAA,cAAA;AACR;;;;ACLO,MAAM,eAAyB,GAAA;AAAA,EACpC,GAAK,EAAA,MAAA;AAAA,EACL,WAAa,EAAA,mBAAA;AAAA,EACb,EAAI,EAAA,aAAA;AAAA,EACJ,IAAM,EAAA,aAAA;AACR;;ACUa,MAAA,aAAA,GAAgB,KAC3B,CAAC;AAAA,EACC,SAAY,GAAA,EAAA;AAAA,EACZ,QAAA;AAAA,EACA,KAAA;AAAA,EACA,MAAA;AAAA,CACsC,KAAA;AACtC,EAAM,MAAA,CAAC,YAAc,EAAA,QAAA,CAAA,GAAY,QAC/B,CAAA,MAAA,EAAQ,IAAK,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,EAAA,KAAO,KAAK,CAAA,IAAK,gBACvC,CAAA,CAAA;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,MAAA,MAAM,QAAQ,MAAO,CAAA,IAAA,CAAK,CAAK,CAAA,KAAA,CAAA,CAAE,OAAO,KAAK,CAAA,CAAA;AAE7C,MAAA,IAAI,KAAO,EAAA;AACT,QAAA,QAAA,CAAS,KAAK,CAAA,CAAA;AAAA,OACT,MAAA;AACL,QAAA,QAAA,CAAS,gBAAgB,CAAA,CAAA;AAAA,OAC3B;AAAA,KACK,MAAA;AACL,MAAA,QAAA,CAAS,gBAAgB,CAAA,CAAA;AAAA,KAC3B;AAAA,GACF,EAAG,CAAC,KAAK,CAAC,CAAA,CAAA;AAEV,EAAA,uBACG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,IACC,SAAA,EAAW,CAAG,EAAA,YAAA,CAAa,EAAM,CAAA,CAAA,EAAA,SAAA,CAAA,eAAA,CAAA;AAAA,IACjC,KAAO,EAAA;AAAA,MACL,OAAS,EAAA,MAAA;AAAA,MACT,QAAU,EAAA,CAAA;AAAA,MACV,QAAU,EAAA,QAAA;AAAA,KACZ;AAAA,GAAA,kBAEC,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAA,IAAY,KAAO,EAAA,YAAA;AAAA,GAAc,GAIjC,QACH,CAAA,CAAA;AAEJ,CACF,EAAA;AAEA,MAAM,WAAc,GAAA,iBAAA,CAAA;AAAA,EAGhB,EAAA,CAAA,KAAA,KAAS,MAAM,KAAM,CAAA,GAAA,CAAA;AAAA;AAAA,CAAA;;;;"}